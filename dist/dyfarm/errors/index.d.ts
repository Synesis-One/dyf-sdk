/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
declare type ErrorWithCode = Error & {
    code: number;
};
declare type MaybeErrorWithCode = ErrorWithCode | null | undefined;
/**
 * InvalidPDA: 'PDA Seed mismatch'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidPDAError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidStakeAccount: 'Invalid Stake Account Type'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidStakeAccountError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidStakeType: 'Invalid Stake Type'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidStakeTypeError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidStakeStatus: 'Invalid Stake Status'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidStakeStatusError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidStakeDelegate: 'Stake Account not belong to this campaign'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidStakeDelegateError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidTokenMint: 'Invalid Token Mint'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidTokenMintError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidTokenOwner: 'Passed token account is not owned by signer'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidTokenOwnerError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * DoubleVoteDetect: 'Insufficient Token Balance'
 *
 * @category Errors
 * @category generated
 */
export declare class DoubleVoteDetectError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InsufficientTokenBalance: 'User tried to vote on utterance'
 *
 * @category Errors
 * @category generated
 */
export declare class InsufficientTokenBalanceError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * RewardBalanceIsZero: 'There is no reward to claim'
 *
 * @category Errors
 * @category generated
 */
export declare class RewardBalanceIsZeroError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * PhraseValidatedAlready: 'Phrase validation is finished'
 *
 * @category Errors
 * @category generated
 */
export declare class PhraseValidatedAlreadyError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CampaignFinishedAlready: 'Campaign is finished'
 *
 * @category Errors
 * @category generated
 */
export declare class CampaignFinishedAlreadyError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ProfileNotMatchWithAuthority: 'Profile is not match with authority Signer'
 *
 * @category Errors
 * @category generated
 */
export declare class ProfileNotMatchWithAuthorityError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * PermitRpcIsMissed: 'User have to set RPC permission to true'
 *
 * @category Errors
 * @category generated
 */
export declare class PermitRpcIsMissedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * RoleMismatch: 'User Role is Mismatch'
 *
 * @category Errors
 * @category generated
 */
export declare class RoleMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * RpcSignerMismatch: 'The RPC Signer is invalid'
 *
 * @category Errors
 * @category generated
 */
export declare class RpcSignerMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ConfidentIsInvalid: 'Confident level should be in range of 1~5'
 *
 * @category Errors
 * @category generated
 */
export declare class ConfidentIsInvalidError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * StakeLocked: 'Need to wait for unlock time'
 *
 * @category Errors
 * @category generated
 */
export declare class StakeLockedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidMint: 'the mint account passed is different from NFT Mint'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidMintError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidGuildAdmin: 'the owner of NFT is invalid'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidGuildAdminError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidNFT: 'the creator of NFT is invalid'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidNFTError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidAccessMethod: 'You should have profile with NFT StakingType'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidAccessMethodError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CampaignExpired: 'the campaign is expired'
 *
 * @category Errors
 * @category generated
 */
export declare class CampaignExpiredError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CampaignNotFinished: 'the campaign is not finished'
 *
 * @category Errors
 * @category generated
 */
export declare class CampaignNotFinishedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * RewardIsLow: 'Reward is low'
 *
 * @category Errors
 * @category generated
 */
export declare class RewardIsLowError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidMerkleProof: 'Invalid Merkle Proof'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidMerkleProofError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidSignature: 'Invalid Signature'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidSignatureError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidInput: 'Invalid Input on kind or phrase_type'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidInputError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * E: 'eeeeeeeeeeeeeeeeeeeeeeeeeee'
 *
 * @category Errors
 * @category generated
 */
export declare class EError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export declare function errorFromCode(code: number): MaybeErrorWithCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export declare function errorFromName(name: string): MaybeErrorWithCode;
export {};
