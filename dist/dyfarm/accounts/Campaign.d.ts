/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
/// <reference types="node" />
import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { Tag } from '../types/Tag';
/**
 * Arguments used to create {@link Campaign}
 * @category Accounts
 * @category generated
 */
export declare type CampaignArgs = {
    architect: web3.PublicKey;
    domain: number[];
    subject: number[];
    industry: number[];
    organizer: number[];
    lang: number[];
    title: number[];
    tag: Tag;
    open: beet.bignum;
    close: beet.bignum;
    expire: beet.bignum;
    stakeTvl: beet.bignum;
    minStake: beet.bignum;
    rewardCap: beet.bignum;
    rewardTvl: beet.bignum;
    rewardClaim: beet.bignum;
    minPhrase: number;
    minValidate: number;
    rpuValidator: beet.bignum;
    rpuGeneral: beet.bignum;
    rpuSpecific: beet.bignum;
    rpuCause: beet.bignum;
    rpuEffect: beet.bignum;
    majorityQuorum: number;
    utterances: number;
    phraseApproved: number;
    payScale: number;
    timeLimit: beet.bignum;
    finish: boolean;
    bump: number;
};
export declare const campaignDiscriminator: number[];
/**
 * Holds the data for the {@link Campaign} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export declare class Campaign implements CampaignArgs {
    readonly architect: web3.PublicKey;
    readonly domain: number[];
    readonly subject: number[];
    readonly industry: number[];
    readonly organizer: number[];
    readonly lang: number[];
    readonly title: number[];
    readonly tag: Tag;
    readonly open: beet.bignum;
    readonly close: beet.bignum;
    readonly expire: beet.bignum;
    readonly stakeTvl: beet.bignum;
    readonly minStake: beet.bignum;
    readonly rewardCap: beet.bignum;
    readonly rewardTvl: beet.bignum;
    readonly rewardClaim: beet.bignum;
    readonly minPhrase: number;
    readonly minValidate: number;
    readonly rpuValidator: beet.bignum;
    readonly rpuGeneral: beet.bignum;
    readonly rpuSpecific: beet.bignum;
    readonly rpuCause: beet.bignum;
    readonly rpuEffect: beet.bignum;
    readonly majorityQuorum: number;
    readonly utterances: number;
    readonly phraseApproved: number;
    readonly payScale: number;
    readonly timeLimit: beet.bignum;
    readonly finish: boolean;
    readonly bump: number;
    private constructor();
    /**
     * Creates a {@link Campaign} instance from the provided args.
     */
    static fromArgs(args: CampaignArgs): Campaign;
    /**
     * Deserializes the {@link Campaign} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset?: number): [Campaign, number];
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link Campaign} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static fromAccountAddress(connection: web3.Connection, address: web3.PublicKey, commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig): Promise<Campaign>;
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId?: web3.PublicKey): beetSolana.GpaBuilder<{
        architect: any;
        domain: any;
        subject: any;
        industry: any;
        organizer: any;
        lang: any;
        title: any;
        tag: any;
        open: any;
        close: any;
        expire: any;
        stakeTvl: any;
        minStake: any;
        rewardCap: any;
        rewardTvl: any;
        rewardClaim: any;
        minPhrase: any;
        minValidate: any;
        rpuValidator: any;
        rpuGeneral: any;
        rpuSpecific: any;
        rpuCause: any;
        rpuEffect: any;
        majorityQuorum: any;
        utterances: any;
        phraseApproved: any;
        payScale: any;
        timeLimit: any;
        finish: any;
        bump: any;
        accountDiscriminator: any;
    }>;
    /**
     * Deserializes the {@link Campaign} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf: Buffer, offset?: number): [Campaign, number];
    /**
     * Serializes the {@link Campaign} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize(): [Buffer, number];
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link Campaign}
     */
    static get byteSize(): number;
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link Campaign} data from rent
     *
     * @param connection used to retrieve the rent exemption information
     */
    static getMinimumBalanceForRentExemption(connection: web3.Connection, commitment?: web3.Commitment): Promise<number>;
    /**
     * Determines if the provided {@link Buffer} has the correct byte size to
     * hold {@link Campaign} data.
     */
    static hasCorrectByteSize(buf: Buffer, offset?: number): boolean;
    /**
     * Returns a readable version of {@link Campaign} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty(): {
        architect: string;
        domain: number[];
        subject: number[];
        industry: number[];
        organizer: number[];
        lang: number[];
        title: number[];
        tag: string;
        open: number | {
            toNumber: () => number;
        };
        close: number | {
            toNumber: () => number;
        };
        expire: number | {
            toNumber: () => number;
        };
        stakeTvl: number | {
            toNumber: () => number;
        };
        minStake: number | {
            toNumber: () => number;
        };
        rewardCap: number | {
            toNumber: () => number;
        };
        rewardTvl: number | {
            toNumber: () => number;
        };
        rewardClaim: number | {
            toNumber: () => number;
        };
        minPhrase: number;
        minValidate: number;
        rpuValidator: number | {
            toNumber: () => number;
        };
        rpuGeneral: number | {
            toNumber: () => number;
        };
        rpuSpecific: number | {
            toNumber: () => number;
        };
        rpuCause: number | {
            toNumber: () => number;
        };
        rpuEffect: number | {
            toNumber: () => number;
        };
        majorityQuorum: number;
        utterances: number;
        phraseApproved: number;
        payScale: number;
        timeLimit: number | {
            toNumber: () => number;
        };
        finish: boolean;
        bump: number;
    };
}
/**
 * @category Accounts
 * @category generated
 */
export declare const campaignBeet: beet.BeetStruct<Campaign, CampaignArgs & {
    accountDiscriminator: number[];
}>;
