/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
/// <reference types="node" />
import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { AccessMethod } from '../types/AccessMethod';
import { Role } from '../types/Role';
/**
 * Arguments used to create {@link Profile}
 * @category Accounts
 * @category generated
 */
export declare type ProfileArgs = {
    user: web3.PublicKey;
    kind: AccessMethod;
    nftStaked: boolean;
    nftMint: web3.PublicKey;
    scholarAccess: boolean;
    scholarSign: boolean;
    scholarActivate: beet.bignum;
    nftOwner: web3.PublicKey;
    nftOwnerShare: number;
    nftGuild: web3.PublicKey;
    nftGuildMaster: beet.COption<web3.PublicKey>;
    nftGuildShare: beet.COption<number>;
    role: Role;
    durability: number;
    productivity: number;
    performance: number;
    activity: number;
    reject: number;
    accept: number;
    rewardF2p: beet.bignum;
    offchainPermit: boolean;
    offchainSigner: web3.PublicKey;
    bump: number;
};
export declare const profileDiscriminator: number[];
/**
 * Holds the data for the {@link Profile} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export declare class Profile implements ProfileArgs {
    readonly user: web3.PublicKey;
    readonly kind: AccessMethod;
    readonly nftStaked: boolean;
    readonly nftMint: web3.PublicKey;
    readonly scholarAccess: boolean;
    readonly scholarSign: boolean;
    readonly scholarActivate: beet.bignum;
    readonly nftOwner: web3.PublicKey;
    readonly nftOwnerShare: number;
    readonly nftGuild: web3.PublicKey;
    readonly nftGuildMaster: beet.COption<web3.PublicKey>;
    readonly nftGuildShare: beet.COption<number>;
    readonly role: Role;
    readonly durability: number;
    readonly productivity: number;
    readonly performance: number;
    readonly activity: number;
    readonly reject: number;
    readonly accept: number;
    readonly rewardF2p: beet.bignum;
    readonly offchainPermit: boolean;
    readonly offchainSigner: web3.PublicKey;
    readonly bump: number;
    private constructor();
    /**
     * Creates a {@link Profile} instance from the provided args.
     */
    static fromArgs(args: ProfileArgs): Profile;
    /**
     * Deserializes the {@link Profile} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset?: number): [Profile, number];
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link Profile} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static fromAccountAddress(connection: web3.Connection, address: web3.PublicKey, commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig): Promise<Profile>;
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId?: web3.PublicKey): beetSolana.GpaBuilder<ProfileArgs & {
        accountDiscriminator: number[];
    }>;
    /**
     * Deserializes the {@link Profile} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf: Buffer, offset?: number): [Profile, number];
    /**
     * Serializes the {@link Profile} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize(): [Buffer, number];
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link Profile} for the provided args.
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     */
    static byteSize(args: ProfileArgs): number;
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link Profile} data from rent
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     * @param connection used to retrieve the rent exemption information
     */
    static getMinimumBalanceForRentExemption(args: ProfileArgs, connection: web3.Connection, commitment?: web3.Commitment): Promise<number>;
    /**
     * Returns a readable version of {@link Profile} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty(): {
        user: string;
        kind: string;
        nftStaked: boolean;
        nftMint: string;
        scholarAccess: boolean;
        scholarSign: boolean;
        scholarActivate: number | {
            toNumber: () => number;
        };
        nftOwner: string;
        nftOwnerShare: number;
        nftGuild: string;
        nftGuildMaster: web3.PublicKey;
        nftGuildShare: number;
        role: string;
        durability: number;
        productivity: number;
        performance: number;
        activity: number;
        reject: number;
        accept: number;
        rewardF2p: number | {
            toNumber: () => number;
        };
        offchainPermit: boolean;
        offchainSigner: string;
        bump: number;
    };
}
/**
 * @category Accounts
 * @category generated
 */
export declare const profileBeet: beet.FixableBeetStruct<Profile, ProfileArgs & {
    accountDiscriminator: number[];
}>;
