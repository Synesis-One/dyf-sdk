/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
/// <reference types="node" />
import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { StakingType } from '../types/StakingType';
import { StakeAccountType } from '../types/StakeAccountType';
import { StakeAccountRole } from '../types/StakeAccountRole';
/**
 * Arguments used to create {@link StakeAccount}
 * @category Accounts
 * @category generated
 */
export declare type StakeAccountArgs = {
    dapp: web3.PublicKey;
    stakeType: StakingType;
    accountType: StakeAccountType;
    token: web3.PublicKey;
    user: web3.PublicKey;
    userRole: StakeAccountRole;
    delegateCampaign: beet.COption<web3.PublicKey>;
    tokenAmount: beet.bignum;
    lockInTime: beet.bignum;
    lastRewardClaim: beet.bignum;
    lockOutTime: beet.bignum;
    pendingReward: beet.bignum;
    reward: beet.bignum;
    cliffReward: beet.bignum;
    unlockReward: beet.bignum;
    rewarded: boolean;
    dyfUser: boolean;
    status: boolean;
    reserve: beet.bignum;
};
export declare const stakeAccountDiscriminator: number[];
/**
 * Holds the data for the {@link StakeAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export declare class StakeAccount implements StakeAccountArgs {
    readonly dapp: web3.PublicKey;
    readonly stakeType: StakingType;
    readonly accountType: StakeAccountType;
    readonly token: web3.PublicKey;
    readonly user: web3.PublicKey;
    readonly userRole: StakeAccountRole;
    readonly delegateCampaign: beet.COption<web3.PublicKey>;
    readonly tokenAmount: beet.bignum;
    readonly lockInTime: beet.bignum;
    readonly lastRewardClaim: beet.bignum;
    readonly lockOutTime: beet.bignum;
    readonly pendingReward: beet.bignum;
    readonly reward: beet.bignum;
    readonly cliffReward: beet.bignum;
    readonly unlockReward: beet.bignum;
    readonly rewarded: boolean;
    readonly dyfUser: boolean;
    readonly status: boolean;
    readonly reserve: beet.bignum;
    private constructor();
    /**
     * Creates a {@link StakeAccount} instance from the provided args.
     */
    static fromArgs(args: StakeAccountArgs): StakeAccount;
    /**
     * Deserializes the {@link StakeAccount} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset?: number): [StakeAccount, number];
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link StakeAccount} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static fromAccountAddress(connection: web3.Connection, address: web3.PublicKey, commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig): Promise<StakeAccount>;
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId?: web3.PublicKey): beetSolana.GpaBuilder<StakeAccountArgs & {
        accountDiscriminator: number[];
    }>;
    /**
     * Deserializes the {@link StakeAccount} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf: Buffer, offset?: number): [StakeAccount, number];
    /**
     * Serializes the {@link StakeAccount} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize(): [Buffer, number];
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link StakeAccount} for the provided args.
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     */
    static byteSize(args: StakeAccountArgs): number;
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link StakeAccount} data from rent
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     * @param connection used to retrieve the rent exemption information
     */
    static getMinimumBalanceForRentExemption(args: StakeAccountArgs, connection: web3.Connection, commitment?: web3.Commitment): Promise<number>;
    /**
     * Returns a readable version of {@link StakeAccount} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty(): {
        dapp: string;
        stakeType: string;
        accountType: string;
        token: string;
        user: string;
        userRole: string;
        delegateCampaign: web3.PublicKey;
        tokenAmount: number | {
            toNumber: () => number;
        };
        lockInTime: number | {
            toNumber: () => number;
        };
        lastRewardClaim: number | {
            toNumber: () => number;
        };
        lockOutTime: number | {
            toNumber: () => number;
        };
        pendingReward: number | {
            toNumber: () => number;
        };
        reward: number | {
            toNumber: () => number;
        };
        cliffReward: number | {
            toNumber: () => number;
        };
        unlockReward: number | {
            toNumber: () => number;
        };
        rewarded: boolean;
        dyfUser: boolean;
        status: boolean;
        reserve: number | {
            toNumber: () => number;
        };
    };
}
/**
 * @category Accounts
 * @category generated
 */
export declare const stakeAccountBeet: beet.FixableBeetStruct<StakeAccount, StakeAccountArgs & {
    accountDiscriminator: number[];
}>;
