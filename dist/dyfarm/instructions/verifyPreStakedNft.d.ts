/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
/**
 * @category Instructions
 * @category VerifyPreStakedNft
 * @category generated
 */
export declare const verifyPreStakedNftStruct: beet.BeetArgsStruct<{
    instructionDiscriminator: number[];
}>;
/**
 * Accounts required by the _verifyPreStakedNft_ instruction
 *
 * @property [_writable_, **signer**] user
 * @property [_writable_] userProfile
 * @property [] userNftAccount
 * @property [] stakeAccount
 * @property [] farmConfig
 * @property [_writable_] pdaAccount
 * @property [_writable_] nftMint
 * @property [] nftMetadata
 * @property [] clock
 * @category Instructions
 * @category VerifyPreStakedNft
 * @category generated
 */
export declare type VerifyPreStakedNftInstructionAccounts = {
    user: web3.PublicKey;
    userProfile: web3.PublicKey;
    userNftAccount: web3.PublicKey;
    stakeAccount: web3.PublicKey;
    farmConfig: web3.PublicKey;
    pdaAccount: web3.PublicKey;
    nftMint: web3.PublicKey;
    nftMetadata: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    tokenProgram?: web3.PublicKey;
    clock: web3.PublicKey;
    rent?: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};
export declare const verifyPreStakedNftInstructionDiscriminator: number[];
/**
 * Creates a _VerifyPreStakedNft_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category VerifyPreStakedNft
 * @category generated
 */
export declare function createVerifyPreStakedNftInstruction(accounts: VerifyPreStakedNftInstructionAccounts, programId?: web3.PublicKey): web3.TransactionInstruction;
