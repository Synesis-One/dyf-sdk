{"version":3,"file":"dyf.cjs.production.min.js","sources":["../src/utils/helper.ts","../src/utils/web3.ts","../src/dyfarm/types/Tag.ts","../src/utils/constants.ts","../src/dyfarm/types/AccessMethod.ts","../src/dyfarm/accounts/Campaign.ts","../src/dyfarm/types/PhraseType.ts","../src/dyfarm/accounts/CampaignActivity.ts","../src/dyfarm/accounts/CampaignVault.ts","../src/dyfarm/accounts/FarmConfig.ts","../src/dyfarm/accounts/Feed.ts","../src/dyfarm/accounts/Guild.ts","../src/dyfarm/types/Offchain.ts","../src/dyfarm/types/Role.ts","../src/dyfarm/accounts/Phrase.ts","../src/dyfarm/types/StakingType.ts","../src/dyfarm/accounts/Profile.ts","../src/dyfarm/types/StakeAccountType.ts","../src/dyfarm/types/StakeAccountRole.ts","../src/dyfarm/accounts/StakeAccount.ts","../src/dyfarm/accounts/Validate.ts","../src/dyfarm/accounts/Validators.ts","../src/dyfarm/accounts/index.ts","../src/dyfarm/errors/index.ts","../src/dyfarm/instructions/adjustReward.ts","../src/dyfarm/instructions/airdrop.ts","../src/dyfarm/instructions/allocateTable.ts","../src/dyfarm/instructions/checkPrice.ts","../src/dyfarm/instructions/claimReward.ts","../src/dyfarm/instructions/createCampaign.ts","../src/dyfarm/instructions/createGuild.ts","../src/dyfarm/instructions/createProfile.ts","../src/dyfarm/instructions/deactiveTable.ts","../src/dyfarm/instructions/extendTable.ts","../src/dyfarm/instructions/free2play.ts","../src/dyfarm/instructions/guildClaimReward.ts","../src/dyfarm/instructions/guildGrantScholar.ts","../src/dyfarm/instructions/guildStakeNft.ts","../src/dyfarm/instructions/guildUnstakeNft.ts","../src/dyfarm/instructions/initialize.ts","../src/dyfarm/instructions/revokeScholar.ts","../src/dyfarm/instructions/rpcCloseCampaign.ts","../src/dyfarm/instructions/rpcClosePhrase.ts","../src/dyfarm/instructions/rpcCloseValidate.ts","../src/dyfarm/instructions/rpcPermit.ts","../src/dyfarm/instructions/rpcSubmitPhrase.ts","../src/dyfarm/instructions/rpcValidatePhrase.ts","../src/dyfarm/instructions/scholarSign.ts","../src/dyfarm/instructions/stakeCampaign.ts","../src/dyfarm/instructions/stakeNft.ts","../src/dyfarm/instructions/submitPhrase.ts","../src/dyfarm/instructions/unstakeCampaign.ts","../src/dyfarm/instructions/unstakeNft.ts","../src/dyfarm/instructions/updateCampaign.ts","../src/dyfarm/instructions/validatePhrase.ts","../src/dyfarm/instructions/verifyPreStakedNft.ts","../src/dyfarm/index.ts","../src/modules/airdrop.ts","../src/services/dyf.ts","../src/services/dyf-rpc.ts","../src/modules/architect.ts","../src/modules/campaignActivities.ts","../src/modules/builder.ts","../src/modules/campaigns.ts","../src/modules/rpcToken.ts","../src/modules/validator.ts","../src/modules/walletBalance.ts"],"sourcesContent":["export const encodeText = (txt: string): Uint8Array => {\n  return new TextEncoder().encode(txt)\n}\n\nexport const decodeText = (bytes: number[]): string => {\n  return new TextDecoder('utf-8').decode(Uint8Array.from(bytes.filter((item) => item !== 0)))\n}\n\nexport const sleep = (ms: number): Promise<unknown> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n","import * as splToken from '@solana/spl-token'\nimport {\n  Connection,\n  PublicKey,\n  Signer,\n  TransactionInstruction,\n  Transaction,\n  Commitment,\n  SimulatedTransactionResponse,\n  SendOptions,\n  RpcResponseAndContext,\n  TransactionSignature,\n  SignatureStatus\n} from '@solana/web3.js'\nimport { AnchorWallet } from '../typings'\nimport { sleep } from './helper'\n\nconst DEFAULT_TIMEOUT = 3 * 60 * 1000 // 3 minutes\n\nexport async function sendInstructions(\n  connection: Connection,\n  wallet: AnchorWallet,\n  instructions: TransactionInstruction[],\n  signers: Signer[],\n  commitment: Commitment = 'processed',\n  payer: PublicKey = wallet.publicKey\n): Promise<string> {\n  let tx = new Transaction()\n  tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash\n  tx.feePayer = payer || wallet.publicKey\n  tx.add(...instructions)\n  if (signers.length > 0) {\n    tx.partialSign(...signers)\n  }\n  tx = await wallet.signTransaction(tx)\n\n  try {\n    const { txid } = await sendAndConfirmWithRetry(\n      connection,\n      tx.serialize(),\n      {\n        skipPreflight: true\n      },\n      commitment\n    )\n    return txid\n  } catch (e) {\n    console.error(e)\n    throw e\n  }\n}\n\nfunction getUnixTime(): number {\n  return new Date().valueOf() / 1000\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false\n): Promise<SignatureStatus | null | void> => {\n  let done = false\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null\n  }\n  let subId = 0\n  // eslint-disable-next-line no-async-promise-executor\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return\n      }\n      done = true\n      console.log('Rejecting for timeout...')\n      reject({ timeout: true })\n    }, timeout)\n    try {\n      console.log('COMMIMENT', commitment)\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0\n          }\n          if (result.err) {\n            console.log('Rejected via websocket', result.err)\n            reject(status)\n          } else {\n            console.log('Resolved via websocket', result)\n            resolve(status)\n          }\n        },\n        commitment\n      )\n    } catch (e) {\n      done = true\n      console.error('WS error in setup', txid, e)\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      ;(async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([txid])\n          status = signatureStatuses && signatureStatuses.value[0]\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status)\n            } else if (status.err) {\n              console.log('REST error for', txid, status)\n              done = true\n              reject(status.err)\n            } else if (!status.confirmations && !status.confirmationStatus) {\n              console.log('REST no confirmations for', txid, status)\n            } else {\n              console.log('REST confirmation for', txid, status)\n              if (!status.confirmationStatus || status.confirmationStatus == commitment) {\n                done = true\n                resolve(status)\n              }\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e)\n          }\n        }\n      })()\n      await sleep(2000)\n    }\n  })\n\n  if (\n    //@ts-ignore\n    connection._signatureSubscriptions &&\n    //@ts-ignore\n    connection._signatureSubscriptions[subId]\n  ) {\n    connection.removeSignatureListener(subId)\n  }\n  done = true\n  console.log('Returning status ', status)\n  return status\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  )\n\n  const signData = transaction.serializeMessage()\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData)\n  const encodedTransaction = wireTransaction.toString('base64')\n  const config: any = { encoding: 'base64', commitment }\n  const args = [encodedTransaction, config]\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args)\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message)\n  }\n  return res.result\n}\n\nexport async function sendAndConfirmWithRetry(\n  connection: Connection,\n  txn: Buffer,\n  sendOptions: SendOptions,\n  commitment: Commitment,\n  timeout = DEFAULT_TIMEOUT\n): Promise<{ txid: string }> {\n  let done = false\n  // let slot = 0;\n  const txid = await connection.sendRawTransaction(txn, sendOptions)\n  const startTime = getUnixTime()\n  ;(async () => {\n    while (!done && getUnixTime() - startTime < timeout) {\n      await connection.sendRawTransaction(txn, sendOptions)\n\n      await sleep(500)\n    }\n  })()\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(txid, timeout, connection, commitment, true)\n\n    if (!confirmation) throw new Error('Timed out awaiting confirmation on transaction')\n\n    if (confirmation.err) {\n      const tx = await connection.getTransaction(txid)\n      console.error(tx?.meta?.logMessages?.join('\\n'))\n      console.error(confirmation.err)\n      throw new Error('Transaction failed: Custom instruction error')\n    }\n\n    // slot = confirmation?.slot || 0;\n  } catch (err) {\n    console.error('Timeout Error caught', err)\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction')\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null\n    try {\n      simulateResult = (await simulateTransaction(connection, Transaction.from(txn), 'single')).value\n    } catch (e) {\n      const tx = await connection.getTransaction(txid)\n      console.error(tx?.meta?.logMessages?.join('\\n'))\n    }\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        console.error(simulateResult.logs.join('\\n'))\n      }\n    }\n\n    if (err.err) {\n      throw err.err\n    }\n\n    throw err\n  } finally {\n    done = true\n  }\n\n  console.log('Latency', txid, getUnixTime() - startTime)\n\n  return { txid }\n}\n\nexport const getAssociateTokenAccount = (mint: PublicKey, authority: PublicKey): PublicKey => {\n  const [address] = PublicKey.findProgramAddressSync(\n    [authority.toBuffer(), splToken.TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    splToken.ASSOCIATED_TOKEN_PROGRAM_ID\n  )\n  return address\n}\n\nexport const getOrCreateAssociateTokenAccount = async (\n  connection: Connection,\n  wallet: AnchorWallet,\n  mint: PublicKey,\n  authority: PublicKey\n): Promise<PublicKey> => {\n  const ata = getAssociateTokenAccount(mint, authority)\n  const accountInfo = await connection.getAccountInfo(ata)\n  if (accountInfo == null) {\n    const instructions = [\n      splToken.createAssociatedTokenAccountInstruction(\n        wallet.publicKey,\n        ata,\n        authority,\n        mint,\n        splToken.TOKEN_PROGRAM_ID,\n        splToken.ASSOCIATED_TOKEN_PROGRAM_ID\n      )\n    ]\n    await sendInstructions(connection, wallet, instructions, [])\n  }\n  return ata\n}\n\nexport const isEqualAddress = (acc_st: string | PublicKey, acc_nd: string | PublicKey): boolean => {\n  if (acc_st === null || acc_st === undefined || acc_nd === null || acc_nd === undefined) return false\n\n  const pubkey_st = typeof acc_st === 'string' ? acc_st : new PublicKey(acc_st).toBase58()\n  const pubkey_nd = typeof acc_nd === 'string' ? acc_nd : new PublicKey(acc_nd).toBase58()\n\n  return pubkey_st === pubkey_nd\n}\n\nexport const isIncludingAddress = (arr_addr: Array<string | PublicKey>, addr: string | PublicKey): boolean => {\n  return arr_addr.filter((addr_st) => isEqualAddress(addr, addr_st)).length > 0\n}\n\nexport const isValidAddress = (acc: string | PublicKey): boolean => {\n  const pubkey = typeof acc === 'string' ? new PublicKey(acc) : acc\n  return PublicKey.isOnCurve(pubkey.toBuffer())\n}\n\nexport const isEmptyAddress = (acc: string | PublicKey): boolean => {\n  const pubkey = typeof acc === 'string' ? new PublicKey(acc) : acc\n\n  return pubkey.toBase58() === '11111111111111111111111111111111'\n}\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\n/**\r\n * @category enums\r\n * @category generated\r\n */\r\nexport enum Tag {\r\n  Word,\r\n  Sentence,\r\n}\r\n\r\n/**\r\n * @category userTypes\r\n * @category generated\r\n */\r\nexport const tagBeet = beet.fixedScalarEnum(Tag) as beet.FixedSizeBeet<Tag, Tag>\r\n","export const STAKE_ACCOUNT_ROLE = {\n  architect: { val: 1, label: 'architect' },\n  builder: { val: 2, label: 'builder' },\n  validator: { val: 3, label: 'validator' }\n}\nexport const ACCESS_METHOD = {\n  nft: { val: 0, label: 'nft' },\n  sns: { val: 1, label: 'sns' },\n  free2play: { val: 2, label: 'free2play' }\n}\nexport const PHRASE_TYPE = {\n  general: { val: 0, label: 'general' },\n  specific: { val: 1, label: 'specific' },\n  cause: { val: 2, label: 'cause' },\n  effect: { val: 3, label: 'effect' }\n}\nexport const OFFCHAIN_TYPE = {\n  synesis: { val: 0, label: 'synesis' },\n  ipfs: { val: 1, label: 'ipfs' },\n  arweave: { val: 2, label: 'arweave' },\n  s3: { val: 3, label: 's3' }\n}\nexport const RPC_TXN_STATUS = {\n  pending: { val: 0, label: 'pending' },\n  finalized: { val: 1, label: 'finalized' },\n  expired: { val: 2, label: 'expired' }\n}\n\nexport const SNS_ADDRESS = 'SNSNkV9zfG5ZKWQs6x4hxvBRV6s8SqMfSGCtECDvdMd'\n\nexport const KANON_NFT_CHARITY_ADDRESS = 'CRTegTRWPceXBc7ywwP9NKHXavjcW5HYaN4AxR3AcH9H'\n\nexport const KANON_NFT_AUTHORITY_ADDRESS = 'AfqoHa1MmyBDai5teTLz7H5NcvwYDRCauKgkBFyb1nfV'\n\nexport const METADATA_PROGRAM_ADDRESS = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n\nexport const SNS_PAIR = 'SNS/USD'\n\nexport const LOOKUP_PROGRAM_ADDRESS = 'AddressLookupTab1e1111111111111111111111111'\n\nexport const LAMPORTS_PER_USDC = 1_000_000\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\n/**\r\n * @category enums\r\n * @category generated\r\n */\r\nexport enum AccessMethod {\r\n  NFT,\r\n  SNS,\r\n  Free2Play,\r\n  PreStakedNFT,\r\n  Scholar,\r\n}\r\n\r\n/**\r\n * @category userTypes\r\n * @category generated\r\n */\r\nexport const accessMethodBeet = beet.fixedScalarEnum(\r\n  AccessMethod\r\n) as beet.FixedSizeBeet<AccessMethod, AccessMethod>\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as web3 from '@solana/web3.js'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as beetSolana from '@metaplex-foundation/beet-solana'\r\nimport { Tag, tagBeet } from '../types/Tag'\r\n\r\n/**\r\n * Arguments used to create {@link Campaign}\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport type CampaignArgs = {\r\n  architect: web3.PublicKey\r\n  domain: number[] /* size: 64 */\r\n  subject: number[] /* size: 64 */\r\n  industry: number[] /* size: 32 */\r\n  organizer: number[] /* size: 16 */\r\n  lang: number[] /* size: 16 */\r\n  title: number[] /* size: 16 */\r\n  tag: Tag\r\n  open: beet.bignum\r\n  close: beet.bignum\r\n  expire: beet.bignum\r\n  stakeTvl: beet.bignum\r\n  minStake: beet.bignum\r\n  rewardCap: beet.bignum\r\n  rewardTvl: beet.bignum\r\n  rewardClaim: beet.bignum\r\n  minPhrase: number\r\n  minValidate: number\r\n  rpuValidator: beet.bignum\r\n  rpuGeneral: beet.bignum\r\n  rpuSpecific: beet.bignum\r\n  rpuCause: beet.bignum\r\n  rpuEffect: beet.bignum\r\n  majorityQuorum: number\r\n  utterances: number\r\n  phraseApproved: number\r\n  payScale: number\r\n  timeLimit: beet.bignum\r\n  finish: boolean\r\n  bump: number\r\n}\r\n\r\nexport const campaignDiscriminator = [50, 40, 49, 11, 157, 220, 229, 192]\r\n/**\r\n * Holds the data for the {@link Campaign} Account and provides de/serialization\r\n * functionality for that data\r\n *\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport class Campaign implements CampaignArgs {\r\n  private constructor(\r\n    readonly architect: web3.PublicKey,\r\n    readonly domain: number[] /* size: 64 */,\r\n    readonly subject: number[] /* size: 64 */,\r\n    readonly industry: number[] /* size: 32 */,\r\n    readonly organizer: number[] /* size: 16 */,\r\n    readonly lang: number[] /* size: 16 */,\r\n    readonly title: number[] /* size: 16 */,\r\n    readonly tag: Tag,\r\n    readonly open: beet.bignum,\r\n    readonly close: beet.bignum,\r\n    readonly expire: beet.bignum,\r\n    readonly stakeTvl: beet.bignum,\r\n    readonly minStake: beet.bignum,\r\n    readonly rewardCap: beet.bignum,\r\n    readonly rewardTvl: beet.bignum,\r\n    readonly rewardClaim: beet.bignum,\r\n    readonly minPhrase: number,\r\n    readonly minValidate: number,\r\n    readonly rpuValidator: beet.bignum,\r\n    readonly rpuGeneral: beet.bignum,\r\n    readonly rpuSpecific: beet.bignum,\r\n    readonly rpuCause: beet.bignum,\r\n    readonly rpuEffect: beet.bignum,\r\n    readonly majorityQuorum: number,\r\n    readonly utterances: number,\r\n    readonly phraseApproved: number,\r\n    readonly payScale: number,\r\n    readonly timeLimit: beet.bignum,\r\n    readonly finish: boolean,\r\n    readonly bump: number\r\n  ) {}\r\n\r\n  /**\r\n   * Creates a {@link Campaign} instance from the provided args.\r\n   */\r\n  static fromArgs(args: CampaignArgs) {\r\n    return new Campaign(\r\n      args.architect,\r\n      args.domain,\r\n      args.subject,\r\n      args.industry,\r\n      args.organizer,\r\n      args.lang,\r\n      args.title,\r\n      args.tag,\r\n      args.open,\r\n      args.close,\r\n      args.expire,\r\n      args.stakeTvl,\r\n      args.minStake,\r\n      args.rewardCap,\r\n      args.rewardTvl,\r\n      args.rewardClaim,\r\n      args.minPhrase,\r\n      args.minValidate,\r\n      args.rpuValidator,\r\n      args.rpuGeneral,\r\n      args.rpuSpecific,\r\n      args.rpuCause,\r\n      args.rpuEffect,\r\n      args.majorityQuorum,\r\n      args.utterances,\r\n      args.phraseApproved,\r\n      args.payScale,\r\n      args.timeLimit,\r\n      args.finish,\r\n      args.bump\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link Campaign} from the data of the provided {@link web3.AccountInfo}.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static fromAccountInfo(\r\n    accountInfo: web3.AccountInfo<Buffer>,\r\n    offset = 0\r\n  ): [Campaign, number] {\r\n    return Campaign.deserialize(accountInfo.data, offset)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the account info from the provided address and deserializes\r\n   * the {@link Campaign} from its data.\r\n   *\r\n   * @throws Error if no account info is found at the address or if deserialization fails\r\n   */\r\n  static async fromAccountAddress(\r\n    connection: web3.Connection,\r\n    address: web3.PublicKey,\r\n    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig\r\n  ): Promise<Campaign> {\r\n    const accountInfo = await connection.getAccountInfo(\r\n      address,\r\n      commitmentOrConfig\r\n    )\r\n    if (accountInfo == null) {\r\n      throw new Error(`Unable to find Campaign account at ${address}`)\r\n    }\r\n    return Campaign.fromAccountInfo(accountInfo, 0)[0]\r\n  }\r\n\r\n  /**\r\n   * Provides a {@link web3.Connection.getProgramAccounts} config builder,\r\n   * to fetch accounts matching filters that can be specified via that builder.\r\n   *\r\n   * @param programId - the program that owns the accounts we are filtering\r\n   */\r\n  static gpaBuilder(\r\n    programId: web3.PublicKey = new web3.PublicKey('undefined')\r\n  ) {\r\n    return beetSolana.GpaBuilder.fromStruct(programId, campaignBeet)\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link Campaign} from the provided data Buffer.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static deserialize(buf: Buffer, offset = 0): [Campaign, number] {\r\n    return campaignBeet.deserialize(buf, offset)\r\n  }\r\n\r\n  /**\r\n   * Serializes the {@link Campaign} into a Buffer.\r\n   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.\r\n   */\r\n  serialize(): [Buffer, number] {\r\n    return campaignBeet.serialize({\r\n      accountDiscriminator: campaignDiscriminator,\r\n      ...this,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the byteSize of a {@link Buffer} holding the serialized data of\r\n   * {@link Campaign}\r\n   */\r\n  static get byteSize() {\r\n    return campaignBeet.byteSize\r\n  }\r\n\r\n  /**\r\n   * Fetches the minimum balance needed to exempt an account holding\r\n   * {@link Campaign} data from rent\r\n   *\r\n   * @param connection used to retrieve the rent exemption information\r\n   */\r\n  static async getMinimumBalanceForRentExemption(\r\n    connection: web3.Connection,\r\n    commitment?: web3.Commitment\r\n  ): Promise<number> {\r\n    return connection.getMinimumBalanceForRentExemption(\r\n      Campaign.byteSize,\r\n      commitment\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Determines if the provided {@link Buffer} has the correct byte size to\r\n   * hold {@link Campaign} data.\r\n   */\r\n  static hasCorrectByteSize(buf: Buffer, offset = 0) {\r\n    return buf.byteLength - offset === Campaign.byteSize\r\n  }\r\n\r\n  /**\r\n   * Returns a readable version of {@link Campaign} properties\r\n   * and can be used to convert to JSON and/or logging\r\n   */\r\n  pretty() {\r\n    return {\r\n      architect: this.architect.toBase58(),\r\n      domain: this.domain,\r\n      subject: this.subject,\r\n      industry: this.industry,\r\n      organizer: this.organizer,\r\n      lang: this.lang,\r\n      title: this.title,\r\n      tag: 'Tag.' + Tag[this.tag],\r\n      open: (() => {\r\n        const x = <{ toNumber: () => number }>this.open\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      close: (() => {\r\n        const x = <{ toNumber: () => number }>this.close\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      expire: (() => {\r\n        const x = <{ toNumber: () => number }>this.expire\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      stakeTvl: (() => {\r\n        const x = <{ toNumber: () => number }>this.stakeTvl\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      minStake: (() => {\r\n        const x = <{ toNumber: () => number }>this.minStake\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      rewardCap: (() => {\r\n        const x = <{ toNumber: () => number }>this.rewardCap\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      rewardTvl: (() => {\r\n        const x = <{ toNumber: () => number }>this.rewardTvl\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      rewardClaim: (() => {\r\n        const x = <{ toNumber: () => number }>this.rewardClaim\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      minPhrase: this.minPhrase,\r\n      minValidate: this.minValidate,\r\n      rpuValidator: (() => {\r\n        const x = <{ toNumber: () => number }>this.rpuValidator\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      rpuGeneral: (() => {\r\n        const x = <{ toNumber: () => number }>this.rpuGeneral\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      rpuSpecific: (() => {\r\n        const x = <{ toNumber: () => number }>this.rpuSpecific\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      rpuCause: (() => {\r\n        const x = <{ toNumber: () => number }>this.rpuCause\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      rpuEffect: (() => {\r\n        const x = <{ toNumber: () => number }>this.rpuEffect\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      majorityQuorum: this.majorityQuorum,\r\n      utterances: this.utterances,\r\n      phraseApproved: this.phraseApproved,\r\n      payScale: this.payScale,\r\n      timeLimit: (() => {\r\n        const x = <{ toNumber: () => number }>this.timeLimit\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      finish: this.finish,\r\n      bump: this.bump,\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport const campaignBeet = new beet.BeetStruct<\r\n  Campaign,\r\n  CampaignArgs & {\r\n    accountDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['architect', beetSolana.publicKey],\r\n    ['domain', beet.uniformFixedSizeArray(beet.u8, 64)],\r\n    ['subject', beet.uniformFixedSizeArray(beet.u8, 64)],\r\n    ['industry', beet.uniformFixedSizeArray(beet.u8, 32)],\r\n    ['organizer', beet.uniformFixedSizeArray(beet.u8, 16)],\r\n    ['lang', beet.uniformFixedSizeArray(beet.u8, 16)],\r\n    ['title', beet.uniformFixedSizeArray(beet.u8, 16)],\r\n    ['tag', tagBeet],\r\n    ['open', beet.u64],\r\n    ['close', beet.u64],\r\n    ['expire', beet.u64],\r\n    ['stakeTvl', beet.u64],\r\n    ['minStake', beet.u64],\r\n    ['rewardCap', beet.u64],\r\n    ['rewardTvl', beet.u64],\r\n    ['rewardClaim', beet.u64],\r\n    ['minPhrase', beet.u16],\r\n    ['minValidate', beet.u16],\r\n    ['rpuValidator', beet.u64],\r\n    ['rpuGeneral', beet.u64],\r\n    ['rpuSpecific', beet.u64],\r\n    ['rpuCause', beet.u64],\r\n    ['rpuEffect', beet.u64],\r\n    ['majorityQuorum', beet.u16],\r\n    ['utterances', beet.u16],\r\n    ['phraseApproved', beet.u16],\r\n    ['payScale', beet.u8],\r\n    ['timeLimit', beet.u64],\r\n    ['finish', beet.bool],\r\n    ['bump', beet.u8],\r\n  ],\r\n  Campaign.fromArgs,\r\n  'Campaign'\r\n)\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\n/**\r\n * @category enums\r\n * @category generated\r\n */\r\nexport enum PhraseType {\r\n  General,\r\n  Specific,\r\n  Cause,\r\n  Effect,\r\n}\r\n\r\n/**\r\n * @category userTypes\r\n * @category generated\r\n */\r\nexport const phraseTypeBeet = beet.fixedScalarEnum(\r\n  PhraseType\r\n) as beet.FixedSizeBeet<PhraseType, PhraseType>\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as web3 from '@solana/web3.js'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as beetSolana from '@metaplex-foundation/beet-solana'\r\nimport { AccessMethod, accessMethodBeet } from '../types/AccessMethod'\r\n\r\n/**\r\n * Arguments used to create {@link CampaignActivity}\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport type CampaignActivityArgs = {\r\n  user: web3.PublicKey\r\n  campaign: web3.PublicKey\r\n  kind: AccessMethod\r\n  stakeMint: web3.PublicKey\r\n  stakeAmount: beet.bignum\r\n  stakeStatus: boolean\r\n  unclaimedReward: beet.bignum\r\n  claimedReward: beet.bignum\r\n  numGeneralPhrases: beet.bignum\r\n  numSpecificPhrases: beet.bignum\r\n  numCausePhrases: beet.bignum\r\n  numEffectPhrase: beet.bignum\r\n  bump: number\r\n}\r\n\r\nexport const campaignActivityDiscriminator = [\r\n  202, 201, 143, 59, 254, 148, 87, 12,\r\n]\r\n/**\r\n * Holds the data for the {@link CampaignActivity} Account and provides de/serialization\r\n * functionality for that data\r\n *\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport class CampaignActivity implements CampaignActivityArgs {\r\n  private constructor(\r\n    readonly user: web3.PublicKey,\r\n    readonly campaign: web3.PublicKey,\r\n    readonly kind: AccessMethod,\r\n    readonly stakeMint: web3.PublicKey,\r\n    readonly stakeAmount: beet.bignum,\r\n    readonly stakeStatus: boolean,\r\n    readonly unclaimedReward: beet.bignum,\r\n    readonly claimedReward: beet.bignum,\r\n    readonly numGeneralPhrases: beet.bignum,\r\n    readonly numSpecificPhrases: beet.bignum,\r\n    readonly numCausePhrases: beet.bignum,\r\n    readonly numEffectPhrase: beet.bignum,\r\n    readonly bump: number\r\n  ) {}\r\n\r\n  /**\r\n   * Creates a {@link CampaignActivity} instance from the provided args.\r\n   */\r\n  static fromArgs(args: CampaignActivityArgs) {\r\n    return new CampaignActivity(\r\n      args.user,\r\n      args.campaign,\r\n      args.kind,\r\n      args.stakeMint,\r\n      args.stakeAmount,\r\n      args.stakeStatus,\r\n      args.unclaimedReward,\r\n      args.claimedReward,\r\n      args.numGeneralPhrases,\r\n      args.numSpecificPhrases,\r\n      args.numCausePhrases,\r\n      args.numEffectPhrase,\r\n      args.bump\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link CampaignActivity} from the data of the provided {@link web3.AccountInfo}.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static fromAccountInfo(\r\n    accountInfo: web3.AccountInfo<Buffer>,\r\n    offset = 0\r\n  ): [CampaignActivity, number] {\r\n    return CampaignActivity.deserialize(accountInfo.data, offset)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the account info from the provided address and deserializes\r\n   * the {@link CampaignActivity} from its data.\r\n   *\r\n   * @throws Error if no account info is found at the address or if deserialization fails\r\n   */\r\n  static async fromAccountAddress(\r\n    connection: web3.Connection,\r\n    address: web3.PublicKey,\r\n    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig\r\n  ): Promise<CampaignActivity> {\r\n    const accountInfo = await connection.getAccountInfo(\r\n      address,\r\n      commitmentOrConfig\r\n    )\r\n    if (accountInfo == null) {\r\n      throw new Error(`Unable to find CampaignActivity account at ${address}`)\r\n    }\r\n    return CampaignActivity.fromAccountInfo(accountInfo, 0)[0]\r\n  }\r\n\r\n  /**\r\n   * Provides a {@link web3.Connection.getProgramAccounts} config builder,\r\n   * to fetch accounts matching filters that can be specified via that builder.\r\n   *\r\n   * @param programId - the program that owns the accounts we are filtering\r\n   */\r\n  static gpaBuilder(\r\n    programId: web3.PublicKey = new web3.PublicKey('undefined')\r\n  ) {\r\n    return beetSolana.GpaBuilder.fromStruct(programId, campaignActivityBeet)\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link CampaignActivity} from the provided data Buffer.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static deserialize(buf: Buffer, offset = 0): [CampaignActivity, number] {\r\n    return campaignActivityBeet.deserialize(buf, offset)\r\n  }\r\n\r\n  /**\r\n   * Serializes the {@link CampaignActivity} into a Buffer.\r\n   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.\r\n   */\r\n  serialize(): [Buffer, number] {\r\n    return campaignActivityBeet.serialize({\r\n      accountDiscriminator: campaignActivityDiscriminator,\r\n      ...this,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the byteSize of a {@link Buffer} holding the serialized data of\r\n   * {@link CampaignActivity}\r\n   */\r\n  static get byteSize() {\r\n    return campaignActivityBeet.byteSize\r\n  }\r\n\r\n  /**\r\n   * Fetches the minimum balance needed to exempt an account holding\r\n   * {@link CampaignActivity} data from rent\r\n   *\r\n   * @param connection used to retrieve the rent exemption information\r\n   */\r\n  static async getMinimumBalanceForRentExemption(\r\n    connection: web3.Connection,\r\n    commitment?: web3.Commitment\r\n  ): Promise<number> {\r\n    return connection.getMinimumBalanceForRentExemption(\r\n      CampaignActivity.byteSize,\r\n      commitment\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Determines if the provided {@link Buffer} has the correct byte size to\r\n   * hold {@link CampaignActivity} data.\r\n   */\r\n  static hasCorrectByteSize(buf: Buffer, offset = 0) {\r\n    return buf.byteLength - offset === CampaignActivity.byteSize\r\n  }\r\n\r\n  /**\r\n   * Returns a readable version of {@link CampaignActivity} properties\r\n   * and can be used to convert to JSON and/or logging\r\n   */\r\n  pretty() {\r\n    return {\r\n      user: this.user.toBase58(),\r\n      campaign: this.campaign.toBase58(),\r\n      kind: 'AccessMethod.' + AccessMethod[this.kind],\r\n      stakeMint: this.stakeMint.toBase58(),\r\n      stakeAmount: (() => {\r\n        const x = <{ toNumber: () => number }>this.stakeAmount\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      stakeStatus: this.stakeStatus,\r\n      unclaimedReward: (() => {\r\n        const x = <{ toNumber: () => number }>this.unclaimedReward\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      claimedReward: (() => {\r\n        const x = <{ toNumber: () => number }>this.claimedReward\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      numGeneralPhrases: (() => {\r\n        const x = <{ toNumber: () => number }>this.numGeneralPhrases\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      numSpecificPhrases: (() => {\r\n        const x = <{ toNumber: () => number }>this.numSpecificPhrases\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      numCausePhrases: (() => {\r\n        const x = <{ toNumber: () => number }>this.numCausePhrases\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      numEffectPhrase: (() => {\r\n        const x = <{ toNumber: () => number }>this.numEffectPhrase\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      bump: this.bump,\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport const campaignActivityBeet = new beet.BeetStruct<\r\n  CampaignActivity,\r\n  CampaignActivityArgs & {\r\n    accountDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['user', beetSolana.publicKey],\r\n    ['campaign', beetSolana.publicKey],\r\n    ['kind', accessMethodBeet],\r\n    ['stakeMint', beetSolana.publicKey],\r\n    ['stakeAmount', beet.u64],\r\n    ['stakeStatus', beet.bool],\r\n    ['unclaimedReward', beet.u64],\r\n    ['claimedReward', beet.u64],\r\n    ['numGeneralPhrases', beet.u64],\r\n    ['numSpecificPhrases', beet.u64],\r\n    ['numCausePhrases', beet.u64],\r\n    ['numEffectPhrase', beet.u64],\r\n    ['bump', beet.u8],\r\n  ],\r\n  CampaignActivity.fromArgs,\r\n  'CampaignActivity'\r\n)\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as web3 from '@solana/web3.js'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as beetSolana from '@metaplex-foundation/beet-solana'\r\n\r\n/**\r\n * Arguments used to create {@link CampaignVault}\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport type CampaignVaultArgs = {\r\n  mint: web3.PublicKey\r\n  vault: web3.PublicKey\r\n  architect: web3.PublicKey\r\n  authority: web3.PublicKey\r\n  users: beet.bignum\r\n  open: beet.bignum\r\n  close: beet.bignum\r\n  expire: beet.bignum\r\n  rewardVl: number\r\n  stakeTvl: beet.bignum\r\n  reserve: beet.bignum\r\n  bump: number\r\n}\r\n\r\nexport const campaignVaultDiscriminator = [114, 201, 61, 223, 149, 21, 47, 142]\r\n/**\r\n * Holds the data for the {@link CampaignVault} Account and provides de/serialization\r\n * functionality for that data\r\n *\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport class CampaignVault implements CampaignVaultArgs {\r\n  private constructor(\r\n    readonly mint: web3.PublicKey,\r\n    readonly vault: web3.PublicKey,\r\n    readonly architect: web3.PublicKey,\r\n    readonly authority: web3.PublicKey,\r\n    readonly users: beet.bignum,\r\n    readonly open: beet.bignum,\r\n    readonly close: beet.bignum,\r\n    readonly expire: beet.bignum,\r\n    readonly rewardVl: number,\r\n    readonly stakeTvl: beet.bignum,\r\n    readonly reserve: beet.bignum,\r\n    readonly bump: number\r\n  ) {}\r\n\r\n  /**\r\n   * Creates a {@link CampaignVault} instance from the provided args.\r\n   */\r\n  static fromArgs(args: CampaignVaultArgs) {\r\n    return new CampaignVault(\r\n      args.mint,\r\n      args.vault,\r\n      args.architect,\r\n      args.authority,\r\n      args.users,\r\n      args.open,\r\n      args.close,\r\n      args.expire,\r\n      args.rewardVl,\r\n      args.stakeTvl,\r\n      args.reserve,\r\n      args.bump\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link CampaignVault} from the data of the provided {@link web3.AccountInfo}.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static fromAccountInfo(\r\n    accountInfo: web3.AccountInfo<Buffer>,\r\n    offset = 0\r\n  ): [CampaignVault, number] {\r\n    return CampaignVault.deserialize(accountInfo.data, offset)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the account info from the provided address and deserializes\r\n   * the {@link CampaignVault} from its data.\r\n   *\r\n   * @throws Error if no account info is found at the address or if deserialization fails\r\n   */\r\n  static async fromAccountAddress(\r\n    connection: web3.Connection,\r\n    address: web3.PublicKey,\r\n    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig\r\n  ): Promise<CampaignVault> {\r\n    const accountInfo = await connection.getAccountInfo(\r\n      address,\r\n      commitmentOrConfig\r\n    )\r\n    if (accountInfo == null) {\r\n      throw new Error(`Unable to find CampaignVault account at ${address}`)\r\n    }\r\n    return CampaignVault.fromAccountInfo(accountInfo, 0)[0]\r\n  }\r\n\r\n  /**\r\n   * Provides a {@link web3.Connection.getProgramAccounts} config builder,\r\n   * to fetch accounts matching filters that can be specified via that builder.\r\n   *\r\n   * @param programId - the program that owns the accounts we are filtering\r\n   */\r\n  static gpaBuilder(\r\n    programId: web3.PublicKey = new web3.PublicKey('undefined')\r\n  ) {\r\n    return beetSolana.GpaBuilder.fromStruct(programId, campaignVaultBeet)\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link CampaignVault} from the provided data Buffer.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static deserialize(buf: Buffer, offset = 0): [CampaignVault, number] {\r\n    return campaignVaultBeet.deserialize(buf, offset)\r\n  }\r\n\r\n  /**\r\n   * Serializes the {@link CampaignVault} into a Buffer.\r\n   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.\r\n   */\r\n  serialize(): [Buffer, number] {\r\n    return campaignVaultBeet.serialize({\r\n      accountDiscriminator: campaignVaultDiscriminator,\r\n      ...this,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the byteSize of a {@link Buffer} holding the serialized data of\r\n   * {@link CampaignVault}\r\n   */\r\n  static get byteSize() {\r\n    return campaignVaultBeet.byteSize\r\n  }\r\n\r\n  /**\r\n   * Fetches the minimum balance needed to exempt an account holding\r\n   * {@link CampaignVault} data from rent\r\n   *\r\n   * @param connection used to retrieve the rent exemption information\r\n   */\r\n  static async getMinimumBalanceForRentExemption(\r\n    connection: web3.Connection,\r\n    commitment?: web3.Commitment\r\n  ): Promise<number> {\r\n    return connection.getMinimumBalanceForRentExemption(\r\n      CampaignVault.byteSize,\r\n      commitment\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Determines if the provided {@link Buffer} has the correct byte size to\r\n   * hold {@link CampaignVault} data.\r\n   */\r\n  static hasCorrectByteSize(buf: Buffer, offset = 0) {\r\n    return buf.byteLength - offset === CampaignVault.byteSize\r\n  }\r\n\r\n  /**\r\n   * Returns a readable version of {@link CampaignVault} properties\r\n   * and can be used to convert to JSON and/or logging\r\n   */\r\n  pretty() {\r\n    return {\r\n      mint: this.mint.toBase58(),\r\n      vault: this.vault.toBase58(),\r\n      architect: this.architect.toBase58(),\r\n      authority: this.authority.toBase58(),\r\n      users: (() => {\r\n        const x = <{ toNumber: () => number }>this.users\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      open: (() => {\r\n        const x = <{ toNumber: () => number }>this.open\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      close: (() => {\r\n        const x = <{ toNumber: () => number }>this.close\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      expire: (() => {\r\n        const x = <{ toNumber: () => number }>this.expire\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      rewardVl: this.rewardVl,\r\n      stakeTvl: (() => {\r\n        const x = <{ toNumber: () => number }>this.stakeTvl\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      reserve: (() => {\r\n        const x = <{ toNumber: () => number }>this.reserve\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      bump: this.bump,\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport const campaignVaultBeet = new beet.BeetStruct<\r\n  CampaignVault,\r\n  CampaignVaultArgs & {\r\n    accountDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['mint', beetSolana.publicKey],\r\n    ['vault', beetSolana.publicKey],\r\n    ['architect', beetSolana.publicKey],\r\n    ['authority', beetSolana.publicKey],\r\n    ['users', beet.u64],\r\n    ['open', beet.u64],\r\n    ['close', beet.u64],\r\n    ['expire', beet.u64],\r\n    ['rewardVl', beet.u8],\r\n    ['stakeTvl', beet.u64],\r\n    ['reserve', beet.u64],\r\n    ['bump', beet.u8],\r\n  ],\r\n  CampaignVault.fromArgs,\r\n  'CampaignVault'\r\n)\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as web3 from '@solana/web3.js'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as beetSolana from '@metaplex-foundation/beet-solana'\r\n\r\n/**\r\n * Arguments used to create {@link FarmConfig}\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport type FarmConfigArgs = {\r\n  mint: web3.PublicKey\r\n  nftCreator: web3.PublicKey\r\n  stakingContract: web3.PublicKey\r\n  nftTvl: beet.bignum\r\n  snsTvl: beet.bignum\r\n  authority: web3.PublicKey\r\n  oracle: web3.PublicKey\r\n  snsFeed: web3.PublicKey\r\n  admin: web3.PublicKey\r\n  rpc: web3.PublicKey\r\n  campaigns: beet.bignum\r\n  campaignsTables: web3.PublicKey\r\n  penalty: beet.bignum\r\n  promo: number\r\n  system: number\r\n  padding: number[] /* size: 64 */\r\n  bump: number\r\n}\r\n\r\nexport const farmConfigDiscriminator = [238, 176, 220, 164, 239, 135, 11, 78]\r\n/**\r\n * Holds the data for the {@link FarmConfig} Account and provides de/serialization\r\n * functionality for that data\r\n *\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport class FarmConfig implements FarmConfigArgs {\r\n  private constructor(\r\n    readonly mint: web3.PublicKey,\r\n    readonly nftCreator: web3.PublicKey,\r\n    readonly stakingContract: web3.PublicKey,\r\n    readonly nftTvl: beet.bignum,\r\n    readonly snsTvl: beet.bignum,\r\n    readonly authority: web3.PublicKey,\r\n    readonly oracle: web3.PublicKey,\r\n    readonly snsFeed: web3.PublicKey,\r\n    readonly admin: web3.PublicKey,\r\n    readonly rpc: web3.PublicKey,\r\n    readonly campaigns: beet.bignum,\r\n    readonly campaignsTables: web3.PublicKey,\r\n    readonly penalty: beet.bignum,\r\n    readonly promo: number,\r\n    readonly system: number,\r\n    readonly padding: number[] /* size: 64 */,\r\n    readonly bump: number\r\n  ) {}\r\n\r\n  /**\r\n   * Creates a {@link FarmConfig} instance from the provided args.\r\n   */\r\n  static fromArgs(args: FarmConfigArgs) {\r\n    return new FarmConfig(\r\n      args.mint,\r\n      args.nftCreator,\r\n      args.stakingContract,\r\n      args.nftTvl,\r\n      args.snsTvl,\r\n      args.authority,\r\n      args.oracle,\r\n      args.snsFeed,\r\n      args.admin,\r\n      args.rpc,\r\n      args.campaigns,\r\n      args.campaignsTables,\r\n      args.penalty,\r\n      args.promo,\r\n      args.system,\r\n      args.padding,\r\n      args.bump\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link FarmConfig} from the data of the provided {@link web3.AccountInfo}.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static fromAccountInfo(\r\n    accountInfo: web3.AccountInfo<Buffer>,\r\n    offset = 0\r\n  ): [FarmConfig, number] {\r\n    return FarmConfig.deserialize(accountInfo.data, offset)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the account info from the provided address and deserializes\r\n   * the {@link FarmConfig} from its data.\r\n   *\r\n   * @throws Error if no account info is found at the address or if deserialization fails\r\n   */\r\n  static async fromAccountAddress(\r\n    connection: web3.Connection,\r\n    address: web3.PublicKey,\r\n    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig\r\n  ): Promise<FarmConfig> {\r\n    const accountInfo = await connection.getAccountInfo(\r\n      address,\r\n      commitmentOrConfig\r\n    )\r\n    if (accountInfo == null) {\r\n      throw new Error(`Unable to find FarmConfig account at ${address}`)\r\n    }\r\n    return FarmConfig.fromAccountInfo(accountInfo, 0)[0]\r\n  }\r\n\r\n  /**\r\n   * Provides a {@link web3.Connection.getProgramAccounts} config builder,\r\n   * to fetch accounts matching filters that can be specified via that builder.\r\n   *\r\n   * @param programId - the program that owns the accounts we are filtering\r\n   */\r\n  static gpaBuilder(\r\n    programId: web3.PublicKey = new web3.PublicKey('undefined')\r\n  ) {\r\n    return beetSolana.GpaBuilder.fromStruct(programId, farmConfigBeet)\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link FarmConfig} from the provided data Buffer.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static deserialize(buf: Buffer, offset = 0): [FarmConfig, number] {\r\n    return farmConfigBeet.deserialize(buf, offset)\r\n  }\r\n\r\n  /**\r\n   * Serializes the {@link FarmConfig} into a Buffer.\r\n   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.\r\n   */\r\n  serialize(): [Buffer, number] {\r\n    return farmConfigBeet.serialize({\r\n      accountDiscriminator: farmConfigDiscriminator,\r\n      ...this,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the byteSize of a {@link Buffer} holding the serialized data of\r\n   * {@link FarmConfig}\r\n   */\r\n  static get byteSize() {\r\n    return farmConfigBeet.byteSize\r\n  }\r\n\r\n  /**\r\n   * Fetches the minimum balance needed to exempt an account holding\r\n   * {@link FarmConfig} data from rent\r\n   *\r\n   * @param connection used to retrieve the rent exemption information\r\n   */\r\n  static async getMinimumBalanceForRentExemption(\r\n    connection: web3.Connection,\r\n    commitment?: web3.Commitment\r\n  ): Promise<number> {\r\n    return connection.getMinimumBalanceForRentExemption(\r\n      FarmConfig.byteSize,\r\n      commitment\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Determines if the provided {@link Buffer} has the correct byte size to\r\n   * hold {@link FarmConfig} data.\r\n   */\r\n  static hasCorrectByteSize(buf: Buffer, offset = 0) {\r\n    return buf.byteLength - offset === FarmConfig.byteSize\r\n  }\r\n\r\n  /**\r\n   * Returns a readable version of {@link FarmConfig} properties\r\n   * and can be used to convert to JSON and/or logging\r\n   */\r\n  pretty() {\r\n    return {\r\n      mint: this.mint.toBase58(),\r\n      nftCreator: this.nftCreator.toBase58(),\r\n      stakingContract: this.stakingContract.toBase58(),\r\n      nftTvl: (() => {\r\n        const x = <{ toNumber: () => number }>this.nftTvl\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      snsTvl: (() => {\r\n        const x = <{ toNumber: () => number }>this.snsTvl\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      authority: this.authority.toBase58(),\r\n      oracle: this.oracle.toBase58(),\r\n      snsFeed: this.snsFeed.toBase58(),\r\n      admin: this.admin.toBase58(),\r\n      rpc: this.rpc.toBase58(),\r\n      campaigns: (() => {\r\n        const x = <{ toNumber: () => number }>this.campaigns\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      campaignsTables: this.campaignsTables.toBase58(),\r\n      penalty: (() => {\r\n        const x = <{ toNumber: () => number }>this.penalty\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      promo: this.promo,\r\n      system: this.system,\r\n      padding: this.padding,\r\n      bump: this.bump,\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport const farmConfigBeet = new beet.BeetStruct<\r\n  FarmConfig,\r\n  FarmConfigArgs & {\r\n    accountDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['mint', beetSolana.publicKey],\r\n    ['nftCreator', beetSolana.publicKey],\r\n    ['stakingContract', beetSolana.publicKey],\r\n    ['nftTvl', beet.u64],\r\n    ['snsTvl', beet.u64],\r\n    ['authority', beetSolana.publicKey],\r\n    ['oracle', beetSolana.publicKey],\r\n    ['snsFeed', beetSolana.publicKey],\r\n    ['admin', beetSolana.publicKey],\r\n    ['rpc', beetSolana.publicKey],\r\n    ['campaigns', beet.u64],\r\n    ['campaignsTables', beetSolana.publicKey],\r\n    ['penalty', beet.u64],\r\n    ['promo', beet.u8],\r\n    ['system', beet.u8],\r\n    ['padding', beet.uniformFixedSizeArray(beet.u8, 64)],\r\n    ['bump', beet.u8],\r\n  ],\r\n  FarmConfig.fromArgs,\r\n  'FarmConfig'\r\n)\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as web3 from '@solana/web3.js'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as beetSolana from '@metaplex-foundation/beet-solana'\r\n\r\n/**\r\n * Arguments used to create {@link Feed}\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport type FeedArgs = {\r\n  name: string\r\n  authority: web3.PublicKey\r\n  aggregator: web3.PublicKey\r\n  price: beet.bignum\r\n  lastUpdate: beet.bignum\r\n  padding: number[] /* size: 64 */\r\n  bump: number\r\n}\r\n\r\nexport const feedDiscriminator = [69, 191, 16, 227, 132, 187, 84, 227]\r\n/**\r\n * Holds the data for the {@link Feed} Account and provides de/serialization\r\n * functionality for that data\r\n *\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport class Feed implements FeedArgs {\r\n  private constructor(\r\n    readonly name: string,\r\n    readonly authority: web3.PublicKey,\r\n    readonly aggregator: web3.PublicKey,\r\n    readonly price: beet.bignum,\r\n    readonly lastUpdate: beet.bignum,\r\n    readonly padding: number[] /* size: 64 */,\r\n    readonly bump: number\r\n  ) {}\r\n\r\n  /**\r\n   * Creates a {@link Feed} instance from the provided args.\r\n   */\r\n  static fromArgs(args: FeedArgs) {\r\n    return new Feed(\r\n      args.name,\r\n      args.authority,\r\n      args.aggregator,\r\n      args.price,\r\n      args.lastUpdate,\r\n      args.padding,\r\n      args.bump\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link Feed} from the data of the provided {@link web3.AccountInfo}.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static fromAccountInfo(\r\n    accountInfo: web3.AccountInfo<Buffer>,\r\n    offset = 0\r\n  ): [Feed, number] {\r\n    return Feed.deserialize(accountInfo.data, offset)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the account info from the provided address and deserializes\r\n   * the {@link Feed} from its data.\r\n   *\r\n   * @throws Error if no account info is found at the address or if deserialization fails\r\n   */\r\n  static async fromAccountAddress(\r\n    connection: web3.Connection,\r\n    address: web3.PublicKey,\r\n    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig\r\n  ): Promise<Feed> {\r\n    const accountInfo = await connection.getAccountInfo(\r\n      address,\r\n      commitmentOrConfig\r\n    )\r\n    if (accountInfo == null) {\r\n      throw new Error(`Unable to find Feed account at ${address}`)\r\n    }\r\n    return Feed.fromAccountInfo(accountInfo, 0)[0]\r\n  }\r\n\r\n  /**\r\n   * Provides a {@link web3.Connection.getProgramAccounts} config builder,\r\n   * to fetch accounts matching filters that can be specified via that builder.\r\n   *\r\n   * @param programId - the program that owns the accounts we are filtering\r\n   */\r\n  static gpaBuilder(\r\n    programId: web3.PublicKey = new web3.PublicKey('undefined')\r\n  ) {\r\n    return beetSolana.GpaBuilder.fromStruct(programId, feedBeet)\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link Feed} from the provided data Buffer.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static deserialize(buf: Buffer, offset = 0): [Feed, number] {\r\n    return feedBeet.deserialize(buf, offset)\r\n  }\r\n\r\n  /**\r\n   * Serializes the {@link Feed} into a Buffer.\r\n   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.\r\n   */\r\n  serialize(): [Buffer, number] {\r\n    return feedBeet.serialize({\r\n      accountDiscriminator: feedDiscriminator,\r\n      ...this,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the byteSize of a {@link Buffer} holding the serialized data of\r\n   * {@link Feed} for the provided args.\r\n   *\r\n   * @param args need to be provided since the byte size for this account\r\n   * depends on them\r\n   */\r\n  static byteSize(args: FeedArgs) {\r\n    const instance = Feed.fromArgs(args)\r\n    return feedBeet.toFixedFromValue({\r\n      accountDiscriminator: feedDiscriminator,\r\n      ...instance,\r\n    }).byteSize\r\n  }\r\n\r\n  /**\r\n   * Fetches the minimum balance needed to exempt an account holding\r\n   * {@link Feed} data from rent\r\n   *\r\n   * @param args need to be provided since the byte size for this account\r\n   * depends on them\r\n   * @param connection used to retrieve the rent exemption information\r\n   */\r\n  static async getMinimumBalanceForRentExemption(\r\n    args: FeedArgs,\r\n    connection: web3.Connection,\r\n    commitment?: web3.Commitment\r\n  ): Promise<number> {\r\n    return connection.getMinimumBalanceForRentExemption(\r\n      Feed.byteSize(args),\r\n      commitment\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Returns a readable version of {@link Feed} properties\r\n   * and can be used to convert to JSON and/or logging\r\n   */\r\n  pretty() {\r\n    return {\r\n      name: this.name,\r\n      authority: this.authority.toBase58(),\r\n      aggregator: this.aggregator.toBase58(),\r\n      price: (() => {\r\n        const x = <{ toNumber: () => number }>this.price\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      lastUpdate: (() => {\r\n        const x = <{ toNumber: () => number }>this.lastUpdate\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      padding: this.padding,\r\n      bump: this.bump,\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport const feedBeet = new beet.FixableBeetStruct<\r\n  Feed,\r\n  FeedArgs & {\r\n    accountDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['name', beet.utf8String],\r\n    ['authority', beetSolana.publicKey],\r\n    ['aggregator', beetSolana.publicKey],\r\n    ['price', beet.u64],\r\n    ['lastUpdate', beet.u64],\r\n    ['padding', beet.uniformFixedSizeArray(beet.u8, 64)],\r\n    ['bump', beet.u8],\r\n  ],\r\n  Feed.fromArgs,\r\n  'Feed'\r\n)\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as web3 from '@solana/web3.js'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as beetSolana from '@metaplex-foundation/beet-solana'\r\n\r\n/**\r\n * Arguments used to create {@link Guild}\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport type GuildArgs = {\r\n  title: number[] /* size: 32 */\r\n  nftTable: web3.PublicKey\r\n  scholarTable: web3.PublicKey\r\n  owner: web3.PublicKey\r\n  ownerShare: number\r\n  master: beet.COption<web3.PublicKey>\r\n  masterShare: beet.COption<number>\r\n  scholarSlot: beet.bignum\r\n  nftSlot: beet.bignum\r\n  status: boolean\r\n}\r\n\r\nexport const guildDiscriminator = [74, 176, 57, 164, 195, 188, 156, 237]\r\n/**\r\n * Holds the data for the {@link Guild} Account and provides de/serialization\r\n * functionality for that data\r\n *\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport class Guild implements GuildArgs {\r\n  private constructor(\r\n    readonly title: number[] /* size: 32 */,\r\n    readonly nftTable: web3.PublicKey,\r\n    readonly scholarTable: web3.PublicKey,\r\n    readonly owner: web3.PublicKey,\r\n    readonly ownerShare: number,\r\n    readonly master: beet.COption<web3.PublicKey>,\r\n    readonly masterShare: beet.COption<number>,\r\n    readonly scholarSlot: beet.bignum,\r\n    readonly nftSlot: beet.bignum,\r\n    readonly status: boolean\r\n  ) {}\r\n\r\n  /**\r\n   * Creates a {@link Guild} instance from the provided args.\r\n   */\r\n  static fromArgs(args: GuildArgs) {\r\n    return new Guild(\r\n      args.title,\r\n      args.nftTable,\r\n      args.scholarTable,\r\n      args.owner,\r\n      args.ownerShare,\r\n      args.master,\r\n      args.masterShare,\r\n      args.scholarSlot,\r\n      args.nftSlot,\r\n      args.status\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link Guild} from the data of the provided {@link web3.AccountInfo}.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static fromAccountInfo(\r\n    accountInfo: web3.AccountInfo<Buffer>,\r\n    offset = 0\r\n  ): [Guild, number] {\r\n    return Guild.deserialize(accountInfo.data, offset)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the account info from the provided address and deserializes\r\n   * the {@link Guild} from its data.\r\n   *\r\n   * @throws Error if no account info is found at the address or if deserialization fails\r\n   */\r\n  static async fromAccountAddress(\r\n    connection: web3.Connection,\r\n    address: web3.PublicKey,\r\n    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig\r\n  ): Promise<Guild> {\r\n    const accountInfo = await connection.getAccountInfo(\r\n      address,\r\n      commitmentOrConfig\r\n    )\r\n    if (accountInfo == null) {\r\n      throw new Error(`Unable to find Guild account at ${address}`)\r\n    }\r\n    return Guild.fromAccountInfo(accountInfo, 0)[0]\r\n  }\r\n\r\n  /**\r\n   * Provides a {@link web3.Connection.getProgramAccounts} config builder,\r\n   * to fetch accounts matching filters that can be specified via that builder.\r\n   *\r\n   * @param programId - the program that owns the accounts we are filtering\r\n   */\r\n  static gpaBuilder(\r\n    programId: web3.PublicKey = new web3.PublicKey('undefined')\r\n  ) {\r\n    return beetSolana.GpaBuilder.fromStruct(programId, guildBeet)\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link Guild} from the provided data Buffer.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static deserialize(buf: Buffer, offset = 0): [Guild, number] {\r\n    return guildBeet.deserialize(buf, offset)\r\n  }\r\n\r\n  /**\r\n   * Serializes the {@link Guild} into a Buffer.\r\n   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.\r\n   */\r\n  serialize(): [Buffer, number] {\r\n    return guildBeet.serialize({\r\n      accountDiscriminator: guildDiscriminator,\r\n      ...this,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the byteSize of a {@link Buffer} holding the serialized data of\r\n   * {@link Guild} for the provided args.\r\n   *\r\n   * @param args need to be provided since the byte size for this account\r\n   * depends on them\r\n   */\r\n  static byteSize(args: GuildArgs) {\r\n    const instance = Guild.fromArgs(args)\r\n    return guildBeet.toFixedFromValue({\r\n      accountDiscriminator: guildDiscriminator,\r\n      ...instance,\r\n    }).byteSize\r\n  }\r\n\r\n  /**\r\n   * Fetches the minimum balance needed to exempt an account holding\r\n   * {@link Guild} data from rent\r\n   *\r\n   * @param args need to be provided since the byte size for this account\r\n   * depends on them\r\n   * @param connection used to retrieve the rent exemption information\r\n   */\r\n  static async getMinimumBalanceForRentExemption(\r\n    args: GuildArgs,\r\n    connection: web3.Connection,\r\n    commitment?: web3.Commitment\r\n  ): Promise<number> {\r\n    return connection.getMinimumBalanceForRentExemption(\r\n      Guild.byteSize(args),\r\n      commitment\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Returns a readable version of {@link Guild} properties\r\n   * and can be used to convert to JSON and/or logging\r\n   */\r\n  pretty() {\r\n    return {\r\n      title: this.title,\r\n      nftTable: this.nftTable.toBase58(),\r\n      scholarTable: this.scholarTable.toBase58(),\r\n      owner: this.owner.toBase58(),\r\n      ownerShare: this.ownerShare,\r\n      master: this.master,\r\n      masterShare: this.masterShare,\r\n      scholarSlot: (() => {\r\n        const x = <{ toNumber: () => number }>this.scholarSlot\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      nftSlot: (() => {\r\n        const x = <{ toNumber: () => number }>this.nftSlot\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      status: this.status,\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport const guildBeet = new beet.FixableBeetStruct<\r\n  Guild,\r\n  GuildArgs & {\r\n    accountDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['title', beet.uniformFixedSizeArray(beet.u8, 32)],\r\n    ['nftTable', beetSolana.publicKey],\r\n    ['scholarTable', beetSolana.publicKey],\r\n    ['owner', beetSolana.publicKey],\r\n    ['ownerShare', beet.u8],\r\n    ['master', beet.coption(beetSolana.publicKey)],\r\n    ['masterShare', beet.coption(beet.u8)],\r\n    ['scholarSlot', beet.u64],\r\n    ['nftSlot', beet.u64],\r\n    ['status', beet.bool],\r\n  ],\r\n  Guild.fromArgs,\r\n  'Guild'\r\n)\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\n/**\r\n * @category enums\r\n * @category generated\r\n */\r\nexport enum Offchain {\r\n  Synesis,\r\n  IPFS,\r\n  Arweave,\r\n  S3,\r\n}\r\n\r\n/**\r\n * @category userTypes\r\n * @category generated\r\n */\r\nexport const offchainBeet = beet.fixedScalarEnum(\r\n  Offchain\r\n) as beet.FixedSizeBeet<Offchain, Offchain>\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\n/**\r\n * @category enums\r\n * @category generated\r\n */\r\nexport enum Role {\r\n  User,\r\n  Architect,\r\n  Builder,\r\n  Validator,\r\n}\r\n\r\n/**\r\n * @category userTypes\r\n * @category generated\r\n */\r\nexport const roleBeet = beet.fixedScalarEnum(Role) as beet.FixedSizeBeet<\r\n  Role,\r\n  Role\r\n>\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as web3 from '@solana/web3.js'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as beetSolana from '@metaplex-foundation/beet-solana'\r\nimport { PhraseType, phraseTypeBeet } from '../types/PhraseType'\r\nimport { Offchain, offchainBeet } from '../types/Offchain'\r\n\r\n/**\r\n * Arguments used to create {@link Phrase}\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport type PhraseArgs = {\r\n  campaign: web3.PublicKey\r\n  builder: web3.PublicKey\r\n  rentOwner: web3.PublicKey\r\n  kind: PhraseType\r\n  timestamp: beet.bignum\r\n  head: number\r\n  lastIndex: number\r\n  offchainUri: number[] /* size: 64 */\r\n  offchainType: Offchain\r\n  correct: number\r\n  incorrect: number\r\n  isValid: boolean\r\n  finish: boolean\r\n  bump: number\r\n}\r\n\r\nexport const phraseDiscriminator = [229, 151, 148, 17, 77, 215, 48, 169]\r\n/**\r\n * Holds the data for the {@link Phrase} Account and provides de/serialization\r\n * functionality for that data\r\n *\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport class Phrase implements PhraseArgs {\r\n  private constructor(\r\n    readonly campaign: web3.PublicKey,\r\n    readonly builder: web3.PublicKey,\r\n    readonly rentOwner: web3.PublicKey,\r\n    readonly kind: PhraseType,\r\n    readonly timestamp: beet.bignum,\r\n    readonly head: number,\r\n    readonly lastIndex: number,\r\n    readonly offchainUri: number[] /* size: 64 */,\r\n    readonly offchainType: Offchain,\r\n    readonly correct: number,\r\n    readonly incorrect: number,\r\n    readonly isValid: boolean,\r\n    readonly finish: boolean,\r\n    readonly bump: number\r\n  ) {}\r\n\r\n  /**\r\n   * Creates a {@link Phrase} instance from the provided args.\r\n   */\r\n  static fromArgs(args: PhraseArgs) {\r\n    return new Phrase(\r\n      args.campaign,\r\n      args.builder,\r\n      args.rentOwner,\r\n      args.kind,\r\n      args.timestamp,\r\n      args.head,\r\n      args.lastIndex,\r\n      args.offchainUri,\r\n      args.offchainType,\r\n      args.correct,\r\n      args.incorrect,\r\n      args.isValid,\r\n      args.finish,\r\n      args.bump\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link Phrase} from the data of the provided {@link web3.AccountInfo}.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static fromAccountInfo(\r\n    accountInfo: web3.AccountInfo<Buffer>,\r\n    offset = 0\r\n  ): [Phrase, number] {\r\n    return Phrase.deserialize(accountInfo.data, offset)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the account info from the provided address and deserializes\r\n   * the {@link Phrase} from its data.\r\n   *\r\n   * @throws Error if no account info is found at the address or if deserialization fails\r\n   */\r\n  static async fromAccountAddress(\r\n    connection: web3.Connection,\r\n    address: web3.PublicKey,\r\n    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig\r\n  ): Promise<Phrase> {\r\n    const accountInfo = await connection.getAccountInfo(\r\n      address,\r\n      commitmentOrConfig\r\n    )\r\n    if (accountInfo == null) {\r\n      throw new Error(`Unable to find Phrase account at ${address}`)\r\n    }\r\n    return Phrase.fromAccountInfo(accountInfo, 0)[0]\r\n  }\r\n\r\n  /**\r\n   * Provides a {@link web3.Connection.getProgramAccounts} config builder,\r\n   * to fetch accounts matching filters that can be specified via that builder.\r\n   *\r\n   * @param programId - the program that owns the accounts we are filtering\r\n   */\r\n  static gpaBuilder(\r\n    programId: web3.PublicKey = new web3.PublicKey('undefined')\r\n  ) {\r\n    return beetSolana.GpaBuilder.fromStruct(programId, phraseBeet)\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link Phrase} from the provided data Buffer.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static deserialize(buf: Buffer, offset = 0): [Phrase, number] {\r\n    return phraseBeet.deserialize(buf, offset)\r\n  }\r\n\r\n  /**\r\n   * Serializes the {@link Phrase} into a Buffer.\r\n   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.\r\n   */\r\n  serialize(): [Buffer, number] {\r\n    return phraseBeet.serialize({\r\n      accountDiscriminator: phraseDiscriminator,\r\n      ...this,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the byteSize of a {@link Buffer} holding the serialized data of\r\n   * {@link Phrase}\r\n   */\r\n  static get byteSize() {\r\n    return phraseBeet.byteSize\r\n  }\r\n\r\n  /**\r\n   * Fetches the minimum balance needed to exempt an account holding\r\n   * {@link Phrase} data from rent\r\n   *\r\n   * @param connection used to retrieve the rent exemption information\r\n   */\r\n  static async getMinimumBalanceForRentExemption(\r\n    connection: web3.Connection,\r\n    commitment?: web3.Commitment\r\n  ): Promise<number> {\r\n    return connection.getMinimumBalanceForRentExemption(\r\n      Phrase.byteSize,\r\n      commitment\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Determines if the provided {@link Buffer} has the correct byte size to\r\n   * hold {@link Phrase} data.\r\n   */\r\n  static hasCorrectByteSize(buf: Buffer, offset = 0) {\r\n    return buf.byteLength - offset === Phrase.byteSize\r\n  }\r\n\r\n  /**\r\n   * Returns a readable version of {@link Phrase} properties\r\n   * and can be used to convert to JSON and/or logging\r\n   */\r\n  pretty() {\r\n    return {\r\n      campaign: this.campaign.toBase58(),\r\n      builder: this.builder.toBase58(),\r\n      rentOwner: this.rentOwner.toBase58(),\r\n      kind: 'PhraseType.' + PhraseType[this.kind],\r\n      timestamp: (() => {\r\n        const x = <{ toNumber: () => number }>this.timestamp\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      head: this.head,\r\n      lastIndex: this.lastIndex,\r\n      offchainUri: this.offchainUri,\r\n      offchainType: 'Offchain.' + Offchain[this.offchainType],\r\n      correct: this.correct,\r\n      incorrect: this.incorrect,\r\n      isValid: this.isValid,\r\n      finish: this.finish,\r\n      bump: this.bump,\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport const phraseBeet = new beet.BeetStruct<\r\n  Phrase,\r\n  PhraseArgs & {\r\n    accountDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['campaign', beetSolana.publicKey],\r\n    ['builder', beetSolana.publicKey],\r\n    ['rentOwner', beetSolana.publicKey],\r\n    ['kind', phraseTypeBeet],\r\n    ['timestamp', beet.u64],\r\n    ['head', beet.u16],\r\n    ['lastIndex', beet.u16],\r\n    ['offchainUri', beet.uniformFixedSizeArray(beet.u8, 64)],\r\n    ['offchainType', offchainBeet],\r\n    ['correct', beet.u16],\r\n    ['incorrect', beet.u16],\r\n    ['isValid', beet.bool],\r\n    ['finish', beet.bool],\r\n    ['bump', beet.u8],\r\n  ],\r\n  Phrase.fromArgs,\r\n  'Phrase'\r\n)\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\n/**\r\n * @category enums\r\n * @category generated\r\n */\r\nexport enum StakingType {\r\n  SNS,\r\n  NFT,\r\n  Both,\r\n}\r\n\r\n/**\r\n * @category userTypes\r\n * @category generated\r\n */\r\nexport const stakingTypeBeet = beet.fixedScalarEnum(\r\n  StakingType\r\n) as beet.FixedSizeBeet<StakingType, StakingType>\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as web3 from '@solana/web3.js'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as beetSolana from '@metaplex-foundation/beet-solana'\r\nimport { AccessMethod, accessMethodBeet } from '../types/AccessMethod'\r\nimport { Role, roleBeet } from '../types/Role'\r\n\r\n/**\r\n * Arguments used to create {@link Profile}\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport type ProfileArgs = {\r\n  user: web3.PublicKey\r\n  kind: AccessMethod\r\n  nftStaked: boolean\r\n  nftMint: web3.PublicKey\r\n  scholarAccess: boolean\r\n  scholarSign: boolean\r\n  nftOwner: web3.PublicKey\r\n  nftOwnerShare: number\r\n  nftGuild: web3.PublicKey\r\n  nftGuildMaster: beet.COption<web3.PublicKey>\r\n  nftGuildShare: beet.COption<number>\r\n  role: Role\r\n  durability: number\r\n  productivity: number\r\n  performance: number\r\n  activity: number\r\n  reject: number\r\n  accept: number\r\n  rewardF2p: beet.bignum\r\n  offchainPermit: boolean\r\n  offchainSigner: web3.PublicKey\r\n  bump: number\r\n}\r\n\r\nexport const profileDiscriminator = [184, 101, 165, 188, 95, 63, 127, 188]\r\n/**\r\n * Holds the data for the {@link Profile} Account and provides de/serialization\r\n * functionality for that data\r\n *\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport class Profile implements ProfileArgs {\r\n  private constructor(\r\n    readonly user: web3.PublicKey,\r\n    readonly kind: AccessMethod,\r\n    readonly nftStaked: boolean,\r\n    readonly nftMint: web3.PublicKey,\r\n    readonly scholarAccess: boolean,\r\n    readonly scholarSign: boolean,\r\n    readonly nftOwner: web3.PublicKey,\r\n    readonly nftOwnerShare: number,\r\n    readonly nftGuild: web3.PublicKey,\r\n    readonly nftGuildMaster: beet.COption<web3.PublicKey>,\r\n    readonly nftGuildShare: beet.COption<number>,\r\n    readonly role: Role,\r\n    readonly durability: number,\r\n    readonly productivity: number,\r\n    readonly performance: number,\r\n    readonly activity: number,\r\n    readonly reject: number,\r\n    readonly accept: number,\r\n    readonly rewardF2p: beet.bignum,\r\n    readonly offchainPermit: boolean,\r\n    readonly offchainSigner: web3.PublicKey,\r\n    readonly bump: number\r\n  ) {}\r\n\r\n  /**\r\n   * Creates a {@link Profile} instance from the provided args.\r\n   */\r\n  static fromArgs(args: ProfileArgs) {\r\n    return new Profile(\r\n      args.user,\r\n      args.kind,\r\n      args.nftStaked,\r\n      args.nftMint,\r\n      args.scholarAccess,\r\n      args.scholarSign,\r\n      args.nftOwner,\r\n      args.nftOwnerShare,\r\n      args.nftGuild,\r\n      args.nftGuildMaster,\r\n      args.nftGuildShare,\r\n      args.role,\r\n      args.durability,\r\n      args.productivity,\r\n      args.performance,\r\n      args.activity,\r\n      args.reject,\r\n      args.accept,\r\n      args.rewardF2p,\r\n      args.offchainPermit,\r\n      args.offchainSigner,\r\n      args.bump\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link Profile} from the data of the provided {@link web3.AccountInfo}.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static fromAccountInfo(\r\n    accountInfo: web3.AccountInfo<Buffer>,\r\n    offset = 0\r\n  ): [Profile, number] {\r\n    return Profile.deserialize(accountInfo.data, offset)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the account info from the provided address and deserializes\r\n   * the {@link Profile} from its data.\r\n   *\r\n   * @throws Error if no account info is found at the address or if deserialization fails\r\n   */\r\n  static async fromAccountAddress(\r\n    connection: web3.Connection,\r\n    address: web3.PublicKey,\r\n    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig\r\n  ): Promise<Profile> {\r\n    const accountInfo = await connection.getAccountInfo(\r\n      address,\r\n      commitmentOrConfig\r\n    )\r\n    if (accountInfo == null) {\r\n      throw new Error(`Unable to find Profile account at ${address}`)\r\n    }\r\n    return Profile.fromAccountInfo(accountInfo, 0)[0]\r\n  }\r\n\r\n  /**\r\n   * Provides a {@link web3.Connection.getProgramAccounts} config builder,\r\n   * to fetch accounts matching filters that can be specified via that builder.\r\n   *\r\n   * @param programId - the program that owns the accounts we are filtering\r\n   */\r\n  static gpaBuilder(\r\n    programId: web3.PublicKey = new web3.PublicKey('undefined')\r\n  ) {\r\n    return beetSolana.GpaBuilder.fromStruct(programId, profileBeet)\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link Profile} from the provided data Buffer.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static deserialize(buf: Buffer, offset = 0): [Profile, number] {\r\n    return profileBeet.deserialize(buf, offset)\r\n  }\r\n\r\n  /**\r\n   * Serializes the {@link Profile} into a Buffer.\r\n   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.\r\n   */\r\n  serialize(): [Buffer, number] {\r\n    return profileBeet.serialize({\r\n      accountDiscriminator: profileDiscriminator,\r\n      ...this,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the byteSize of a {@link Buffer} holding the serialized data of\r\n   * {@link Profile} for the provided args.\r\n   *\r\n   * @param args need to be provided since the byte size for this account\r\n   * depends on them\r\n   */\r\n  static byteSize(args: ProfileArgs) {\r\n    const instance = Profile.fromArgs(args)\r\n    return profileBeet.toFixedFromValue({\r\n      accountDiscriminator: profileDiscriminator,\r\n      ...instance,\r\n    }).byteSize\r\n  }\r\n\r\n  /**\r\n   * Fetches the minimum balance needed to exempt an account holding\r\n   * {@link Profile} data from rent\r\n   *\r\n   * @param args need to be provided since the byte size for this account\r\n   * depends on them\r\n   * @param connection used to retrieve the rent exemption information\r\n   */\r\n  static async getMinimumBalanceForRentExemption(\r\n    args: ProfileArgs,\r\n    connection: web3.Connection,\r\n    commitment?: web3.Commitment\r\n  ): Promise<number> {\r\n    return connection.getMinimumBalanceForRentExemption(\r\n      Profile.byteSize(args),\r\n      commitment\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Returns a readable version of {@link Profile} properties\r\n   * and can be used to convert to JSON and/or logging\r\n   */\r\n  pretty() {\r\n    return {\r\n      user: this.user.toBase58(),\r\n      kind: 'AccessMethod.' + AccessMethod[this.kind],\r\n      nftStaked: this.nftStaked,\r\n      nftMint: this.nftMint.toBase58(),\r\n      scholarAccess: this.scholarAccess,\r\n      scholarSign: this.scholarSign,\r\n      nftOwner: this.nftOwner.toBase58(),\r\n      nftOwnerShare: this.nftOwnerShare,\r\n      nftGuild: this.nftGuild.toBase58(),\r\n      nftGuildMaster: this.nftGuildMaster,\r\n      nftGuildShare: this.nftGuildShare,\r\n      role: 'Role.' + Role[this.role],\r\n      durability: this.durability,\r\n      productivity: this.productivity,\r\n      performance: this.performance,\r\n      activity: this.activity,\r\n      reject: this.reject,\r\n      accept: this.accept,\r\n      rewardF2p: (() => {\r\n        const x = <{ toNumber: () => number }>this.rewardF2p\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      offchainPermit: this.offchainPermit,\r\n      offchainSigner: this.offchainSigner.toBase58(),\r\n      bump: this.bump,\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport const profileBeet = new beet.FixableBeetStruct<\r\n  Profile,\r\n  ProfileArgs & {\r\n    accountDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['user', beetSolana.publicKey],\r\n    ['kind', accessMethodBeet],\r\n    ['nftStaked', beet.bool],\r\n    ['nftMint', beetSolana.publicKey],\r\n    ['scholarAccess', beet.bool],\r\n    ['scholarSign', beet.bool],\r\n    ['nftOwner', beetSolana.publicKey],\r\n    ['nftOwnerShare', beet.u8],\r\n    ['nftGuild', beetSolana.publicKey],\r\n    ['nftGuildMaster', beet.coption(beetSolana.publicKey)],\r\n    ['nftGuildShare', beet.coption(beet.u8)],\r\n    ['role', roleBeet],\r\n    ['durability', beet.u8],\r\n    ['productivity', beet.u8],\r\n    ['performance', beet.u8],\r\n    ['activity', beet.u32],\r\n    ['reject', beet.u32],\r\n    ['accept', beet.u32],\r\n    ['rewardF2p', beet.u64],\r\n    ['offchainPermit', beet.bool],\r\n    ['offchainSigner', beetSolana.publicKey],\r\n    ['bump', beet.u8],\r\n  ],\r\n  Profile.fromArgs,\r\n  'Profile'\r\n)\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\n/**\r\n * @category enums\r\n * @category generated\r\n */\r\nexport enum StakeAccountType {\r\n  POOL,\r\n  DAPP,\r\n  NotDefined,\r\n}\r\n\r\n/**\r\n * @category userTypes\r\n * @category generated\r\n */\r\nexport const stakeAccountTypeBeet = beet.fixedScalarEnum(\r\n  StakeAccountType\r\n) as beet.FixedSizeBeet<StakeAccountType, StakeAccountType>\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\n/**\r\n * @category enums\r\n * @category generated\r\n */\r\nexport enum StakeAccountRole {\r\n  User,\r\n  Architect,\r\n  Builder,\r\n  Validator,\r\n}\r\n\r\n/**\r\n * @category userTypes\r\n * @category generated\r\n */\r\nexport const stakeAccountRoleBeet = beet.fixedScalarEnum(\r\n  StakeAccountRole\r\n) as beet.FixedSizeBeet<StakeAccountRole, StakeAccountRole>\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as web3 from '@solana/web3.js'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as beetSolana from '@metaplex-foundation/beet-solana'\r\nimport { StakingType, stakingTypeBeet } from '../types/StakingType'\r\nimport {\r\n  StakeAccountType,\r\n  stakeAccountTypeBeet,\r\n} from '../types/StakeAccountType'\r\nimport {\r\n  StakeAccountRole,\r\n  stakeAccountRoleBeet,\r\n} from '../types/StakeAccountRole'\r\n\r\n/**\r\n * Arguments used to create {@link StakeAccount}\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport type StakeAccountArgs = {\r\n  dapp: web3.PublicKey\r\n  stakeType: StakingType\r\n  accountType: StakeAccountType\r\n  token: web3.PublicKey\r\n  user: web3.PublicKey\r\n  userRole: StakeAccountRole\r\n  delegateCampaign: beet.COption<web3.PublicKey>\r\n  tokenAmount: beet.bignum\r\n  lockInTime: beet.bignum\r\n  lastRewardClaim: beet.bignum\r\n  lockOutTime: beet.bignum\r\n  pendingReward: beet.bignum\r\n  reward: beet.bignum\r\n  cliffReward: beet.bignum\r\n  unlockReward: beet.bignum\r\n  rewarded: boolean\r\n  dyfUser: boolean\r\n  status: boolean\r\n  reserve: beet.bignum\r\n}\r\n\r\nexport const stakeAccountDiscriminator = [80, 158, 67, 124, 50, 189, 192, 255]\r\n/**\r\n * Holds the data for the {@link StakeAccount} Account and provides de/serialization\r\n * functionality for that data\r\n *\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport class StakeAccount implements StakeAccountArgs {\r\n  private constructor(\r\n    readonly dapp: web3.PublicKey,\r\n    readonly stakeType: StakingType,\r\n    readonly accountType: StakeAccountType,\r\n    readonly token: web3.PublicKey,\r\n    readonly user: web3.PublicKey,\r\n    readonly userRole: StakeAccountRole,\r\n    readonly delegateCampaign: beet.COption<web3.PublicKey>,\r\n    readonly tokenAmount: beet.bignum,\r\n    readonly lockInTime: beet.bignum,\r\n    readonly lastRewardClaim: beet.bignum,\r\n    readonly lockOutTime: beet.bignum,\r\n    readonly pendingReward: beet.bignum,\r\n    readonly reward: beet.bignum,\r\n    readonly cliffReward: beet.bignum,\r\n    readonly unlockReward: beet.bignum,\r\n    readonly rewarded: boolean,\r\n    readonly dyfUser: boolean,\r\n    readonly status: boolean,\r\n    readonly reserve: beet.bignum\r\n  ) {}\r\n\r\n  /**\r\n   * Creates a {@link StakeAccount} instance from the provided args.\r\n   */\r\n  static fromArgs(args: StakeAccountArgs) {\r\n    return new StakeAccount(\r\n      args.dapp,\r\n      args.stakeType,\r\n      args.accountType,\r\n      args.token,\r\n      args.user,\r\n      args.userRole,\r\n      args.delegateCampaign,\r\n      args.tokenAmount,\r\n      args.lockInTime,\r\n      args.lastRewardClaim,\r\n      args.lockOutTime,\r\n      args.pendingReward,\r\n      args.reward,\r\n      args.cliffReward,\r\n      args.unlockReward,\r\n      args.rewarded,\r\n      args.dyfUser,\r\n      args.status,\r\n      args.reserve\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link StakeAccount} from the data of the provided {@link web3.AccountInfo}.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static fromAccountInfo(\r\n    accountInfo: web3.AccountInfo<Buffer>,\r\n    offset = 0\r\n  ): [StakeAccount, number] {\r\n    return StakeAccount.deserialize(accountInfo.data, offset)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the account info from the provided address and deserializes\r\n   * the {@link StakeAccount} from its data.\r\n   *\r\n   * @throws Error if no account info is found at the address or if deserialization fails\r\n   */\r\n  static async fromAccountAddress(\r\n    connection: web3.Connection,\r\n    address: web3.PublicKey,\r\n    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig\r\n  ): Promise<StakeAccount> {\r\n    const accountInfo = await connection.getAccountInfo(\r\n      address,\r\n      commitmentOrConfig\r\n    )\r\n    if (accountInfo == null) {\r\n      throw new Error(`Unable to find StakeAccount account at ${address}`)\r\n    }\r\n    return StakeAccount.fromAccountInfo(accountInfo, 0)[0]\r\n  }\r\n\r\n  /**\r\n   * Provides a {@link web3.Connection.getProgramAccounts} config builder,\r\n   * to fetch accounts matching filters that can be specified via that builder.\r\n   *\r\n   * @param programId - the program that owns the accounts we are filtering\r\n   */\r\n  static gpaBuilder(\r\n    programId: web3.PublicKey = new web3.PublicKey('undefined')\r\n  ) {\r\n    return beetSolana.GpaBuilder.fromStruct(programId, stakeAccountBeet)\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link StakeAccount} from the provided data Buffer.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static deserialize(buf: Buffer, offset = 0): [StakeAccount, number] {\r\n    return stakeAccountBeet.deserialize(buf, offset)\r\n  }\r\n\r\n  /**\r\n   * Serializes the {@link StakeAccount} into a Buffer.\r\n   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.\r\n   */\r\n  serialize(): [Buffer, number] {\r\n    return stakeAccountBeet.serialize({\r\n      accountDiscriminator: stakeAccountDiscriminator,\r\n      ...this,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the byteSize of a {@link Buffer} holding the serialized data of\r\n   * {@link StakeAccount} for the provided args.\r\n   *\r\n   * @param args need to be provided since the byte size for this account\r\n   * depends on them\r\n   */\r\n  static byteSize(args: StakeAccountArgs) {\r\n    const instance = StakeAccount.fromArgs(args)\r\n    return stakeAccountBeet.toFixedFromValue({\r\n      accountDiscriminator: stakeAccountDiscriminator,\r\n      ...instance,\r\n    }).byteSize\r\n  }\r\n\r\n  /**\r\n   * Fetches the minimum balance needed to exempt an account holding\r\n   * {@link StakeAccount} data from rent\r\n   *\r\n   * @param args need to be provided since the byte size for this account\r\n   * depends on them\r\n   * @param connection used to retrieve the rent exemption information\r\n   */\r\n  static async getMinimumBalanceForRentExemption(\r\n    args: StakeAccountArgs,\r\n    connection: web3.Connection,\r\n    commitment?: web3.Commitment\r\n  ): Promise<number> {\r\n    return connection.getMinimumBalanceForRentExemption(\r\n      StakeAccount.byteSize(args),\r\n      commitment\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Returns a readable version of {@link StakeAccount} properties\r\n   * and can be used to convert to JSON and/or logging\r\n   */\r\n  pretty() {\r\n    return {\r\n      dapp: this.dapp.toBase58(),\r\n      stakeType: 'StakingType.' + StakingType[this.stakeType],\r\n      accountType: 'StakeAccountType.' + StakeAccountType[this.accountType],\r\n      token: this.token.toBase58(),\r\n      user: this.user.toBase58(),\r\n      userRole: 'StakeAccountRole.' + StakeAccountRole[this.userRole],\r\n      delegateCampaign: this.delegateCampaign,\r\n      tokenAmount: (() => {\r\n        const x = <{ toNumber: () => number }>this.tokenAmount\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      lockInTime: (() => {\r\n        const x = <{ toNumber: () => number }>this.lockInTime\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      lastRewardClaim: (() => {\r\n        const x = <{ toNumber: () => number }>this.lastRewardClaim\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      lockOutTime: (() => {\r\n        const x = <{ toNumber: () => number }>this.lockOutTime\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      pendingReward: (() => {\r\n        const x = <{ toNumber: () => number }>this.pendingReward\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      reward: (() => {\r\n        const x = <{ toNumber: () => number }>this.reward\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      cliffReward: (() => {\r\n        const x = <{ toNumber: () => number }>this.cliffReward\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      unlockReward: (() => {\r\n        const x = <{ toNumber: () => number }>this.unlockReward\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      rewarded: this.rewarded,\r\n      dyfUser: this.dyfUser,\r\n      status: this.status,\r\n      reserve: (() => {\r\n        const x = <{ toNumber: () => number }>this.reserve\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport const stakeAccountBeet = new beet.FixableBeetStruct<\r\n  StakeAccount,\r\n  StakeAccountArgs & {\r\n    accountDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['dapp', beetSolana.publicKey],\r\n    ['stakeType', stakingTypeBeet],\r\n    ['accountType', stakeAccountTypeBeet],\r\n    ['token', beetSolana.publicKey],\r\n    ['user', beetSolana.publicKey],\r\n    ['userRole', stakeAccountRoleBeet],\r\n    ['delegateCampaign', beet.coption(beetSolana.publicKey)],\r\n    ['tokenAmount', beet.u64],\r\n    ['lockInTime', beet.i64],\r\n    ['lastRewardClaim', beet.i64],\r\n    ['lockOutTime', beet.i64],\r\n    ['pendingReward', beet.u64],\r\n    ['reward', beet.u64],\r\n    ['cliffReward', beet.u64],\r\n    ['unlockReward', beet.u64],\r\n    ['rewarded', beet.bool],\r\n    ['dyfUser', beet.bool],\r\n    ['status', beet.bool],\r\n    ['reserve', beet.u64],\r\n  ],\r\n  StakeAccount.fromArgs,\r\n  'StakeAccount'\r\n)\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as web3 from '@solana/web3.js'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as beetSolana from '@metaplex-foundation/beet-solana'\r\n\r\n/**\r\n * Arguments used to create {@link Validate}\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport type ValidateArgs = {\r\n  phrase: web3.PublicKey\r\n  address: web3.PublicKey\r\n  rentOwner: web3.PublicKey\r\n  index: number\r\n  time: beet.bignum\r\n  vote: boolean\r\n  confident: number\r\n  bump: number\r\n}\r\n\r\nexport const validateDiscriminator = [58, 47, 243, 207, 154, 37, 77, 242]\r\n/**\r\n * Holds the data for the {@link Validate} Account and provides de/serialization\r\n * functionality for that data\r\n *\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport class Validate implements ValidateArgs {\r\n  private constructor(\r\n    readonly phrase: web3.PublicKey,\r\n    readonly address: web3.PublicKey,\r\n    readonly rentOwner: web3.PublicKey,\r\n    readonly index: number,\r\n    readonly time: beet.bignum,\r\n    readonly vote: boolean,\r\n    readonly confident: number,\r\n    readonly bump: number\r\n  ) {}\r\n\r\n  /**\r\n   * Creates a {@link Validate} instance from the provided args.\r\n   */\r\n  static fromArgs(args: ValidateArgs) {\r\n    return new Validate(\r\n      args.phrase,\r\n      args.address,\r\n      args.rentOwner,\r\n      args.index,\r\n      args.time,\r\n      args.vote,\r\n      args.confident,\r\n      args.bump\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link Validate} from the data of the provided {@link web3.AccountInfo}.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static fromAccountInfo(\r\n    accountInfo: web3.AccountInfo<Buffer>,\r\n    offset = 0\r\n  ): [Validate, number] {\r\n    return Validate.deserialize(accountInfo.data, offset)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the account info from the provided address and deserializes\r\n   * the {@link Validate} from its data.\r\n   *\r\n   * @throws Error if no account info is found at the address or if deserialization fails\r\n   */\r\n  static async fromAccountAddress(\r\n    connection: web3.Connection,\r\n    address: web3.PublicKey,\r\n    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig\r\n  ): Promise<Validate> {\r\n    const accountInfo = await connection.getAccountInfo(\r\n      address,\r\n      commitmentOrConfig\r\n    )\r\n    if (accountInfo == null) {\r\n      throw new Error(`Unable to find Validate account at ${address}`)\r\n    }\r\n    return Validate.fromAccountInfo(accountInfo, 0)[0]\r\n  }\r\n\r\n  /**\r\n   * Provides a {@link web3.Connection.getProgramAccounts} config builder,\r\n   * to fetch accounts matching filters that can be specified via that builder.\r\n   *\r\n   * @param programId - the program that owns the accounts we are filtering\r\n   */\r\n  static gpaBuilder(\r\n    programId: web3.PublicKey = new web3.PublicKey('undefined')\r\n  ) {\r\n    return beetSolana.GpaBuilder.fromStruct(programId, validateBeet)\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link Validate} from the provided data Buffer.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static deserialize(buf: Buffer, offset = 0): [Validate, number] {\r\n    return validateBeet.deserialize(buf, offset)\r\n  }\r\n\r\n  /**\r\n   * Serializes the {@link Validate} into a Buffer.\r\n   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.\r\n   */\r\n  serialize(): [Buffer, number] {\r\n    return validateBeet.serialize({\r\n      accountDiscriminator: validateDiscriminator,\r\n      ...this,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the byteSize of a {@link Buffer} holding the serialized data of\r\n   * {@link Validate}\r\n   */\r\n  static get byteSize() {\r\n    return validateBeet.byteSize\r\n  }\r\n\r\n  /**\r\n   * Fetches the minimum balance needed to exempt an account holding\r\n   * {@link Validate} data from rent\r\n   *\r\n   * @param connection used to retrieve the rent exemption information\r\n   */\r\n  static async getMinimumBalanceForRentExemption(\r\n    connection: web3.Connection,\r\n    commitment?: web3.Commitment\r\n  ): Promise<number> {\r\n    return connection.getMinimumBalanceForRentExemption(\r\n      Validate.byteSize,\r\n      commitment\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Determines if the provided {@link Buffer} has the correct byte size to\r\n   * hold {@link Validate} data.\r\n   */\r\n  static hasCorrectByteSize(buf: Buffer, offset = 0) {\r\n    return buf.byteLength - offset === Validate.byteSize\r\n  }\r\n\r\n  /**\r\n   * Returns a readable version of {@link Validate} properties\r\n   * and can be used to convert to JSON and/or logging\r\n   */\r\n  pretty() {\r\n    return {\r\n      phrase: this.phrase.toBase58(),\r\n      address: this.address.toBase58(),\r\n      rentOwner: this.rentOwner.toBase58(),\r\n      index: this.index,\r\n      time: (() => {\r\n        const x = <{ toNumber: () => number }>this.time\r\n        if (typeof x.toNumber === 'function') {\r\n          try {\r\n            return x.toNumber()\r\n          } catch (_) {\r\n            return x\r\n          }\r\n        }\r\n        return x\r\n      })(),\r\n      vote: this.vote,\r\n      confident: this.confident,\r\n      bump: this.bump,\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport const validateBeet = new beet.BeetStruct<\r\n  Validate,\r\n  ValidateArgs & {\r\n    accountDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['phrase', beetSolana.publicKey],\r\n    ['address', beetSolana.publicKey],\r\n    ['rentOwner', beetSolana.publicKey],\r\n    ['index', beet.u16],\r\n    ['time', beet.u64],\r\n    ['vote', beet.bool],\r\n    ['confident', beet.u8],\r\n    ['bump', beet.u8],\r\n  ],\r\n  Validate.fromArgs,\r\n  'Validate'\r\n)\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as web3 from '@solana/web3.js'\r\nimport * as beetSolana from '@metaplex-foundation/beet-solana'\r\nimport * as beet from '@metaplex-foundation/beet'\r\n\r\n/**\r\n * Arguments used to create {@link Validators}\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport type ValidatorsArgs = {\r\n  phrase: web3.PublicKey\r\n  list: web3.PublicKey[]\r\n}\r\n\r\nexport const validatorsDiscriminator = [249, 251, 155, 170, 211, 203, 178, 186]\r\n/**\r\n * Holds the data for the {@link Validators} Account and provides de/serialization\r\n * functionality for that data\r\n *\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport class Validators implements ValidatorsArgs {\r\n  private constructor(\r\n    readonly phrase: web3.PublicKey,\r\n    readonly list: web3.PublicKey[]\r\n  ) {}\r\n\r\n  /**\r\n   * Creates a {@link Validators} instance from the provided args.\r\n   */\r\n  static fromArgs(args: ValidatorsArgs) {\r\n    return new Validators(args.phrase, args.list)\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link Validators} from the data of the provided {@link web3.AccountInfo}.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static fromAccountInfo(\r\n    accountInfo: web3.AccountInfo<Buffer>,\r\n    offset = 0\r\n  ): [Validators, number] {\r\n    return Validators.deserialize(accountInfo.data, offset)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the account info from the provided address and deserializes\r\n   * the {@link Validators} from its data.\r\n   *\r\n   * @throws Error if no account info is found at the address or if deserialization fails\r\n   */\r\n  static async fromAccountAddress(\r\n    connection: web3.Connection,\r\n    address: web3.PublicKey,\r\n    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig\r\n  ): Promise<Validators> {\r\n    const accountInfo = await connection.getAccountInfo(\r\n      address,\r\n      commitmentOrConfig\r\n    )\r\n    if (accountInfo == null) {\r\n      throw new Error(`Unable to find Validators account at ${address}`)\r\n    }\r\n    return Validators.fromAccountInfo(accountInfo, 0)[0]\r\n  }\r\n\r\n  /**\r\n   * Provides a {@link web3.Connection.getProgramAccounts} config builder,\r\n   * to fetch accounts matching filters that can be specified via that builder.\r\n   *\r\n   * @param programId - the program that owns the accounts we are filtering\r\n   */\r\n  static gpaBuilder(\r\n    programId: web3.PublicKey = new web3.PublicKey('undefined')\r\n  ) {\r\n    return beetSolana.GpaBuilder.fromStruct(programId, validatorsBeet)\r\n  }\r\n\r\n  /**\r\n   * Deserializes the {@link Validators} from the provided data Buffer.\r\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\r\n   */\r\n  static deserialize(buf: Buffer, offset = 0): [Validators, number] {\r\n    return validatorsBeet.deserialize(buf, offset)\r\n  }\r\n\r\n  /**\r\n   * Serializes the {@link Validators} into a Buffer.\r\n   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.\r\n   */\r\n  serialize(): [Buffer, number] {\r\n    return validatorsBeet.serialize({\r\n      accountDiscriminator: validatorsDiscriminator,\r\n      ...this,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns the byteSize of a {@link Buffer} holding the serialized data of\r\n   * {@link Validators} for the provided args.\r\n   *\r\n   * @param args need to be provided since the byte size for this account\r\n   * depends on them\r\n   */\r\n  static byteSize(args: ValidatorsArgs) {\r\n    const instance = Validators.fromArgs(args)\r\n    return validatorsBeet.toFixedFromValue({\r\n      accountDiscriminator: validatorsDiscriminator,\r\n      ...instance,\r\n    }).byteSize\r\n  }\r\n\r\n  /**\r\n   * Fetches the minimum balance needed to exempt an account holding\r\n   * {@link Validators} data from rent\r\n   *\r\n   * @param args need to be provided since the byte size for this account\r\n   * depends on them\r\n   * @param connection used to retrieve the rent exemption information\r\n   */\r\n  static async getMinimumBalanceForRentExemption(\r\n    args: ValidatorsArgs,\r\n    connection: web3.Connection,\r\n    commitment?: web3.Commitment\r\n  ): Promise<number> {\r\n    return connection.getMinimumBalanceForRentExemption(\r\n      Validators.byteSize(args),\r\n      commitment\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Returns a readable version of {@link Validators} properties\r\n   * and can be used to convert to JSON and/or logging\r\n   */\r\n  pretty() {\r\n    return {\r\n      phrase: this.phrase.toBase58(),\r\n      list: this.list,\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @category Accounts\r\n * @category generated\r\n */\r\nexport const validatorsBeet = new beet.FixableBeetStruct<\r\n  Validators,\r\n  ValidatorsArgs & {\r\n    accountDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['phrase', beetSolana.publicKey],\r\n    ['list', beet.array(beetSolana.publicKey)],\r\n  ],\r\n  Validators.fromArgs,\r\n  'Validators'\r\n)\r\n","export * from './Campaign'\r\nexport * from './CampaignActivity'\r\nexport * from './CampaignVault'\r\nexport * from './FarmConfig'\r\nexport * from './Feed'\r\nexport * from './Guild'\r\nexport * from './Phrase'\r\nexport * from './Profile'\r\nexport * from './StakeAccount'\r\nexport * from './Validate'\r\nexport * from './Validators'\r\n\r\nimport { FarmConfig } from './FarmConfig'\r\nimport { Guild } from './Guild'\r\nimport { Profile } from './Profile'\r\nimport { CampaignActivity } from './CampaignActivity'\r\nimport { CampaignVault } from './CampaignVault'\r\nimport { Campaign } from './Campaign'\r\nimport { Phrase } from './Phrase'\r\nimport { Validate } from './Validate'\r\nimport { Validators } from './Validators'\r\nimport { Feed } from './Feed'\r\nimport { StakeAccount } from './StakeAccount'\r\n\r\nexport const accountProviders = {\r\n  FarmConfig,\r\n  Guild,\r\n  Profile,\r\n  CampaignActivity,\r\n  CampaignVault,\r\n  Campaign,\r\n  Phrase,\r\n  Validate,\r\n  Validators,\r\n  Feed,\r\n  StakeAccount,\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\ntype ErrorWithCode = Error & { code: number }\r\ntype MaybeErrorWithCode = ErrorWithCode | null | undefined\r\n\r\nconst createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()\r\nconst createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()\r\n\r\n/**\r\n * InvalidPDA: 'PDA Seed mismatch'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class InvalidPDAError extends Error {\r\n  readonly code: number = 0x1770\r\n  readonly name: string = 'InvalidPDA'\r\n  constructor() {\r\n    super('PDA Seed mismatch')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, InvalidPDAError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1770, () => new InvalidPDAError())\r\ncreateErrorFromNameLookup.set('InvalidPDA', () => new InvalidPDAError())\r\n\r\n/**\r\n * InvalidStakeAccount: 'Invalid Stake Account Type'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class InvalidStakeAccountError extends Error {\r\n  readonly code: number = 0x1771\r\n  readonly name: string = 'InvalidStakeAccount'\r\n  constructor() {\r\n    super('Invalid Stake Account Type')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, InvalidStakeAccountError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1771, () => new InvalidStakeAccountError())\r\ncreateErrorFromNameLookup.set(\r\n  'InvalidStakeAccount',\r\n  () => new InvalidStakeAccountError()\r\n)\r\n\r\n/**\r\n * InvalidStakeType: 'Invalid Stake Type'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class InvalidStakeTypeError extends Error {\r\n  readonly code: number = 0x1772\r\n  readonly name: string = 'InvalidStakeType'\r\n  constructor() {\r\n    super('Invalid Stake Type')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, InvalidStakeTypeError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1772, () => new InvalidStakeTypeError())\r\ncreateErrorFromNameLookup.set(\r\n  'InvalidStakeType',\r\n  () => new InvalidStakeTypeError()\r\n)\r\n\r\n/**\r\n * InvalidStakeStatus: 'Invalid Stake Status'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class InvalidStakeStatusError extends Error {\r\n  readonly code: number = 0x1773\r\n  readonly name: string = 'InvalidStakeStatus'\r\n  constructor() {\r\n    super('Invalid Stake Status')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, InvalidStakeStatusError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1773, () => new InvalidStakeStatusError())\r\ncreateErrorFromNameLookup.set(\r\n  'InvalidStakeStatus',\r\n  () => new InvalidStakeStatusError()\r\n)\r\n\r\n/**\r\n * InvalidStakeDelegate: 'Stake Account not belong to this campaign'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class InvalidStakeDelegateError extends Error {\r\n  readonly code: number = 0x1774\r\n  readonly name: string = 'InvalidStakeDelegate'\r\n  constructor() {\r\n    super('Stake Account not belong to this campaign')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, InvalidStakeDelegateError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1774, () => new InvalidStakeDelegateError())\r\ncreateErrorFromNameLookup.set(\r\n  'InvalidStakeDelegate',\r\n  () => new InvalidStakeDelegateError()\r\n)\r\n\r\n/**\r\n * InvalidTokenMint: 'Invalid Token Mint'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class InvalidTokenMintError extends Error {\r\n  readonly code: number = 0x1775\r\n  readonly name: string = 'InvalidTokenMint'\r\n  constructor() {\r\n    super('Invalid Token Mint')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, InvalidTokenMintError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1775, () => new InvalidTokenMintError())\r\ncreateErrorFromNameLookup.set(\r\n  'InvalidTokenMint',\r\n  () => new InvalidTokenMintError()\r\n)\r\n\r\n/**\r\n * InvalidTokenOwner: 'Passed token account is not owned by signer'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class InvalidTokenOwnerError extends Error {\r\n  readonly code: number = 0x1776\r\n  readonly name: string = 'InvalidTokenOwner'\r\n  constructor() {\r\n    super('Passed token account is not owned by signer')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, InvalidTokenOwnerError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1776, () => new InvalidTokenOwnerError())\r\ncreateErrorFromNameLookup.set(\r\n  'InvalidTokenOwner',\r\n  () => new InvalidTokenOwnerError()\r\n)\r\n\r\n/**\r\n * DoubleVoteDetect: 'Insufficient Token Balance'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class DoubleVoteDetectError extends Error {\r\n  readonly code: number = 0x1777\r\n  readonly name: string = 'DoubleVoteDetect'\r\n  constructor() {\r\n    super('Insufficient Token Balance')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, DoubleVoteDetectError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1777, () => new DoubleVoteDetectError())\r\ncreateErrorFromNameLookup.set(\r\n  'DoubleVoteDetect',\r\n  () => new DoubleVoteDetectError()\r\n)\r\n\r\n/**\r\n * InsufficientTokenBalance: 'User tried to vote on utterance'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class InsufficientTokenBalanceError extends Error {\r\n  readonly code: number = 0x1778\r\n  readonly name: string = 'InsufficientTokenBalance'\r\n  constructor() {\r\n    super('User tried to vote on utterance')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, InsufficientTokenBalanceError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1778, () => new InsufficientTokenBalanceError())\r\ncreateErrorFromNameLookup.set(\r\n  'InsufficientTokenBalance',\r\n  () => new InsufficientTokenBalanceError()\r\n)\r\n\r\n/**\r\n * RewardBalanceIsZero: 'There is no reward to claim'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class RewardBalanceIsZeroError extends Error {\r\n  readonly code: number = 0x1779\r\n  readonly name: string = 'RewardBalanceIsZero'\r\n  constructor() {\r\n    super('There is no reward to claim')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, RewardBalanceIsZeroError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1779, () => new RewardBalanceIsZeroError())\r\ncreateErrorFromNameLookup.set(\r\n  'RewardBalanceIsZero',\r\n  () => new RewardBalanceIsZeroError()\r\n)\r\n\r\n/**\r\n * PhraseValidatedAlready: 'Phrase validation is finished'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class PhraseValidatedAlreadyError extends Error {\r\n  readonly code: number = 0x177a\r\n  readonly name: string = 'PhraseValidatedAlready'\r\n  constructor() {\r\n    super('Phrase validation is finished')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, PhraseValidatedAlreadyError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x177a, () => new PhraseValidatedAlreadyError())\r\ncreateErrorFromNameLookup.set(\r\n  'PhraseValidatedAlready',\r\n  () => new PhraseValidatedAlreadyError()\r\n)\r\n\r\n/**\r\n * CampaignFinishedAlready: 'Campaign is finished'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class CampaignFinishedAlreadyError extends Error {\r\n  readonly code: number = 0x177b\r\n  readonly name: string = 'CampaignFinishedAlready'\r\n  constructor() {\r\n    super('Campaign is finished')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, CampaignFinishedAlreadyError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x177b, () => new CampaignFinishedAlreadyError())\r\ncreateErrorFromNameLookup.set(\r\n  'CampaignFinishedAlready',\r\n  () => new CampaignFinishedAlreadyError()\r\n)\r\n\r\n/**\r\n * ProfileNotMatchWithAuthority: 'Profile is not match with authority Signer'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class ProfileNotMatchWithAuthorityError extends Error {\r\n  readonly code: number = 0x177c\r\n  readonly name: string = 'ProfileNotMatchWithAuthority'\r\n  constructor() {\r\n    super('Profile is not match with authority Signer')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, ProfileNotMatchWithAuthorityError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(\r\n  0x177c,\r\n  () => new ProfileNotMatchWithAuthorityError()\r\n)\r\ncreateErrorFromNameLookup.set(\r\n  'ProfileNotMatchWithAuthority',\r\n  () => new ProfileNotMatchWithAuthorityError()\r\n)\r\n\r\n/**\r\n * PermitRpcIsMissed: 'User have to set RPC permission to true'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class PermitRpcIsMissedError extends Error {\r\n  readonly code: number = 0x177d\r\n  readonly name: string = 'PermitRpcIsMissed'\r\n  constructor() {\r\n    super('User have to set RPC permission to true')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, PermitRpcIsMissedError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x177d, () => new PermitRpcIsMissedError())\r\ncreateErrorFromNameLookup.set(\r\n  'PermitRpcIsMissed',\r\n  () => new PermitRpcIsMissedError()\r\n)\r\n\r\n/**\r\n * RoleMismatch: 'User Role is Mismatch'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class RoleMismatchError extends Error {\r\n  readonly code: number = 0x177e\r\n  readonly name: string = 'RoleMismatch'\r\n  constructor() {\r\n    super('User Role is Mismatch')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, RoleMismatchError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x177e, () => new RoleMismatchError())\r\ncreateErrorFromNameLookup.set('RoleMismatch', () => new RoleMismatchError())\r\n\r\n/**\r\n * RpcSignerMismatch: 'The RPC Signer is invalid'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class RpcSignerMismatchError extends Error {\r\n  readonly code: number = 0x177f\r\n  readonly name: string = 'RpcSignerMismatch'\r\n  constructor() {\r\n    super('The RPC Signer is invalid')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, RpcSignerMismatchError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x177f, () => new RpcSignerMismatchError())\r\ncreateErrorFromNameLookup.set(\r\n  'RpcSignerMismatch',\r\n  () => new RpcSignerMismatchError()\r\n)\r\n\r\n/**\r\n * ConfidentIsInvalid: 'Confident level should be in range of 1~5'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class ConfidentIsInvalidError extends Error {\r\n  readonly code: number = 0x1780\r\n  readonly name: string = 'ConfidentIsInvalid'\r\n  constructor() {\r\n    super('Confident level should be in range of 1~5')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, ConfidentIsInvalidError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1780, () => new ConfidentIsInvalidError())\r\ncreateErrorFromNameLookup.set(\r\n  'ConfidentIsInvalid',\r\n  () => new ConfidentIsInvalidError()\r\n)\r\n\r\n/**\r\n * StakeLocked: 'Need to wait for unlock time'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class StakeLockedError extends Error {\r\n  readonly code: number = 0x1781\r\n  readonly name: string = 'StakeLocked'\r\n  constructor() {\r\n    super('Need to wait for unlock time')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, StakeLockedError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1781, () => new StakeLockedError())\r\ncreateErrorFromNameLookup.set('StakeLocked', () => new StakeLockedError())\r\n\r\n/**\r\n * InvalidMint: 'the mint account passed is different from NFT Mint'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class InvalidMintError extends Error {\r\n  readonly code: number = 0x1782\r\n  readonly name: string = 'InvalidMint'\r\n  constructor() {\r\n    super('the mint account passed is different from NFT Mint')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, InvalidMintError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1782, () => new InvalidMintError())\r\ncreateErrorFromNameLookup.set('InvalidMint', () => new InvalidMintError())\r\n\r\n/**\r\n * InvalidNFT: 'the creator of NFT is invalid'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class InvalidNFTError extends Error {\r\n  readonly code: number = 0x1783\r\n  readonly name: string = 'InvalidNFT'\r\n  constructor() {\r\n    super('the creator of NFT is invalid')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, InvalidNFTError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1783, () => new InvalidNFTError())\r\ncreateErrorFromNameLookup.set('InvalidNFT', () => new InvalidNFTError())\r\n\r\n/**\r\n * InvalidAccessMethod: 'You should have profile with NFT StakingType'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class InvalidAccessMethodError extends Error {\r\n  readonly code: number = 0x1784\r\n  readonly name: string = 'InvalidAccessMethod'\r\n  constructor() {\r\n    super('You should have profile with NFT StakingType')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, InvalidAccessMethodError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1784, () => new InvalidAccessMethodError())\r\ncreateErrorFromNameLookup.set(\r\n  'InvalidAccessMethod',\r\n  () => new InvalidAccessMethodError()\r\n)\r\n\r\n/**\r\n * CampaignExpired: 'the campaign is expired'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class CampaignExpiredError extends Error {\r\n  readonly code: number = 0x1785\r\n  readonly name: string = 'CampaignExpired'\r\n  constructor() {\r\n    super('the campaign is expired')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, CampaignExpiredError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1785, () => new CampaignExpiredError())\r\ncreateErrorFromNameLookup.set(\r\n  'CampaignExpired',\r\n  () => new CampaignExpiredError()\r\n)\r\n\r\n/**\r\n * CampaignNotFinished: 'the campaign is not finished'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class CampaignNotFinishedError extends Error {\r\n  readonly code: number = 0x1786\r\n  readonly name: string = 'CampaignNotFinished'\r\n  constructor() {\r\n    super('the campaign is not finished')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, CampaignNotFinishedError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1786, () => new CampaignNotFinishedError())\r\ncreateErrorFromNameLookup.set(\r\n  'CampaignNotFinished',\r\n  () => new CampaignNotFinishedError()\r\n)\r\n\r\n/**\r\n * RewardIsLow: 'aaaaaaaaaaaaaaaaaaaaaaaaaaa'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class RewardIsLowError extends Error {\r\n  readonly code: number = 0x1787\r\n  readonly name: string = 'RewardIsLow'\r\n  constructor() {\r\n    super('aaaaaaaaaaaaaaaaaaaaaaaaaaa')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, RewardIsLowError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1787, () => new RewardIsLowError())\r\ncreateErrorFromNameLookup.set('RewardIsLow', () => new RewardIsLowError())\r\n\r\n/**\r\n * B: 'bbbbbbbbbbbbbbbbbbbbbbbbbbb'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class BError extends Error {\r\n  readonly code: number = 0x1788\r\n  readonly name: string = 'B'\r\n  constructor() {\r\n    super('bbbbbbbbbbbbbbbbbbbbbbbbbbb')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, BError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1788, () => new BError())\r\ncreateErrorFromNameLookup.set('B', () => new BError())\r\n\r\n/**\r\n * C: 'ccccccccccccccccccccccccccc'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class CError extends Error {\r\n  readonly code: number = 0x1789\r\n  readonly name: string = 'C'\r\n  constructor() {\r\n    super('ccccccccccccccccccccccccccc')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, CError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x1789, () => new CError())\r\ncreateErrorFromNameLookup.set('C', () => new CError())\r\n\r\n/**\r\n * D: 'ddddddddddddddddddddddddddd'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class DError extends Error {\r\n  readonly code: number = 0x178a\r\n  readonly name: string = 'D'\r\n  constructor() {\r\n    super('ddddddddddddddddddddddddddd')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, DError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x178a, () => new DError())\r\ncreateErrorFromNameLookup.set('D', () => new DError())\r\n\r\n/**\r\n * E: 'eeeeeeeeeeeeeeeeeeeeeeeeeee'\r\n *\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport class EError extends Error {\r\n  readonly code: number = 0x178b\r\n  readonly name: string = 'E'\r\n  constructor() {\r\n    super('eeeeeeeeeeeeeeeeeeeeeeeeeee')\r\n    if (typeof Error.captureStackTrace === 'function') {\r\n      Error.captureStackTrace(this, EError)\r\n    }\r\n  }\r\n}\r\n\r\ncreateErrorFromCodeLookup.set(0x178b, () => new EError())\r\ncreateErrorFromNameLookup.set('E', () => new EError())\r\n\r\n/**\r\n * Attempts to resolve a custom program error from the provided error code.\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport function errorFromCode(code: number): MaybeErrorWithCode {\r\n  const createError = createErrorFromCodeLookup.get(code)\r\n  return createError != null ? createError() : null\r\n}\r\n\r\n/**\r\n * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.\r\n * @category Errors\r\n * @category generated\r\n */\r\nexport function errorFromName(name: string): MaybeErrorWithCode {\r\n  const createError = createErrorFromNameLookup.get(name)\r\n  return createError != null ? createError() : null\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category AdjustReward\r\n * @category generated\r\n */\r\nexport type AdjustRewardInstructionArgs = {\r\n  promo: number\r\n  system: number\r\n}\r\n/**\r\n * @category Instructions\r\n * @category AdjustReward\r\n * @category generated\r\n */\r\nexport const adjustRewardStruct = new beet.BeetArgsStruct<\r\n  AdjustRewardInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['promo', beet.u8],\r\n    ['system', beet.u8],\r\n  ],\r\n  'AdjustRewardInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _adjustReward_ instruction\r\n *\r\n * @property [_writable_] farmConfig\r\n * @property [_writable_, **signer**] authority\r\n * @category Instructions\r\n * @category AdjustReward\r\n * @category generated\r\n */\r\nexport type AdjustRewardInstructionAccounts = {\r\n  farmConfig: web3.PublicKey\r\n  authority: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const adjustRewardInstructionDiscriminator = [\r\n  23, 3, 192, 117, 96, 198, 166, 215,\r\n]\r\n\r\n/**\r\n * Creates a _AdjustReward_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category AdjustReward\r\n * @category generated\r\n */\r\nexport function createAdjustRewardInstruction(\r\n  accounts: AdjustRewardInstructionAccounts,\r\n  args: AdjustRewardInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = adjustRewardStruct.serialize({\r\n    instructionDiscriminator: adjustRewardInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.authority,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as splToken from '@solana/spl-token'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category Airdrop\r\n * @category generated\r\n */\r\nexport const airdropStruct = new beet.BeetArgsStruct<{\r\n  instructionDiscriminator: number[] /* size: 8 */\r\n}>(\r\n  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],\r\n  'AirdropInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _airdrop_ instruction\r\n *\r\n * @property [_writable_, **signer**] authority\r\n * @property [_writable_] userToken\r\n * @property [_writable_] tokenVault\r\n * @property [_writable_] pdaAccount\r\n * @property [] clock\r\n * @category Instructions\r\n * @category Airdrop\r\n * @category generated\r\n */\r\nexport type AirdropInstructionAccounts = {\r\n  authority: web3.PublicKey\r\n  userToken: web3.PublicKey\r\n  tokenVault: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  tokenProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const airdropInstructionDiscriminator = [\r\n  113, 173, 36, 238, 38, 152, 22, 117,\r\n]\r\n\r\n/**\r\n * Creates a _Airdrop_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @category Instructions\r\n * @category Airdrop\r\n * @category generated\r\n */\r\nexport function createAirdropInstruction(\r\n  accounts: AirdropInstructionAccounts,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = airdropStruct.serialize({\r\n    instructionDiscriminator: airdropInstructionDiscriminator,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.authority,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.userToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.tokenVault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category AllocateTable\r\n * @category generated\r\n */\r\nexport type AllocateTableInstructionArgs = {\r\n  slot: beet.bignum\r\n  scope: string\r\n}\r\n/**\r\n * @category Instructions\r\n * @category AllocateTable\r\n * @category generated\r\n */\r\nexport const allocateTableStruct = new beet.FixableBeetArgsStruct<\r\n  AllocateTableInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['slot', beet.u64],\r\n    ['scope', beet.utf8String],\r\n  ],\r\n  'AllocateTableInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _allocateTable_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] pdaAccount\r\n * @property [_writable_] lookupAccount\r\n * @property [] lookupProgram\r\n * @property [] clock\r\n * @category Instructions\r\n * @category AllocateTable\r\n * @category generated\r\n */\r\nexport type AllocateTableInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  lookupAccount: web3.PublicKey\r\n  lookupProgram: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const allocateTableInstructionDiscriminator = [\r\n  51, 148, 3, 2, 77, 128, 58, 80,\r\n]\r\n\r\n/**\r\n * Creates a _AllocateTable_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category AllocateTable\r\n * @category generated\r\n */\r\nexport function createAllocateTableInstruction(\r\n  accounts: AllocateTableInstructionAccounts,\r\n  args: AllocateTableInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = allocateTableStruct.serialize({\r\n    instructionDiscriminator: allocateTableInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.lookupAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.lookupProgram,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category CheckPrice\r\n * @category generated\r\n */\r\nexport type CheckPriceInstructionArgs = {\r\n  pair: string\r\n}\r\n/**\r\n * @category Instructions\r\n * @category CheckPrice\r\n * @category generated\r\n */\r\nexport const checkPriceStruct = new beet.FixableBeetArgsStruct<\r\n  CheckPriceInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['pair', beet.utf8String],\r\n  ],\r\n  'CheckPriceInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _checkPrice_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] farmConfig\r\n * @property [] priceFeed\r\n * @category Instructions\r\n * @category CheckPrice\r\n * @category generated\r\n */\r\nexport type CheckPriceInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  priceFeed: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const checkPriceInstructionDiscriminator = [\r\n  167, 85, 209, 192, 115, 173, 239, 176,\r\n]\r\n\r\n/**\r\n * Creates a _CheckPrice_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category CheckPrice\r\n * @category generated\r\n */\r\nexport function createCheckPriceInstruction(\r\n  accounts: CheckPriceInstructionAccounts,\r\n  args: CheckPriceInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = checkPriceStruct.serialize({\r\n    instructionDiscriminator: checkPriceInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.priceFeed,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as splToken from '@solana/spl-token'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category ClaimReward\r\n * @category generated\r\n */\r\nexport type ClaimRewardInstructionArgs = {\r\n  campaignTitle: string\r\n}\r\n/**\r\n * @category Instructions\r\n * @category ClaimReward\r\n * @category generated\r\n */\r\nexport const claimRewardStruct = new beet.FixableBeetArgsStruct<\r\n  ClaimRewardInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['campaignTitle', beet.utf8String],\r\n  ],\r\n  'ClaimRewardInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _claimReward_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] userProfile\r\n * @property [_writable_] userToken\r\n * @property [_writable_] campaignActivity\r\n * @property [_writable_] campaignVault\r\n * @property [] farmConfig\r\n * @property [_writable_] pdaAccount\r\n * @property [_writable_] dyfVault\r\n * @property [] clock\r\n * @category Instructions\r\n * @category ClaimReward\r\n * @category generated\r\n */\r\nexport type ClaimRewardInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  userToken: web3.PublicKey\r\n  campaignActivity: web3.PublicKey\r\n  campaignVault: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  dyfVault: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  tokenProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const claimRewardInstructionDiscriminator = [\r\n  149, 95, 181, 242, 94, 90, 158, 162,\r\n]\r\n\r\n/**\r\n * Creates a _ClaimReward_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category ClaimReward\r\n * @category generated\r\n */\r\nexport function createClaimRewardInstruction(\r\n  accounts: ClaimRewardInstructionAccounts,\r\n  args: ClaimRewardInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = claimRewardStruct.serialize({\r\n    instructionDiscriminator: claimRewardInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignActivity,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignVault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.dyfVault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as splToken from '@solana/spl-token'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category CreateCampaign\r\n * @category generated\r\n */\r\nexport type CreateCampaignInstructionArgs = {\r\n  campaignTitle: string\r\n  pair: string\r\n  industry: string\r\n  domain: string\r\n  subject: string\r\n  organizer: string\r\n  lang: string\r\n  kind: number\r\n  open: beet.bignum\r\n  close: beet.bignum\r\n  expire: beet.bignum\r\n  rpuValidator: beet.bignum\r\n  rpuGeneral: beet.bignum\r\n  rpuSpecific: beet.bignum\r\n  rpuCause: beet.bignum\r\n  rpuEffect: beet.bignum\r\n  minBuilder: number\r\n  minValidator: number\r\n  majorityQuorum: number\r\n  minimumStake: beet.bignum\r\n}\r\n/**\r\n * @category Instructions\r\n * @category CreateCampaign\r\n * @category generated\r\n */\r\nexport const createCampaignStruct = new beet.FixableBeetArgsStruct<\r\n  CreateCampaignInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['campaignTitle', beet.utf8String],\r\n    ['pair', beet.utf8String],\r\n    ['industry', beet.utf8String],\r\n    ['domain', beet.utf8String],\r\n    ['subject', beet.utf8String],\r\n    ['organizer', beet.utf8String],\r\n    ['lang', beet.utf8String],\r\n    ['kind', beet.u8],\r\n    ['open', beet.u64],\r\n    ['close', beet.u64],\r\n    ['expire', beet.u64],\r\n    ['rpuValidator', beet.u64],\r\n    ['rpuGeneral', beet.u64],\r\n    ['rpuSpecific', beet.u64],\r\n    ['rpuCause', beet.u64],\r\n    ['rpuEffect', beet.u64],\r\n    ['minBuilder', beet.u16],\r\n    ['minValidator', beet.u16],\r\n    ['majorityQuorum', beet.u16],\r\n    ['minimumStake', beet.u64],\r\n  ],\r\n  'CreateCampaignInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _createCampaign_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] campaignAccount\r\n * @property [_writable_] campaignVault\r\n * @property [_writable_] userToken\r\n * @property [] mint\r\n * @property [] farmConfig\r\n * @property [] priceFeed\r\n * @property [_writable_] pdaAccount\r\n * @property [_writable_] campaignTableAccount\r\n * @property [] lookupProgram\r\n * @property [] oracle\r\n * @property [] clock\r\n * @category Instructions\r\n * @category CreateCampaign\r\n * @category generated\r\n */\r\nexport type CreateCampaignInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  campaignAccount: web3.PublicKey\r\n  campaignVault: web3.PublicKey\r\n  userToken: web3.PublicKey\r\n  mint: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  priceFeed: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  campaignTableAccount: web3.PublicKey\r\n  lookupProgram: web3.PublicKey\r\n  oracle: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  tokenProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const createCampaignInstructionDiscriminator = [\r\n  111, 131, 187, 98, 160, 193, 114, 244,\r\n]\r\n\r\n/**\r\n * Creates a _CreateCampaign_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category CreateCampaign\r\n * @category generated\r\n */\r\nexport function createCreateCampaignInstruction(\r\n  accounts: CreateCampaignInstructionAccounts,\r\n  args: CreateCampaignInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = createCampaignStruct.serialize({\r\n    instructionDiscriminator: createCampaignInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignVault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.mint,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.priceFeed,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignTableAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.lookupProgram,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.oracle,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\nimport * as beetSolana from '@metaplex-foundation/beet-solana'\r\n\r\n/**\r\n * @category Instructions\r\n * @category CreateGuild\r\n * @category generated\r\n */\r\nexport type CreateGuildInstructionArgs = {\r\n  guildTitle: string\r\n  slot: beet.bignum\r\n  ownerRate: number\r\n  master: beet.COption<web3.PublicKey>\r\n  masterRate: beet.COption<number>\r\n}\r\n/**\r\n * @category Instructions\r\n * @category CreateGuild\r\n * @category generated\r\n */\r\nexport const createGuildStruct = new beet.FixableBeetArgsStruct<\r\n  CreateGuildInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['guildTitle', beet.utf8String],\r\n    ['slot', beet.u64],\r\n    ['ownerRate', beet.u8],\r\n    ['master', beet.coption(beetSolana.publicKey)],\r\n    ['masterRate', beet.coption(beet.u8)],\r\n  ],\r\n  'CreateGuildInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _createGuild_ instruction\r\n *\r\n * @property [_writable_, **signer**] owner\r\n * @property [_writable_] guildAccount\r\n * @property [_writable_] pdaAccount\r\n * @property [_writable_] nftTableAccount\r\n * @property [_writable_] scholarTableAccount\r\n * @property [] lookupProgram\r\n * @property [] clock\r\n * @category Instructions\r\n * @category CreateGuild\r\n * @category generated\r\n */\r\nexport type CreateGuildInstructionAccounts = {\r\n  owner: web3.PublicKey\r\n  guildAccount: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  nftTableAccount: web3.PublicKey\r\n  scholarTableAccount: web3.PublicKey\r\n  lookupProgram: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const createGuildInstructionDiscriminator = [\r\n  163, 27, 97, 167, 132, 198, 53, 168,\r\n]\r\n\r\n/**\r\n * Creates a _CreateGuild_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category CreateGuild\r\n * @category generated\r\n */\r\nexport function createCreateGuildInstruction(\r\n  accounts: CreateGuildInstructionAccounts,\r\n  args: CreateGuildInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = createGuildStruct.serialize({\r\n    instructionDiscriminator: createGuildInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.owner,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.guildAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.nftTableAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.scholarTableAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.lookupProgram,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category CreateProfile\r\n * @category generated\r\n */\r\nexport type CreateProfileInstructionArgs = {\r\n  role: number\r\n  access: number\r\n}\r\n/**\r\n * @category Instructions\r\n * @category CreateProfile\r\n * @category generated\r\n */\r\nexport const createProfileStruct = new beet.BeetArgsStruct<\r\n  CreateProfileInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['role', beet.u8],\r\n    ['access', beet.u8],\r\n  ],\r\n  'CreateProfileInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _createProfile_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] userProfile\r\n * @property [] farmConfig\r\n * @property [] clock\r\n * @category Instructions\r\n * @category CreateProfile\r\n * @category generated\r\n */\r\nexport type CreateProfileInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const createProfileInstructionDiscriminator = [\r\n  225, 205, 234, 143, 17, 186, 50, 220,\r\n]\r\n\r\n/**\r\n * Creates a _CreateProfile_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category CreateProfile\r\n * @category generated\r\n */\r\nexport function createCreateProfileInstruction(\r\n  accounts: CreateProfileInstructionAccounts,\r\n  args: CreateProfileInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = createProfileStruct.serialize({\r\n    instructionDiscriminator: createProfileInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category DeactiveTable\r\n * @category generated\r\n */\r\nexport const deactiveTableStruct = new beet.BeetArgsStruct<{\r\n  instructionDiscriminator: number[] /* size: 8 */\r\n}>(\r\n  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],\r\n  'DeactiveTableInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _deactiveTable_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] lookupAccount\r\n * @property [_writable_] pdaAccount\r\n * @property [] lookupProgram\r\n * @property [] clock\r\n * @category Instructions\r\n * @category DeactiveTable\r\n * @category generated\r\n */\r\nexport type DeactiveTableInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  lookupAccount: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  lookupProgram: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const deactiveTableInstructionDiscriminator = [\r\n  145, 99, 175, 188, 124, 217, 141, 71,\r\n]\r\n\r\n/**\r\n * Creates a _DeactiveTable_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @category Instructions\r\n * @category DeactiveTable\r\n * @category generated\r\n */\r\nexport function createDeactiveTableInstruction(\r\n  accounts: DeactiveTableInstructionAccounts,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = deactiveTableStruct.serialize({\r\n    instructionDiscriminator: deactiveTableInstructionDiscriminator,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.lookupAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.lookupProgram,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category ExtendTable\r\n * @category generated\r\n */\r\nexport const extendTableStruct = new beet.BeetArgsStruct<{\r\n  instructionDiscriminator: number[] /* size: 8 */\r\n}>(\r\n  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],\r\n  'ExtendTableInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _extendTable_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] lookupAccount\r\n * @property [_writable_] pdaAccount\r\n * @property [] lookupProgram\r\n * @property [] clock\r\n * @category Instructions\r\n * @category ExtendTable\r\n * @category generated\r\n */\r\nexport type ExtendTableInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  lookupAccount: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  lookupProgram: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const extendTableInstructionDiscriminator = [\r\n  181, 129, 37, 152, 188, 164, 212, 75,\r\n]\r\n\r\n/**\r\n * Creates a _ExtendTable_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @category Instructions\r\n * @category ExtendTable\r\n * @category generated\r\n */\r\nexport function createExtendTableInstruction(\r\n  accounts: ExtendTableInstructionAccounts,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = extendTableStruct.serialize({\r\n    instructionDiscriminator: extendTableInstructionDiscriminator,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.lookupAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.lookupProgram,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category Free2play\r\n * @category generated\r\n */\r\nexport const free2playStruct = new beet.BeetArgsStruct<{\r\n  instructionDiscriminator: number[] /* size: 8 */\r\n}>(\r\n  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],\r\n  'Free2playInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _free2play_ instruction\r\n *\r\n * @property [_writable_, **signer**] authority\r\n * @property [] user\r\n * @property [_writable_] userProfile\r\n * @property [] farmConfig\r\n * @property [] clock\r\n * @category Instructions\r\n * @category Free2play\r\n * @category generated\r\n */\r\nexport type Free2playInstructionAccounts = {\r\n  authority: web3.PublicKey\r\n  user: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const free2playInstructionDiscriminator = [\r\n  14, 185, 90, 244, 62, 166, 71, 245,\r\n]\r\n\r\n/**\r\n * Creates a _Free2play_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @category Instructions\r\n * @category Free2play\r\n * @category generated\r\n */\r\nexport function createFree2playInstruction(\r\n  accounts: Free2playInstructionAccounts,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = free2playStruct.serialize({\r\n    instructionDiscriminator: free2playInstructionDiscriminator,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.authority,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as splToken from '@solana/spl-token'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category GuildClaimReward\r\n * @category generated\r\n */\r\nexport type GuildClaimRewardInstructionArgs = {\r\n  campaignTitle: string\r\n  guildTitle: string\r\n}\r\n/**\r\n * @category Instructions\r\n * @category GuildClaimReward\r\n * @category generated\r\n */\r\nexport const guildClaimRewardStruct = new beet.FixableBeetArgsStruct<\r\n  GuildClaimRewardInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['campaignTitle', beet.utf8String],\r\n    ['guildTitle', beet.utf8String],\r\n  ],\r\n  'GuildClaimRewardInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _guildClaimReward_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] master\r\n * @property [_writable_] userProfile\r\n * @property [_writable_] userToken\r\n * @property [_writable_] campaignActivity\r\n * @property [_writable_] campaignVault\r\n * @property [] guildAccount\r\n * @property [_writable_] guildAta\r\n * @property [] farmConfig\r\n * @property [_writable_] pdaAccount\r\n * @property [_writable_] dyfVault\r\n * @property [] clock\r\n * @category Instructions\r\n * @category GuildClaimReward\r\n * @category generated\r\n */\r\nexport type GuildClaimRewardInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  master: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  userToken: web3.PublicKey\r\n  campaignActivity: web3.PublicKey\r\n  campaignVault: web3.PublicKey\r\n  guildAccount: web3.PublicKey\r\n  guildAta: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  dyfVault: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  tokenProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const guildClaimRewardInstructionDiscriminator = [\r\n  151, 61, 18, 77, 172, 55, 161, 81,\r\n]\r\n\r\n/**\r\n * Creates a _GuildClaimReward_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category GuildClaimReward\r\n * @category generated\r\n */\r\nexport function createGuildClaimRewardInstruction(\r\n  accounts: GuildClaimRewardInstructionAccounts,\r\n  args: GuildClaimRewardInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = guildClaimRewardStruct.serialize({\r\n    instructionDiscriminator: guildClaimRewardInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.master,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignActivity,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignVault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.guildAccount,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.guildAta,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.dyfVault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category GuildGrantScholar\r\n * @category generated\r\n */\r\nexport type GuildGrantScholarInstructionArgs = {\r\n  guildTitle: string\r\n}\r\n/**\r\n * @category Instructions\r\n * @category GuildGrantScholar\r\n * @category generated\r\n */\r\nexport const guildGrantScholarStruct = new beet.FixableBeetArgsStruct<\r\n  GuildGrantScholarInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['guildTitle', beet.utf8String],\r\n  ],\r\n  'GuildGrantScholarInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _guildGrantScholar_ instruction\r\n *\r\n * @property [_writable_, **signer**] master\r\n * @property [] user\r\n * @property [_writable_] userProfile\r\n * @property [] guildAccount\r\n * @category Instructions\r\n * @category GuildGrantScholar\r\n * @category generated\r\n */\r\nexport type GuildGrantScholarInstructionAccounts = {\r\n  master: web3.PublicKey\r\n  user: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  guildAccount: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const guildGrantScholarInstructionDiscriminator = [\r\n  246, 74, 234, 202, 61, 146, 196, 35,\r\n]\r\n\r\n/**\r\n * Creates a _GuildGrantScholar_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category GuildGrantScholar\r\n * @category generated\r\n */\r\nexport function createGuildGrantScholarInstruction(\r\n  accounts: GuildGrantScholarInstructionAccounts,\r\n  args: GuildGrantScholarInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = guildGrantScholarStruct.serialize({\r\n    instructionDiscriminator: guildGrantScholarInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.master,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.guildAccount,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as splToken from '@solana/spl-token'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category GuildStakeNft\r\n * @category generated\r\n */\r\nexport type GuildStakeNftInstructionArgs = {\r\n  guildTitle: string\r\n  role: number\r\n}\r\n/**\r\n * @category Instructions\r\n * @category GuildStakeNft\r\n * @category generated\r\n */\r\nexport const guildStakeNftStruct = new beet.FixableBeetArgsStruct<\r\n  GuildStakeNftInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['guildTitle', beet.utf8String],\r\n    ['role', beet.u8],\r\n  ],\r\n  'GuildStakeNftInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _guildStakeNft_ instruction\r\n *\r\n * @property [_writable_, **signer**] master\r\n * @property [] guildAccount\r\n * @property [] user\r\n * @property [_writable_] userProfile\r\n * @property [_writable_] masterNft\r\n * @property [_writable_] nftTableAccount\r\n * @property [_writable_] scholarTableAccount\r\n * @property [_writable_] nftVault\r\n * @property [_writable_] farmConfig\r\n * @property [_writable_] pdaAccount\r\n * @property [_writable_] nftMint\r\n * @property [] nftMetadata\r\n * @property [] lookupProgram\r\n * @property [] clock\r\n * @category Instructions\r\n * @category GuildStakeNft\r\n * @category generated\r\n */\r\nexport type GuildStakeNftInstructionAccounts = {\r\n  master: web3.PublicKey\r\n  guildAccount: web3.PublicKey\r\n  user: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  masterNft: web3.PublicKey\r\n  nftTableAccount: web3.PublicKey\r\n  scholarTableAccount: web3.PublicKey\r\n  nftVault: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  nftMint: web3.PublicKey\r\n  nftMetadata: web3.PublicKey\r\n  lookupProgram: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  tokenProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const guildStakeNftInstructionDiscriminator = [\r\n  84, 239, 169, 71, 243, 35, 180, 158,\r\n]\r\n\r\n/**\r\n * Creates a _GuildStakeNft_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category GuildStakeNft\r\n * @category generated\r\n */\r\nexport function createGuildStakeNftInstruction(\r\n  accounts: GuildStakeNftInstructionAccounts,\r\n  args: GuildStakeNftInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = guildStakeNftStruct.serialize({\r\n    instructionDiscriminator: guildStakeNftInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.master,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.guildAccount,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.masterNft,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.nftTableAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.scholarTableAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.nftVault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.nftMint,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.nftMetadata,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.lookupProgram,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as splToken from '@solana/spl-token'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category GuildUnstakeNft\r\n * @category generated\r\n */\r\nexport type GuildUnstakeNftInstructionArgs = {\r\n  guildTitle: string\r\n}\r\n/**\r\n * @category Instructions\r\n * @category GuildUnstakeNft\r\n * @category generated\r\n */\r\nexport const guildUnstakeNftStruct = new beet.FixableBeetArgsStruct<\r\n  GuildUnstakeNftInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['guildTitle', beet.utf8String],\r\n  ],\r\n  'GuildUnstakeNftInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _guildUnstakeNft_ instruction\r\n *\r\n * @property [_writable_, **signer**] master\r\n * @property [] guildAccount\r\n * @property [] user\r\n * @property [_writable_] userProfile\r\n * @property [_writable_] masterNft\r\n * @property [_writable_] nftVault\r\n * @property [_writable_] farmConfig\r\n * @property [_writable_] pdaAccount\r\n * @property [_writable_] nftMint\r\n * @property [] clock\r\n * @category Instructions\r\n * @category GuildUnstakeNft\r\n * @category generated\r\n */\r\nexport type GuildUnstakeNftInstructionAccounts = {\r\n  master: web3.PublicKey\r\n  guildAccount: web3.PublicKey\r\n  user: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  masterNft: web3.PublicKey\r\n  nftVault: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  nftMint: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  tokenProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const guildUnstakeNftInstructionDiscriminator = [\r\n  131, 104, 220, 144, 180, 206, 25, 140,\r\n]\r\n\r\n/**\r\n * Creates a _GuildUnstakeNft_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category GuildUnstakeNft\r\n * @category generated\r\n */\r\nexport function createGuildUnstakeNftInstruction(\r\n  accounts: GuildUnstakeNftInstructionAccounts,\r\n  args: GuildUnstakeNftInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = guildUnstakeNftStruct.serialize({\r\n    instructionDiscriminator: guildUnstakeNftInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.master,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.guildAccount,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.masterNft,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.nftVault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.nftMint,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as splToken from '@solana/spl-token'\r\nimport * as web3 from '@solana/web3.js'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as beetSolana from '@metaplex-foundation/beet-solana'\r\n\r\n/**\r\n * @category Instructions\r\n * @category Initialize\r\n * @category generated\r\n */\r\nexport type InitializeInstructionArgs = {\r\n  rpcSigner: web3.PublicKey\r\n  adminSigner: web3.PublicKey\r\n  nftCreator: web3.PublicKey\r\n  stakingContract: web3.PublicKey\r\n  oracle: web3.PublicKey\r\n  snsFeed: web3.PublicKey\r\n  slot: beet.bignum\r\n}\r\n/**\r\n * @category Instructions\r\n * @category Initialize\r\n * @category generated\r\n */\r\nexport const initializeStruct = new beet.BeetArgsStruct<\r\n  InitializeInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['rpcSigner', beetSolana.publicKey],\r\n    ['adminSigner', beetSolana.publicKey],\r\n    ['nftCreator', beetSolana.publicKey],\r\n    ['stakingContract', beetSolana.publicKey],\r\n    ['oracle', beetSolana.publicKey],\r\n    ['snsFeed', beetSolana.publicKey],\r\n    ['slot', beet.u64],\r\n  ],\r\n  'InitializeInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _initialize_ instruction\r\n *\r\n * @property [_writable_, **signer**] authority\r\n * @property [_writable_] farmConfig\r\n * @property [_writable_] dyfVault\r\n * @property [] mint\r\n * @property [_writable_] pdaAccount\r\n * @property [_writable_] campaignTableAccount\r\n * @property [] lookupProgram\r\n * @property [] clock\r\n * @category Instructions\r\n * @category Initialize\r\n * @category generated\r\n */\r\nexport type InitializeInstructionAccounts = {\r\n  authority: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  dyfVault: web3.PublicKey\r\n  mint: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  campaignTableAccount: web3.PublicKey\r\n  lookupProgram: web3.PublicKey\r\n  tokenProgram?: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const initializeInstructionDiscriminator = [\r\n  175, 175, 109, 31, 13, 152, 155, 237,\r\n]\r\n\r\n/**\r\n * Creates a _Initialize_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category Initialize\r\n * @category generated\r\n */\r\nexport function createInitializeInstruction(\r\n  accounts: InitializeInstructionAccounts,\r\n  args: InitializeInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = initializeStruct.serialize({\r\n    instructionDiscriminator: initializeInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.authority,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.dyfVault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.mint,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignTableAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.lookupProgram,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category RevokeScholar\r\n * @category generated\r\n */\r\nexport type RevokeScholarInstructionArgs = {\r\n  guildTitle: string\r\n  newScholarSlot: beet.bignum\r\n}\r\n/**\r\n * @category Instructions\r\n * @category RevokeScholar\r\n * @category generated\r\n */\r\nexport const revokeScholarStruct = new beet.FixableBeetArgsStruct<\r\n  RevokeScholarInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['guildTitle', beet.utf8String],\r\n    ['newScholarSlot', beet.u64],\r\n  ],\r\n  'RevokeScholarInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _revokeScholar_ instruction\r\n *\r\n * @property [_writable_, **signer**] master\r\n * @property [] user\r\n * @property [_writable_] userProfile\r\n * @property [_writable_] guildAccount\r\n * @property [_writable_] oldScholarTable\r\n * @property [_writable_] newScholarTable\r\n * @property [_writable_] pdaAccount\r\n * @property [] lookupProgram\r\n * @property [] clock\r\n * @category Instructions\r\n * @category RevokeScholar\r\n * @category generated\r\n */\r\nexport type RevokeScholarInstructionAccounts = {\r\n  master: web3.PublicKey\r\n  user: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  guildAccount: web3.PublicKey\r\n  oldScholarTable: web3.PublicKey\r\n  newScholarTable: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  lookupProgram: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const revokeScholarInstructionDiscriminator = [\r\n  47, 197, 48, 149, 14, 68, 39, 200,\r\n]\r\n\r\n/**\r\n * Creates a _RevokeScholar_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category RevokeScholar\r\n * @category generated\r\n */\r\nexport function createRevokeScholarInstruction(\r\n  accounts: RevokeScholarInstructionAccounts,\r\n  args: RevokeScholarInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = revokeScholarStruct.serialize({\r\n    instructionDiscriminator: revokeScholarInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.master,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.guildAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.oldScholarTable,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.newScholarTable,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.lookupProgram,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category RpcCloseCampaign\r\n * @category generated\r\n */\r\nexport const rpcCloseCampaignStruct = new beet.BeetArgsStruct<{\r\n  instructionDiscriminator: number[] /* size: 8 */\r\n}>(\r\n  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],\r\n  'RpcCloseCampaignInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _rpcCloseCampaign_ instruction\r\n *\r\n * @property [_writable_, **signer**] authority\r\n * @property [_writable_] rentOwner\r\n * @property [_writable_] campaign\r\n * @property [] farmConfig\r\n * @property [] clock\r\n * @category Instructions\r\n * @category RpcCloseCampaign\r\n * @category generated\r\n */\r\nexport type RpcCloseCampaignInstructionAccounts = {\r\n  authority: web3.PublicKey\r\n  rentOwner: web3.PublicKey\r\n  campaign: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const rpcCloseCampaignInstructionDiscriminator = [\r\n  67, 33, 43, 114, 123, 198, 81, 235,\r\n]\r\n\r\n/**\r\n * Creates a _RpcCloseCampaign_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @category Instructions\r\n * @category RpcCloseCampaign\r\n * @category generated\r\n */\r\nexport function createRpcCloseCampaignInstruction(\r\n  accounts: RpcCloseCampaignInstructionAccounts,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = rpcCloseCampaignStruct.serialize({\r\n    instructionDiscriminator: rpcCloseCampaignInstructionDiscriminator,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.authority,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.rentOwner,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaign,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category RpcClosePhrase\r\n * @category generated\r\n */\r\nexport const rpcClosePhraseStruct = new beet.BeetArgsStruct<{\r\n  instructionDiscriminator: number[] /* size: 8 */\r\n}>(\r\n  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],\r\n  'RpcClosePhraseInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _rpcClosePhrase_ instruction\r\n *\r\n * @property [_writable_, **signer**] authority\r\n * @property [_writable_] rentOwner\r\n * @property [_writable_] phrase\r\n * @property [] farmConfig\r\n * @property [] clock\r\n * @category Instructions\r\n * @category RpcClosePhrase\r\n * @category generated\r\n */\r\nexport type RpcClosePhraseInstructionAccounts = {\r\n  authority: web3.PublicKey\r\n  rentOwner: web3.PublicKey\r\n  phrase: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const rpcClosePhraseInstructionDiscriminator = [\r\n  227, 100, 252, 19, 112, 191, 162, 85,\r\n]\r\n\r\n/**\r\n * Creates a _RpcClosePhrase_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @category Instructions\r\n * @category RpcClosePhrase\r\n * @category generated\r\n */\r\nexport function createRpcClosePhraseInstruction(\r\n  accounts: RpcClosePhraseInstructionAccounts,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = rpcClosePhraseStruct.serialize({\r\n    instructionDiscriminator: rpcClosePhraseInstructionDiscriminator,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.authority,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.rentOwner,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.phrase,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category RpcCloseValidate\r\n * @category generated\r\n */\r\nexport const rpcCloseValidateStruct = new beet.BeetArgsStruct<{\r\n  instructionDiscriminator: number[] /* size: 8 */\r\n}>(\r\n  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],\r\n  'RpcCloseValidateInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _rpcCloseValidate_ instruction\r\n *\r\n * @property [_writable_, **signer**] authority\r\n * @property [_writable_] rentOwner\r\n * @property [_writable_] validate\r\n * @property [] farmConfig\r\n * @property [] clock\r\n * @category Instructions\r\n * @category RpcCloseValidate\r\n * @category generated\r\n */\r\nexport type RpcCloseValidateInstructionAccounts = {\r\n  authority: web3.PublicKey\r\n  rentOwner: web3.PublicKey\r\n  validate: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const rpcCloseValidateInstructionDiscriminator = [\r\n  57, 139, 225, 164, 199, 188, 164, 117,\r\n]\r\n\r\n/**\r\n * Creates a _RpcCloseValidate_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @category Instructions\r\n * @category RpcCloseValidate\r\n * @category generated\r\n */\r\nexport function createRpcCloseValidateInstruction(\r\n  accounts: RpcCloseValidateInstructionAccounts,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = rpcCloseValidateStruct.serialize({\r\n    instructionDiscriminator: rpcCloseValidateInstructionDiscriminator,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.authority,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.rentOwner,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.validate,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category RpcPermit\r\n * @category generated\r\n */\r\nexport type RpcPermitInstructionArgs = {\r\n  status: boolean\r\n  role: number\r\n}\r\n/**\r\n * @category Instructions\r\n * @category RpcPermit\r\n * @category generated\r\n */\r\nexport const rpcPermitStruct = new beet.BeetArgsStruct<\r\n  RpcPermitInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['status', beet.bool],\r\n    ['role', beet.u8],\r\n  ],\r\n  'RpcPermitInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _rpcPermit_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [] authority\r\n * @property [_writable_] profile\r\n * @category Instructions\r\n * @category RpcPermit\r\n * @category generated\r\n */\r\nexport type RpcPermitInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  authority: web3.PublicKey\r\n  profile: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const rpcPermitInstructionDiscriminator = [\r\n  92, 83, 224, 31, 112, 83, 197, 55,\r\n]\r\n\r\n/**\r\n * Creates a _RpcPermit_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category RpcPermit\r\n * @category generated\r\n */\r\nexport function createRpcPermitInstruction(\r\n  accounts: RpcPermitInstructionAccounts,\r\n  args: RpcPermitInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = rpcPermitStruct.serialize({\r\n    instructionDiscriminator: rpcPermitInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.authority,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.profile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category RpcSubmitPhrase\r\n * @category generated\r\n */\r\nexport type RpcSubmitPhraseInstructionArgs = {\r\n  campaignTitle: string\r\n  offchainRef: string\r\n  offchainType: number\r\n  kind: number\r\n}\r\n/**\r\n * @category Instructions\r\n * @category RpcSubmitPhrase\r\n * @category generated\r\n */\r\nexport const rpcSubmitPhraseStruct = new beet.FixableBeetArgsStruct<\r\n  RpcSubmitPhraseInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['campaignTitle', beet.utf8String],\r\n    ['offchainRef', beet.utf8String],\r\n    ['offchainType', beet.u8],\r\n    ['kind', beet.u8],\r\n  ],\r\n  'RpcSubmitPhraseInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _rpcSubmitPhrase_ instruction\r\n *\r\n * @property [_writable_, **signer**] authority\r\n * @property [] user\r\n * @property [_writable_] phraseAccount\r\n * @property [_writable_] userProfile\r\n * @property [_writable_] campaignActivity\r\n * @property [_writable_] campaignAccount\r\n * @property [] farmConfig\r\n * @property [] clock\r\n * @category Instructions\r\n * @category RpcSubmitPhrase\r\n * @category generated\r\n */\r\nexport type RpcSubmitPhraseInstructionAccounts = {\r\n  authority: web3.PublicKey\r\n  user: web3.PublicKey\r\n  phraseAccount: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  campaignActivity: web3.PublicKey\r\n  campaignAccount: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const rpcSubmitPhraseInstructionDiscriminator = [\r\n  163, 108, 108, 237, 170, 235, 190, 83,\r\n]\r\n\r\n/**\r\n * Creates a _RpcSubmitPhrase_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category RpcSubmitPhrase\r\n * @category generated\r\n */\r\nexport function createRpcSubmitPhraseInstruction(\r\n  accounts: RpcSubmitPhraseInstructionAccounts,\r\n  args: RpcSubmitPhraseInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = rpcSubmitPhraseStruct.serialize({\r\n    instructionDiscriminator: rpcSubmitPhraseInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.authority,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.phraseAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignActivity,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category RpcValidatePhrase\r\n * @category generated\r\n */\r\nexport type RpcValidatePhraseInstructionArgs = {\r\n  campaignTitle: string\r\n  offchainRef: string\r\n  confident: number\r\n  status: boolean\r\n}\r\n/**\r\n * @category Instructions\r\n * @category RpcValidatePhrase\r\n * @category generated\r\n */\r\nexport const rpcValidatePhraseStruct = new beet.FixableBeetArgsStruct<\r\n  RpcValidatePhraseInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['campaignTitle', beet.utf8String],\r\n    ['offchainRef', beet.utf8String],\r\n    ['confident', beet.u8],\r\n    ['status', beet.bool],\r\n  ],\r\n  'RpcValidatePhraseInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _rpcValidatePhrase_ instruction\r\n *\r\n * @property [_writable_, **signer**] authority\r\n * @property [] user\r\n * @property [_writable_] phraseAccount\r\n * @property [_writable_] userProfile\r\n * @property [_writable_] campaignActivity\r\n * @property [_writable_] builderActivity\r\n * @property [_writable_] logAccount\r\n * @property [_writable_] campaignAccount\r\n * @property [] farmConfig\r\n * @property [] clock\r\n * @category Instructions\r\n * @category RpcValidatePhrase\r\n * @category generated\r\n */\r\nexport type RpcValidatePhraseInstructionAccounts = {\r\n  authority: web3.PublicKey\r\n  user: web3.PublicKey\r\n  phraseAccount: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  campaignActivity: web3.PublicKey\r\n  builderActivity: web3.PublicKey\r\n  logAccount: web3.PublicKey\r\n  campaignAccount: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const rpcValidatePhraseInstructionDiscriminator = [\r\n  161, 172, 106, 49, 80, 167, 50, 200,\r\n]\r\n\r\n/**\r\n * Creates a _RpcValidatePhrase_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category RpcValidatePhrase\r\n * @category generated\r\n */\r\nexport function createRpcValidatePhraseInstruction(\r\n  accounts: RpcValidatePhraseInstructionAccounts,\r\n  args: RpcValidatePhraseInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = rpcValidatePhraseStruct.serialize({\r\n    instructionDiscriminator: rpcValidatePhraseInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.authority,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.phraseAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignActivity,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.builderActivity,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.logAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category ScholarSign\r\n * @category generated\r\n */\r\nexport type ScholarSignInstructionArgs = {\r\n  guildTitle: string\r\n}\r\n/**\r\n * @category Instructions\r\n * @category ScholarSign\r\n * @category generated\r\n */\r\nexport const scholarSignStruct = new beet.FixableBeetArgsStruct<\r\n  ScholarSignInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['guildTitle', beet.utf8String],\r\n  ],\r\n  'ScholarSignInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _scholarSign_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [] admin\r\n * @property [_writable_] userProfile\r\n * @property [] guildAccount\r\n * @property [_writable_] pdaAccount\r\n * @category Instructions\r\n * @category ScholarSign\r\n * @category generated\r\n */\r\nexport type ScholarSignInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  admin: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  guildAccount: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const scholarSignInstructionDiscriminator = [\r\n  124, 192, 76, 227, 147, 194, 65, 121,\r\n]\r\n\r\n/**\r\n * Creates a _ScholarSign_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category ScholarSign\r\n * @category generated\r\n */\r\nexport function createScholarSignInstruction(\r\n  accounts: ScholarSignInstructionAccounts,\r\n  args: ScholarSignInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = scholarSignStruct.serialize({\r\n    instructionDiscriminator: scholarSignInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.admin,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.guildAccount,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as splToken from '@solana/spl-token'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category StakeCampaign\r\n * @category generated\r\n */\r\nexport type StakeCampaignInstructionArgs = {\r\n  campaignTitle: string\r\n  amount: beet.bignum\r\n}\r\n/**\r\n * @category Instructions\r\n * @category StakeCampaign\r\n * @category generated\r\n */\r\nexport const stakeCampaignStruct = new beet.FixableBeetArgsStruct<\r\n  StakeCampaignInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['campaignTitle', beet.utf8String],\r\n    ['amount', beet.u64],\r\n  ],\r\n  'StakeCampaignInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _stakeCampaign_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] userProfile\r\n * @property [_writable_] campaignActivity\r\n * @property [_writable_] userToken\r\n * @property [_writable_] campaignAccount\r\n * @property [_writable_] campaignVault\r\n * @property [] farmConfig\r\n * @property [] clock\r\n * @category Instructions\r\n * @category StakeCampaign\r\n * @category generated\r\n */\r\nexport type StakeCampaignInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  campaignActivity: web3.PublicKey\r\n  userToken: web3.PublicKey\r\n  campaignAccount: web3.PublicKey\r\n  campaignVault: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  tokenProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const stakeCampaignInstructionDiscriminator = [\r\n  147, 38, 195, 247, 115, 100, 125, 35,\r\n]\r\n\r\n/**\r\n * Creates a _StakeCampaign_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category StakeCampaign\r\n * @category generated\r\n */\r\nexport function createStakeCampaignInstruction(\r\n  accounts: StakeCampaignInstructionAccounts,\r\n  args: StakeCampaignInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = stakeCampaignStruct.serialize({\r\n    instructionDiscriminator: stakeCampaignInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignActivity,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignVault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as splToken from '@solana/spl-token'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category StakeNft\r\n * @category generated\r\n */\r\nexport const stakeNftStruct = new beet.BeetArgsStruct<{\r\n  instructionDiscriminator: number[] /* size: 8 */\r\n}>(\r\n  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],\r\n  'StakeNftInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _stakeNft_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] userProfile\r\n * @property [_writable_] userNft\r\n * @property [_writable_] nftVault\r\n * @property [_writable_] farmConfig\r\n * @property [_writable_] pdaAccount\r\n * @property [_writable_] nftMint\r\n * @property [] nftMetadata\r\n * @property [] clock\r\n * @category Instructions\r\n * @category StakeNft\r\n * @category generated\r\n */\r\nexport type StakeNftInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  userNft: web3.PublicKey\r\n  nftVault: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  nftMint: web3.PublicKey\r\n  nftMetadata: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  tokenProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const stakeNftInstructionDiscriminator = [\r\n  38, 27, 66, 46, 69, 65, 151, 219,\r\n]\r\n\r\n/**\r\n * Creates a _StakeNft_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @category Instructions\r\n * @category StakeNft\r\n * @category generated\r\n */\r\nexport function createStakeNftInstruction(\r\n  accounts: StakeNftInstructionAccounts,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = stakeNftStruct.serialize({\r\n    instructionDiscriminator: stakeNftInstructionDiscriminator,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userNft,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.nftVault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.nftMint,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.nftMetadata,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category SubmitPhrase\r\n * @category generated\r\n */\r\nexport type SubmitPhraseInstructionArgs = {\r\n  campaignTitle: string\r\n  offchainRef: string\r\n  offchainType: number\r\n  kind: number\r\n}\r\n/**\r\n * @category Instructions\r\n * @category SubmitPhrase\r\n * @category generated\r\n */\r\nexport const submitPhraseStruct = new beet.FixableBeetArgsStruct<\r\n  SubmitPhraseInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['campaignTitle', beet.utf8String],\r\n    ['offchainRef', beet.utf8String],\r\n    ['offchainType', beet.u8],\r\n    ['kind', beet.u8],\r\n  ],\r\n  'SubmitPhraseInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _submitPhrase_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] phraseAccount\r\n * @property [_writable_] userProfile\r\n * @property [_writable_] campaignActivity\r\n * @property [_writable_] campaignAccount\r\n * @property [] farmConfig\r\n * @property [] clock\r\n * @category Instructions\r\n * @category SubmitPhrase\r\n * @category generated\r\n */\r\nexport type SubmitPhraseInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  phraseAccount: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  campaignActivity: web3.PublicKey\r\n  campaignAccount: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const submitPhraseInstructionDiscriminator = [\r\n  201, 89, 230, 171, 244, 100, 6, 127,\r\n]\r\n\r\n/**\r\n * Creates a _SubmitPhrase_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category SubmitPhrase\r\n * @category generated\r\n */\r\nexport function createSubmitPhraseInstruction(\r\n  accounts: SubmitPhraseInstructionAccounts,\r\n  args: SubmitPhraseInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = submitPhraseStruct.serialize({\r\n    instructionDiscriminator: submitPhraseInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.phraseAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignActivity,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as splToken from '@solana/spl-token'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category UnstakeCampaign\r\n * @category generated\r\n */\r\nexport type UnstakeCampaignInstructionArgs = {\r\n  campaignTitle: string\r\n}\r\n/**\r\n * @category Instructions\r\n * @category UnstakeCampaign\r\n * @category generated\r\n */\r\nexport const unstakeCampaignStruct = new beet.FixableBeetArgsStruct<\r\n  UnstakeCampaignInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['campaignTitle', beet.utf8String],\r\n  ],\r\n  'UnstakeCampaignInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _unstakeCampaign_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] userProfile\r\n * @property [_writable_] userToken\r\n * @property [_writable_] campaignAccount\r\n * @property [_writable_] campaignVault\r\n * @property [_writable_] dyfVault\r\n * @property [_writable_] campaignActivity\r\n * @property [] farmConfig\r\n * @property [_writable_] pdaAccount\r\n * @property [] clock\r\n * @category Instructions\r\n * @category UnstakeCampaign\r\n * @category generated\r\n */\r\nexport type UnstakeCampaignInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  userToken: web3.PublicKey\r\n  campaignAccount: web3.PublicKey\r\n  campaignVault: web3.PublicKey\r\n  dyfVault: web3.PublicKey\r\n  campaignActivity: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  tokenProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const unstakeCampaignInstructionDiscriminator = [\r\n  208, 3, 38, 137, 80, 29, 12, 75,\r\n]\r\n\r\n/**\r\n * Creates a _UnstakeCampaign_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category UnstakeCampaign\r\n * @category generated\r\n */\r\nexport function createUnstakeCampaignInstruction(\r\n  accounts: UnstakeCampaignInstructionAccounts,\r\n  args: UnstakeCampaignInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = unstakeCampaignStruct.serialize({\r\n    instructionDiscriminator: unstakeCampaignInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignVault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.dyfVault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignActivity,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as splToken from '@solana/spl-token'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category UnstakeNft\r\n * @category generated\r\n */\r\nexport const unstakeNftStruct = new beet.BeetArgsStruct<{\r\n  instructionDiscriminator: number[] /* size: 8 */\r\n}>(\r\n  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],\r\n  'UnstakeNftInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _unstakeNft_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] userProfile\r\n * @property [_writable_] userNft\r\n * @property [_writable_] nftVault\r\n * @property [_writable_] farmConfig\r\n * @property [_writable_] pdaAccount\r\n * @property [] nftMint\r\n * @property [] clock\r\n * @category Instructions\r\n * @category UnstakeNft\r\n * @category generated\r\n */\r\nexport type UnstakeNftInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  userNft: web3.PublicKey\r\n  nftVault: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  nftMint: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  tokenProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const unstakeNftInstructionDiscriminator = [\r\n  17, 182, 24, 211, 101, 138, 50, 163,\r\n]\r\n\r\n/**\r\n * Creates a _UnstakeNft_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @category Instructions\r\n * @category UnstakeNft\r\n * @category generated\r\n */\r\nexport function createUnstakeNftInstruction(\r\n  accounts: UnstakeNftInstructionAccounts,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = unstakeNftStruct.serialize({\r\n    instructionDiscriminator: unstakeNftInstructionDiscriminator,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userNft,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.nftVault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.nftMint,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category UpdateCampaign\r\n * @category generated\r\n */\r\nexport type UpdateCampaignInstructionArgs = {\r\n  campaignTitle: string\r\n  open: beet.bignum\r\n  close: beet.bignum\r\n  expire: beet.bignum\r\n}\r\n/**\r\n * @category Instructions\r\n * @category UpdateCampaign\r\n * @category generated\r\n */\r\nexport const updateCampaignStruct = new beet.FixableBeetArgsStruct<\r\n  UpdateCampaignInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['campaignTitle', beet.utf8String],\r\n    ['open', beet.u64],\r\n    ['close', beet.u64],\r\n    ['expire', beet.u64],\r\n  ],\r\n  'UpdateCampaignInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _updateCampaign_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] campaignAccount\r\n * @property [] farmConfig\r\n * @category Instructions\r\n * @category UpdateCampaign\r\n * @category generated\r\n */\r\nexport type UpdateCampaignInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  campaignAccount: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const updateCampaignInstructionDiscriminator = [\r\n  235, 31, 39, 49, 121, 173, 19, 92,\r\n]\r\n\r\n/**\r\n * Creates a _UpdateCampaign_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category UpdateCampaign\r\n * @category generated\r\n */\r\nexport function createUpdateCampaignInstruction(\r\n  accounts: UpdateCampaignInstructionAccounts,\r\n  args: UpdateCampaignInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = updateCampaignStruct.serialize({\r\n    instructionDiscriminator: updateCampaignInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category ValidatePhrase\r\n * @category generated\r\n */\r\nexport type ValidatePhraseInstructionArgs = {\r\n  campaignTitle: string\r\n  offchainRef: string\r\n  confident: number\r\n  status: boolean\r\n}\r\n/**\r\n * @category Instructions\r\n * @category ValidatePhrase\r\n * @category generated\r\n */\r\nexport const validatePhraseStruct = new beet.FixableBeetArgsStruct<\r\n  ValidatePhraseInstructionArgs & {\r\n    instructionDiscriminator: number[] /* size: 8 */\r\n  }\r\n>(\r\n  [\r\n    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\r\n    ['campaignTitle', beet.utf8String],\r\n    ['offchainRef', beet.utf8String],\r\n    ['confident', beet.u8],\r\n    ['status', beet.bool],\r\n  ],\r\n  'ValidatePhraseInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _validatePhrase_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] phraseAccount\r\n * @property [_writable_] userProfile\r\n * @property [_writable_] campaignActivity\r\n * @property [_writable_] builderActivity\r\n * @property [_writable_] logAccount\r\n * @property [_writable_] campaignAccount\r\n * @property [] farmConfig\r\n * @property [] clock\r\n * @category Instructions\r\n * @category ValidatePhrase\r\n * @category generated\r\n */\r\nexport type ValidatePhraseInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  phraseAccount: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  campaignActivity: web3.PublicKey\r\n  builderActivity: web3.PublicKey\r\n  logAccount: web3.PublicKey\r\n  campaignAccount: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const validatePhraseInstructionDiscriminator = [\r\n  131, 138, 249, 228, 211, 54, 251, 44,\r\n]\r\n\r\n/**\r\n * Creates a _ValidatePhrase_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @param args to provide as instruction data to the program\r\n *\r\n * @category Instructions\r\n * @category ValidatePhrase\r\n * @category generated\r\n */\r\nexport function createValidatePhraseInstruction(\r\n  accounts: ValidatePhraseInstructionAccounts,\r\n  args: ValidatePhraseInstructionArgs,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = validatePhraseStruct.serialize({\r\n    instructionDiscriminator: validatePhraseInstructionDiscriminator,\r\n    ...args,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.phraseAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignActivity,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.builderActivity,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.logAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.campaignAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","/**\r\n * This code was GENERATED using the solita package.\r\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\r\n *\r\n * See: https://github.com/metaplex-foundation/solita\r\n */\r\n\r\nimport * as splToken from '@solana/spl-token'\r\nimport * as beet from '@metaplex-foundation/beet'\r\nimport * as web3 from '@solana/web3.js'\r\n\r\n/**\r\n * @category Instructions\r\n * @category VerifyPreStakedNft\r\n * @category generated\r\n */\r\nexport const verifyPreStakedNftStruct = new beet.BeetArgsStruct<{\r\n  instructionDiscriminator: number[] /* size: 8 */\r\n}>(\r\n  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],\r\n  'VerifyPreStakedNftInstructionArgs'\r\n)\r\n/**\r\n * Accounts required by the _verifyPreStakedNft_ instruction\r\n *\r\n * @property [_writable_, **signer**] user\r\n * @property [_writable_] userProfile\r\n * @property [] userNftAccount\r\n * @property [] stakeAccount\r\n * @property [] farmConfig\r\n * @property [_writable_] pdaAccount\r\n * @property [_writable_] nftMint\r\n * @property [] nftMetadata\r\n * @property [] clock\r\n * @category Instructions\r\n * @category VerifyPreStakedNft\r\n * @category generated\r\n */\r\nexport type VerifyPreStakedNftInstructionAccounts = {\r\n  user: web3.PublicKey\r\n  userProfile: web3.PublicKey\r\n  userNftAccount: web3.PublicKey\r\n  stakeAccount: web3.PublicKey\r\n  farmConfig: web3.PublicKey\r\n  pdaAccount: web3.PublicKey\r\n  nftMint: web3.PublicKey\r\n  nftMetadata: web3.PublicKey\r\n  systemProgram?: web3.PublicKey\r\n  tokenProgram?: web3.PublicKey\r\n  clock: web3.PublicKey\r\n  rent?: web3.PublicKey\r\n  anchorRemainingAccounts?: web3.AccountMeta[]\r\n}\r\n\r\nexport const verifyPreStakedNftInstructionDiscriminator = [\r\n  147, 217, 55, 199, 25, 110, 241, 138,\r\n]\r\n\r\n/**\r\n * Creates a _VerifyPreStakedNft_ instruction.\r\n *\r\n * @param accounts that will be accessed while the instruction is processed\r\n * @category Instructions\r\n * @category VerifyPreStakedNft\r\n * @category generated\r\n */\r\nexport function createVerifyPreStakedNftInstruction(\r\n  accounts: VerifyPreStakedNftInstructionAccounts,\r\n  programId = new web3.PublicKey('undefined')\r\n) {\r\n  const [data] = verifyPreStakedNftStruct.serialize({\r\n    instructionDiscriminator: verifyPreStakedNftInstructionDiscriminator,\r\n  })\r\n  const keys: web3.AccountMeta[] = [\r\n    {\r\n      pubkey: accounts.user,\r\n      isWritable: true,\r\n      isSigner: true,\r\n    },\r\n    {\r\n      pubkey: accounts.userProfile,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.userNftAccount,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.stakeAccount,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.farmConfig,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.pdaAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.nftMint,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.nftMetadata,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.clock,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n  ]\r\n\r\n  if (accounts.anchorRemainingAccounts != null) {\r\n    for (const acc of accounts.anchorRemainingAccounts) {\r\n      keys.push(acc)\r\n    }\r\n  }\r\n\r\n  const ix = new web3.TransactionInstruction({\r\n    programId,\r\n    keys,\r\n    data,\r\n  })\r\n  return ix\r\n}\r\n","import { PublicKey } from '@solana/web3.js'\r\nexport * from './accounts'\r\nexport * from './errors'\r\nexport * from './instructions'\r\nexport * from './types'\r\n\r\n/**\r\n * Program address\r\n *\r\n * @category constants\r\n * @category generated\r\n */\r\nexport const PROGRAM_ADDRESS = 'DcCixxuPFZ8xZzqHWwrY4MZUsPN14EoUKt15gaEbyRAs'\r\n\r\n/**\r\n * Program public key\r\n *\r\n * @category constants\r\n * @category generated\r\n */\r\nexport const PROGRAM_ID = new PublicKey(PROGRAM_ADDRESS)\r\n","import { Connection, PublicKey, Signer, SYSVAR_CLOCK_PUBKEY, TransactionInstruction } from '@solana/web3.js'\nimport * as splToken from '@solana/spl-token'\nimport { getAssociateTokenAccount, SNS_ADDRESS } from '../utils'\nimport { createAirdropInstruction, PROGRAM_ID } from '../dyfarm'\n\nexport const createAirdropSNSInstructions = async (publicKey: PublicKey, connection: Connection) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const instructions: TransactionInstruction[] = []\n  const signers: Signer[] = []\n\n  const [pdaAccount] = PublicKey.findProgramAddressSync([Buffer.from('DYF')], PROGRAM_ID)\n  const [dyfVault] = PublicKey.findProgramAddressSync([pdaAccount.toBuffer(), Buffer.from('DYF:VAULT')], PROGRAM_ID)\n  let _tokenBalance = null\n  const dyfVaultTokenAccount = await connection.getParsedAccountInfo(dyfVault)\n  if (dyfVaultTokenAccount.value) {\n    // @ts-ignore\n    _tokenBalance = dyfVaultTokenAccount.value.data.parsed.info.tokenAmount.uiAmount\n  }\n  if (_tokenBalance === null || _tokenBalance < 100) {\n    throw new Error('The token vault is empty. Please contact the administrator.')\n  }\n\n  const userToken = getAssociateTokenAccount(new PublicKey(SNS_ADDRESS), publicKey)\n  const accountInfo = await connection.getAccountInfo(userToken)\n  if (accountInfo == null) {\n    instructions.push(\n      splToken.createAssociatedTokenAccountInstruction(\n        publicKey,\n        userToken,\n        publicKey,\n        new PublicKey(SNS_ADDRESS),\n        splToken.TOKEN_PROGRAM_ID,\n        splToken.ASSOCIATED_TOKEN_PROGRAM_ID\n      )\n    )\n  }\n\n  instructions.push(\n    createAirdropInstruction(\n      {\n        authority: publicKey,\n        userToken,\n        tokenVault: dyfVault,\n        pdaAccount: pdaAccount,\n        clock: SYSVAR_CLOCK_PUBKEY\n      },\n      PROGRAM_ID\n    )\n  )\n\n  return { instructions, signers }\n}\n","import { LAMPORTS_PER_SOL } from '@solana/web3.js'\nimport axios from 'axios'\nimport BN from 'bn.js'\nimport {\n  ApiCampaignInfo,\n  ApiCampaignMeta,\n  SubmitOntologyArgs,\n  BuilderActivityInfo,\n  ValidatorActivityInfo,\n  ApiSubmissionInfo,\n  ApiValidationsInfo\n} from '../typings'\nimport { PHRASE_TYPE } from '../utils'\n\ninterface ApiResponse {\n  data: any\n}\n\nconst authKey = 'Basic c3luLWFwaTpmaW5keW91cm1lYW5pbmc='\nconst apiHost = 'https://dyf-dev.synesis.xyz'\n\nexport const submitOntology = async (ontology: SubmitOntologyArgs) => {\n  if (!apiHost)\n    return {\n      isSuccess: false,\n      data: 'NETWORK_ERROR',\n      submissionCount: 0\n    }\n\n  return axios\n    .post(\n      `${apiHost}/submit-ontology`,\n      [\n        {\n          ...ontology,\n          mock: false\n        }\n      ],\n      {\n        headers: { Authorization: authKey }\n      }\n    )\n    .then((response: ApiResponse) => {\n      if (Array.isArray(response.data) && response.data.length >= 2 && Array.isArray(response.data[1])) {\n        const submissionCount = response.data[0] as number\n        const ret = response.data[1][0] as string\n        if (ret.toLowerCase() === 'false') {\n          return {\n            isSuccess: false,\n            data: 'DUPLICATTION',\n            submissionCount\n          }\n        } else if (ret.toLowerCase() === 'true') {\n          return {\n            isSuccess: false,\n            data: 'CAP_LIMIT',\n            submissionCount\n          }\n        } else {\n          return {\n            isSuccess: true,\n            data: ret,\n            submissionCount\n          }\n        }\n      } else {\n        return {\n          isSuccess: false,\n          data: 'NETWORK_ERROR',\n          submissionCount: 0\n        }\n      }\n    })\n}\n\nexport const deleteOntology = async (canonical: string): Promise<boolean> => {\n  if (!apiHost) return false\n\n  return axios\n    .post(\n      `${apiHost}/delete-ontology`,\n      [\n        {\n          reference_id: canonical\n        }\n      ],\n      {\n        headers: { Authorization: authKey }\n      }\n    )\n    .then((response: ApiResponse) => {\n      if (response.data && Array.isArray(response.data) && response.data[0] !== 'false' && response.data[0] !== false) {\n        return true\n      } else {\n        return false\n      }\n    })\n}\n\nexport const checkWhitelist = async (wallet: string): Promise<string | null> => {\n  if (!apiHost) return null\n\n  return axios\n    .post(\n      `${apiHost}/check-whitelist`,\n      {\n        wallet\n      },\n      {\n        headers: { Authorization: authKey }\n      }\n    )\n    .then((response: ApiResponse) => {\n      if (response.data !== null && response.data !== 'null') {\n        return response.data as string\n      } else {\n        return null\n      }\n    })\n    .catch((error: any) => {\n      console.log(error)\n      return null\n    })\n}\n\nexport const addCampaignMeta = async (data: ApiCampaignMeta): Promise<boolean> => {\n  if (!apiHost) return false\n\n  return await axios\n    .post(`${apiHost}/add-campaign-meta`, data, {\n      headers: { Authorization: authKey }\n    })\n    .then((res) => {\n      if (res.data === true || res.data === 'true') return true\n      else return false\n    })\n}\n\nexport const delCampaignMeta = async (data: ApiCampaignMeta): Promise<boolean> => {\n  if (!apiHost) return false\n\n  return axios\n    .post(`${apiHost}/del-campaign-meta`, data, {\n      headers: { Authorization: authKey }\n    })\n    .then((res) => {\n      if (res.data === true || res.data === 'true') return true\n      else return false\n    })\n}\n\nexport const getAllCampaignsInfo = async (): Promise<ApiCampaignInfo[]> => {\n  if (!apiHost) return []\n\n  return axios\n    .get(`${apiHost}/all-campaigns-info`, {\n      headers: { Authorization: authKey }\n    })\n    .then((response: ApiResponse) => {\n      if (!!response.data && Array.isArray(response.data)) {\n        return response.data\n          .filter((campaignInfo) => campaignInfo.stake_status === true)\n          .map((campaignInfo) => {\n            return {\n              campaignTitle: campaignInfo.title,\n              tag: campaignInfo.campaign_type,\n              pubkey: campaignInfo.campaign_acct,\n              industry: campaignInfo.industry,\n              domain: campaignInfo.domain,\n              subject: campaignInfo.subject,\n              explain: campaignInfo.explain,\n              organizer: campaignInfo.organizer,\n              language: campaignInfo.language,\n              specific: campaignInfo.phrase_specific,\n              general: campaignInfo.phrase_general,\n              cause: campaignInfo.phrase_cause,\n              effect: campaignInfo.phrase_effect,\n              open: Math.round(Date.parse(String(campaignInfo.dapp_open).concat('.000Z')) / 1000),\n              close: Math.round(Date.parse(String(campaignInfo.dapp_close).concat('.000Z')) / 1000),\n              expire: Math.round(Date.parse(String(campaignInfo.dapp_expire).concat('.000Z')) / 1000),\n              minPhrase: campaignInfo.min_phrase,\n              minValidate: campaignInfo.min_validate,\n              rpuSpecific: new BN(campaignInfo.rpu_specific).divn(LAMPORTS_PER_SOL / 100).toNumber() / 100,\n              rpuGeneral: new BN(campaignInfo.rpu_general).divn(LAMPORTS_PER_SOL / 100).toNumber() / 100,\n              rpuCause: new BN(campaignInfo.rpu_cause).divn(LAMPORTS_PER_SOL / 100).toNumber() / 100,\n              rpuEffect: new BN(campaignInfo.rpu_effect).divn(LAMPORTS_PER_SOL / 100).toNumber() / 100,\n              rpuValidator: campaignInfo.rpu_validator,\n              majorityQuorum: campaignInfo.majority_quorum,\n              architect: campaignInfo.architect,\n              finish: campaignInfo.finish_status,\n              progress: campaignInfo.progress\n            }\n          })\n      } else {\n        return []\n      }\n    })\n    .catch((error: any) => {\n      console.log(error)\n      return []\n    })\n}\n\nexport const getCampaginMeta = async (dapp_title: string): Promise<ApiCampaignMeta | null> => {\n  if (!apiHost) return null\n\n  return axios\n    .post(\n      `${apiHost}/campaign-info`,\n      {\n        dapp_title\n      },\n      {\n        headers: { Authorization: authKey }\n      }\n    )\n    .then((response: ApiResponse) => {\n      if (!!response.data && Array.isArray(response.data)) {\n        return {\n          dapp_title: response.data[0].title,\n          architect: response.data[0].architect,\n          subject: response.data[0].subject,\n          explain: response.data[0].explain,\n          phrase_specific: response.data[0].phrase_specific,\n          phrase_general: response.data[0].phrase_general,\n          phrase_cause: response.data[0].phrase_cause,\n          phrase_effect: response.data[0].phrase_effect\n        }\n      } else {\n        return null\n      }\n    })\n    .catch((error: any) => {\n      console.log(error)\n      return null\n    })\n}\n\nexport const getSubmissionsInfo = async (campaign: string): Promise<ApiSubmissionInfo[]> => {\n  if (!apiHost) return []\n\n  return axios\n    .post(\n      `${apiHost}/submissions-info`,\n      {\n        wallet: campaign\n      },\n      {\n        headers: { Authorization: authKey }\n      }\n    )\n    .then((response: ApiResponse) => {\n      if (!!response.data && Array.isArray(response.data)) {\n        return response.data.map((submission) => {\n          return {\n            timestamp: Math.round(Date.parse(String(submission.timestamp).concat('.000Z')) / 1000),\n            kind: (Object.values(PHRASE_TYPE).find((row) => row.val === Number(submission.kind)) ?? PHRASE_TYPE.specific)['label'],\n            data: submission.data,\n            canonical: submission.reference_id,\n            builder: submission.builder,\n            submitted: submission.utterance ? true : false,\n            pubkey: submission.utterance ?? undefined,\n            finish: submission.finish,\n            correct: submission.correct,\n            incorrect: submission.incorrect\n          }\n        })\n      } else {\n        return []\n      }\n    })\n    .catch((error: any) => {\n      console.log(error)\n      return []\n    })\n}\n\nexport const getValidationsInfo = async (campaign: string): Promise<ApiValidationsInfo[]> => {\n  if (!apiHost) return []\n\n  return axios\n    .post(\n      `${apiHost}/validations-info`,\n      {\n        wallet: campaign\n      },\n      {\n        headers: { Authorization: authKey }\n      }\n    )\n    .then((response: ApiResponse) => {\n      if (!!response.data && Array.isArray(response.data)) {\n        return response.data.map((validation) => {\n          return {\n            timestamp: Math.round(Date.parse(String(validation.timestamp).concat('.000Z')) / 1000),\n            utterance: validation.utterance,\n            validator: validation.validator,\n            vote: validation.vote,\n            confidence: validation.vote_confidence,\n            pubkey: validation.validation\n          }\n        })\n      } else {\n        return []\n      }\n    })\n    .catch((error: any) => {\n      console.log(error)\n      return []\n    })\n}\n\nexport const getSubmissionsValidationsInfo = async (\n  campaign: string\n): Promise<{\n  submissions: ApiSubmissionInfo[]\n  validations: ApiValidationsInfo[]\n}> => {\n  if (!apiHost) return { submissions: [], validations: [] }\n\n  return axios\n    .post(\n      `${apiHost}/submissions-validations-info`,\n      {\n        wallet: campaign\n      },\n      {\n        headers: { Authorization: authKey }\n      }\n    )\n    .then((response: ApiResponse) => {\n      if (!!response.data && Array.isArray(response.data)) {\n        return {\n          submissions: response.data[0].map((submission: any) => {\n            return {\n              timestamp: Math.round(Date.parse(String(submission.timestamp).concat('.000Z')) / 1000),\n              kind: (Object.values(PHRASE_TYPE).find((row) => row.val === Number(submission.kind)) ?? PHRASE_TYPE.specific)['label'],\n              data: submission.data,\n              canonical: submission.reference_id,\n              builder: submission.builder,\n              submitted: submission.utterance ? true : false,\n              pubkey: submission.utterance ?? undefined,\n              finish: submission.finish,\n              correct: submission.correct,\n              incorrect: submission.incorrect\n            }\n          }),\n          validations: response.data[1].map((validation: any) => {\n            return {\n              timestamp: Math.round(Date.parse(String(validation.timestamp).concat('.000Z')) / 1000),\n              utterance: validation.utterance,\n              validator: validation.validator,\n              vote: validation.vote,\n              confidence: validation.vote_confidence,\n              pubkey: validation.validation\n            }\n          })\n        }\n      } else {\n        return { submissions: [], validations: [] }\n      }\n    })\n    .catch((error: any) => {\n      console.log(error)\n      return { submissions: [], validations: [] }\n    })\n}\n\nexport const getAllCampaignTitles = async (): Promise<string[]> => {\n  if (!apiHost) return []\n\n  return axios\n    .get(`${apiHost}/all-campaign-titles`, {\n      headers: { Authorization: authKey }\n    })\n    .then((response: ApiResponse) => {\n      if (!!response.data && Array.isArray(response.data)) {\n        return response.data as string[]\n      } else {\n        return []\n      }\n    })\n    .catch((error: any) => {\n      console.log(error)\n      return []\n    })\n}\n\nexport const getBuilderActivityInfo = async (wallet: string): Promise<BuilderActivityInfo | null> => {\n  if (!apiHost) return null\n\n  return axios\n    .post(\n      `${apiHost}/get-builder-activity-info`,\n      {\n        wallet\n      },\n      {\n        headers: { Authorization: authKey }\n      }\n    )\n    .then((response: ApiResponse) => {\n      if (response.data) {\n        return response.data as BuilderActivityInfo\n      } else {\n        return null\n      }\n    })\n    .catch((error: any) => {\n      console.log(error)\n      return null\n    })\n}\n\nexport const getValidatorActivityInfo = async (wallet: string): Promise<ValidatorActivityInfo | null> => {\n  if (!apiHost) return null\n\n  return axios\n    .post(\n      `${apiHost}/get-validator-activity-info`,\n      {\n        wallet\n      },\n      {\n        headers: { Authorization: authKey }\n      }\n    )\n    .then((response: ApiResponse) => {\n      if (response.data) {\n        return response.data as ValidatorActivityInfo\n      } else {\n        return null\n      }\n    })\n    .catch((error: any) => {\n      console.log(error)\n      return null\n    })\n}\n\nexport const getBuilderRecentSubmissions = async (pubkey: string, utc_offset: number): Promise<number> => {\n  if (!apiHost) return 0\n\n  return axios\n    .post(\n      `${apiHost}/get-builder-recent-submissions`,\n      {\n        pubkey,\n        utc_offset\n      },\n      {\n        headers: { Authorization: authKey }\n      }\n    )\n    .then((response: ApiResponse) => {\n      if (response.data && Array.isArray(response.data)) {\n        return response.data[0] as number\n      } else {\n        return 0\n      }\n    })\n    .catch((error: any) => {\n      console.log(error)\n      return 0\n    })\n}\n\nexport const getValidatorRecentValidations = async (pubkey: string, utc_offset: number): Promise<number> => {\n  if (!apiHost) return 0\n\n  return axios\n    .post(\n      `${apiHost}/get-validator-recent-submissions`,\n      {\n        pubkey,\n        utc_offset\n      },\n      {\n        headers: { Authorization: authKey }\n      }\n    )\n    .then((response: ApiResponse) => {\n      if (response.data) {\n        return response.data as number\n      } else {\n        return 0\n      }\n    })\n    .catch((error: any) => {\n      console.log(error)\n      return 0\n    })\n}\n","import axios from 'axios'\nimport { RpcBatchSubmissionResponse, RpcSubmissionsInfo, RpcValidationsInfo } from '../typings'\nimport { RPC_TXN_STATUS } from '../utils'\n\nconst rpcHost = 'https://dyf-rpc-dev.synesis.xyz/'\n\ninterface RpcApiResponse {\n  data: {\n    jsonrpc: string\n    result?: any\n    error?: any\n    id: number\n  }\n  status: number\n}\n\nexport const rpcRequestAuth = async (wallet: string): Promise<string | null> => {\n  if (!rpcHost) return null\n\n  return axios\n    .post(rpcHost, {\n      jsonrpc: '2.0',\n      method: 'requestAuth',\n      params: [wallet],\n      id: 1\n    })\n    .then((response: RpcApiResponse) => {\n      if (response.data.error) {\n        throw new Error(response.data.error.message)\n      }\n      if (response.status === 200 && response.data.result) {\n        return response.data.result as string\n      } else {\n        return null\n      }\n    })\n}\n\nexport const rpcVerifyAuth = async (wallet: string, signature: string): Promise<string | null> => {\n  if (!rpcHost) return null\n\n  return axios\n    .post(rpcHost, {\n      jsonrpc: '2.0',\n      method: 'verifyAuth',\n      params: [wallet, signature],\n      id: 1\n    })\n    .then((response: RpcApiResponse) => {\n      if (response.data.error) {\n        throw new Error(response.data.error.message)\n      }\n      if (response.status === 200 && response.data.result) {\n        return response.data.result as string\n      } else {\n        return null\n      }\n    })\n}\n\nexport const rpcSubmitPhrase = async (\n  token: string,\n  dyfarmContract: string,\n  campaignTitle: string,\n  wallet: string,\n  offchainReference: string,\n  offchainType: number,\n  kind: number,\n  id: number\n): Promise<string | null> => {\n  if (!rpcHost) return null\n\n  return axios\n    .post(rpcHost, {\n      jsonrpc: '2.0',\n      method: 'SubmitPhrase',\n      params: [token, dyfarmContract, campaignTitle, wallet, offchainReference, offchainType, kind],\n      id: id\n    })\n    .then((response: RpcApiResponse) => {\n      if (response.data.error) {\n        if (response.data.error?.code === -32602) {\n          throw new Error('Invalid Token. Please disconnect wallet and try again.')\n        } else {\n          throw new Error(response.data.error.message)\n        }\n      }\n      if (response.status === 200 && response.data.result) {\n        return response.data.result as string\n      } else {\n        return null\n      }\n    })\n}\n\nexport const rpcBatchSubmitPhrases = async (\n  token: string,\n  dyfarmContract: string,\n  campaignTitle: string,\n  wallet: string,\n  offchainReferences: string[],\n  offchainTypes: number[],\n  kinds: number[]\n): Promise<RpcBatchSubmissionResponse[]> => {\n  if (!rpcHost) throw new Error('API host is undefined.')\n  if (offchainReferences.length !== offchainTypes.length || offchainReferences.length !== kinds.length)\n    throw new Error('Something is wrong. Invalid data.')\n\n  const data = offchainReferences.map((offchainReference, idx) => {\n    return {\n      jsonrpc: '2.0',\n      method: 'SubmitPhrase',\n      params: [token, dyfarmContract, campaignTitle, wallet, offchainReference, offchainTypes[idx], kinds[idx]],\n      id: idx + 1\n    }\n  })\n\n  return axios.post(rpcHost, data).then((response: any) => {\n    return response.data.map((row: any) => {\n      if (row.error) {\n        if (row.error?.code === -32602) {\n          return {\n            isFailed: true,\n            error: 'Invalid Token. Please disconnect wallet and try again.'\n          }\n        } else {\n          return {\n            isFailed: true,\n            error: row.error.message\n          }\n        }\n      }\n      return {\n        isFailed: false,\n        uuid: row.result as string\n      }\n    })\n  })\n}\n\nexport const rpcValidatePhrase = async (\n  token: string,\n  dyfarmContract: string,\n  campaignTitle: string,\n  wallet: string,\n  builder: string,\n  phraseAccount: string,\n  canonical: string,\n  value: boolean,\n  confidence: number,\n  id: number\n): Promise<string | null> => {\n  if (!rpcHost) return null\n\n  return axios\n    .post(rpcHost, {\n      jsonrpc: '2.0',\n      method: 'ValidatePhrase',\n      params: [token, dyfarmContract, campaignTitle, wallet, builder, phraseAccount, canonical, confidence, value],\n      id: id\n    })\n    .then((response: RpcApiResponse) => {\n      if (response.data.error) {\n        if (response.data.error?.code === -32602) {\n          throw new Error('Invalid Token. Please disconnect wallet and try again.')\n        } else {\n          throw new Error(response.data.error.message)\n        }\n      }\n      if (response.status === 200 && response.data.result) {\n        return response.data.result as string\n      } else {\n        return null\n      }\n    })\n}\n\nexport const rpcBatchValidatePhrase = async (\n  token: string,\n  dyfarmContract: string,\n  campaignTitle: string,\n  wallet: string,\n  builders: string[],\n  phraseAccounts: string[],\n  canonicals: string[],\n  values: boolean[],\n  confidences: number[]\n): Promise<RpcBatchSubmissionResponse[]> => {\n  if (!rpcHost) throw new Error('API host is undefined.')\n  if (phraseAccounts.length !== canonicals.length || phraseAccounts.length !== values.length)\n    throw new Error('Something is wrong. Invalid data.')\n\n  const data = phraseAccounts.map((phraseAccount, idx) => {\n    return {\n      jsonrpc: '2.0',\n      method: 'ValidatePhrase',\n      params: [\n        token,\n        dyfarmContract,\n        campaignTitle,\n        wallet,\n        builders[idx],\n        phraseAccount,\n        canonicals[idx],\n        confidences[idx],\n        values[idx]\n      ],\n      id: idx + 1\n    }\n  })\n\n  return axios.post(rpcHost, data).then((response: any) => {\n    return response.data.map((row: any) => {\n      if (row.error) {\n        if (row.error?.code === -32602) {\n          return {\n            isFailed: true,\n            error: 'Invalid Token. Please disconnect wallet and try again.'\n          }\n        } else {\n          return {\n            isFailed: true,\n            error: row.error.message\n          }\n        }\n      }\n      return {\n        isFailed: false,\n        uuid: row.result as string\n      }\n    })\n  })\n}\n\nexport const getRpcSubmissionStatus = async (wallet: string, campaign: string): Promise<RpcSubmissionsInfo[]> => {\n  if (!rpcHost) return []\n\n  return axios\n    .post(rpcHost, {\n      jsonrpc: '2.0',\n      method: 'getSubmitStatus',\n      params: [wallet, campaign],\n      id: 1\n    })\n    .then((response: RpcApiResponse) => {\n      if (response.status === 200 && response.data && response.data.result && Array.isArray(response.data.result)) {\n        return response.data.result.map((submission) => {\n          return {\n            uuid: submission.uid,\n            canonical: submission.reference,\n            status:\n              submission.state === 'Expired'\n                ? RPC_TXN_STATUS.expired.val\n                : submission.state === 'Finalized'\n                ? RPC_TXN_STATUS.finalized.val\n                : RPC_TXN_STATUS.pending.val\n          }\n        })\n      } else {\n        return []\n      }\n    })\n}\n\nexport const getRpcValidationStatus = async (wallet: string, campaign: string): Promise<RpcValidationsInfo[]> => {\n  if (!rpcHost) return []\n\n  return axios\n    .post(rpcHost, {\n      jsonrpc: '2.0',\n      method: 'getValidateStatus',\n      params: [wallet, campaign],\n      id: 1\n    })\n    .then((response: RpcApiResponse) => {\n      if (response.status === 200 && response.data && response.data.result && Array.isArray(response.data.result)) {\n        return response.data.result.map((validation) => {\n          return {\n            uuid: validation.uid,\n            utterance: validation.reference,\n            status:\n              validation.state === 'Expired'\n                ? RPC_TXN_STATUS.expired.val\n                : validation.state === 'Finalized'\n                ? RPC_TXN_STATUS.finalized.val\n                : RPC_TXN_STATUS.pending.val\n          }\n        })\n      } else {\n        return []\n      }\n    })\n}\n\nexport const getRpcListActivity = async (dyfarmContract: string, wallet: string, role: string): Promise<string[]> => {\n  if (!rpcHost) return []\n\n  return axios\n    .post(rpcHost, {\n      jsonrpc: '2.0',\n      method: 'ListActivity',\n      params: [dyfarmContract, wallet],\n      id: 1\n    })\n    .then((response: RpcApiResponse) => {\n      if (response.status === 200 && response.data && response.data.result && Array.isArray(response.data.result)) {\n        return response.data.result\n          .filter(\n            (row) =>\n              String(row.role).toLowerCase() === role &&\n              row.stake_status === true &&\n              row.campaign !== null &&\n              row.campaign !== ''\n          )\n          .map((row) => String(row.campaign))\n      } else {\n        return []\n      }\n    })\n}\n","import {\n  Connection,\n  PublicKey,\n  Signer,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction\n} from '@solana/web3.js'\nimport BN from 'bn.js'\nimport randomstring from 'randomstring'\nimport { ApiValidationsInfo, PCampaign, PUtterance, PHistory, CreateCampaignArgs, UpdateCampaignArgs } from '../typings'\nimport {\n  getAssociateTokenAccount,\n  isEqualAddress,\n  LAMPORTS_PER_USDC,\n  LOOKUP_PROGRAM_ADDRESS,\n  SNS_ADDRESS,\n  SNS_PAIR\n} from '../utils'\nimport { createCreateCampaignInstruction, createUpdateCampaignInstruction, FarmConfig, PROGRAM_ID } from '../dyfarm'\nimport { getAllCampaignTitles, getSubmissionsValidationsInfo } from '../services'\n\nexport const getUtterancesAndHistoriesForArchitect = async (\n  publicKey: PublicKey,\n  connection: Connection,\n  campaign: PCampaign\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const submissionsAndValidationsInfo = await getSubmissionsValidationsInfo(campaign.pubkey)\n  const submissionsInfo = submissionsAndValidationsInfo.submissions\n  const validationsInfo = submissionsAndValidationsInfo.validations\n\n  const objValidationsInfo: {\n    [utterance: string]: PHistory[]\n  } = validationsInfo.reduce((all, validation) => {\n    const validations: ApiValidationsInfo[] = all[validation.utterance] ?? []\n    return {\n      ...all,\n      [validation.utterance]: validations.slice().concat(validation)\n    }\n  }, {})\n\n  const submissionsChecked = submissionsInfo.filter((submission) => submission.submitted)\n\n  const utterances: PUtterance[] = submissionsChecked\n    .map((submission) => {\n      const histories = submission.pubkey ? objValidationsInfo[submission.pubkey] ?? [] : []\n      const history = histories.find((history) => isEqualAddress(history.validator, publicKey))\n      return {\n        timestamp: submission.timestamp,\n        kind: submission.kind,\n        data: submission.data,\n        canonical: submission.canonical,\n        builder: submission.builder,\n        submitted: true,\n        pubkey: submission.pubkey,\n        finish: submission.finish,\n        correct: submission.correct,\n        incorrect: submission.incorrect,\n        head: submission.correct + submission.incorrect,\n        history: histories,\n        validated: history ? history.vote : undefined\n      }\n    })\n    .sort((a, b) => a.timestamp - b.timestamp || a.data.localeCompare(b.data))\n    .reverse()\n\n  return utterances\n}\n\nexport const createArchitectCreateCampaignInstructions = async (\n  publicKey: PublicKey,\n  connection: Connection,\n  data: CreateCampaignArgs\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const instructions: TransactionInstruction[] = []\n  const signers: Signer[] = []\n\n  const campaignTitle = data.campaignTitle\n  const tag = data.tag\n  const open = new BN(data.open)\n  const close = new BN(data.close)\n  const expire = new BN(data.expire)\n  const minimumStake = new BN(100)\n  const rpuValidator = new BN(data.rpuValidator * LAMPORTS_PER_USDC)\n  const minPhrase = data.minPhrase\n  const minValidate = data.minValidate\n  const majorityQuorum = data.majorityQuorum\n  const rpuGeneral = new BN(data.rpuGeneral * LAMPORTS_PER_USDC)\n  const rpuSpecific = new BN(data.rpuSpecific * LAMPORTS_PER_USDC)\n  const rpuCause = new BN(data.rpuCause * LAMPORTS_PER_USDC)\n  const rpuEffect = new BN(data.rpuEffect * LAMPORTS_PER_USDC)\n  const organizer = data.organizer\n  const language = data.language\n  const industry = data.industry\n  const domain = data.domain\n  const subject = data.subject\n\n  const [campaignAccount] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN'), Buffer.from(campaignTitle)],\n    PROGRAM_ID\n  )\n  const [campaignVault] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN:VAULT'), Buffer.from(campaignTitle)],\n    PROGRAM_ID\n  )\n  const [farmConfigAccount] = PublicKey.findProgramAddressSync([Buffer.from('DYF:CONFIG')], PROGRAM_ID)\n  const farmConfig = await FarmConfig.fromAccountAddress(connection, farmConfigAccount, 'processed')\n  const userToken = getAssociateTokenAccount(new PublicKey(SNS_ADDRESS), publicKey)\n  const [pdaAccount] = PublicKey.findProgramAddressSync([Buffer.from('DYF')], PROGRAM_ID)\n  const [priceFeed] = PublicKey.findProgramAddressSync(\n    [Buffer.from('PRICE:FEED:CONFIG'), Buffer.from(SNS_PAIR)],\n    farmConfig.oracle\n  )\n\n  instructions.push(\n    createCreateCampaignInstruction(\n      {\n        user: publicKey,\n        campaignAccount,\n        campaignVault,\n        userToken,\n        mint: new PublicKey(SNS_ADDRESS),\n        farmConfig: farmConfigAccount,\n        priceFeed,\n        pdaAccount,\n        campaignTableAccount: farmConfig.campaignsTables,\n        lookupProgram: new PublicKey(LOOKUP_PROGRAM_ADDRESS),\n        oracle: farmConfig.oracle,\n        clock: SYSVAR_CLOCK_PUBKEY,\n        rent: SYSVAR_RENT_PUBKEY\n      },\n      {\n        campaignTitle: campaignTitle,\n        pair: SNS_PAIR,\n        industry: industry,\n        domain: domain,\n        subject: subject,\n        organizer: organizer,\n        lang: language,\n        kind: tag,\n        open: open,\n        close: close,\n        expire: expire,\n        rpuValidator: rpuValidator,\n        rpuGeneral: rpuGeneral,\n        rpuSpecific: rpuSpecific,\n        rpuCause: rpuCause,\n        rpuEffect: rpuEffect,\n        minBuilder: minPhrase,\n        minValidator: minValidate,\n        majorityQuorum: majorityQuorum,\n        minimumStake\n      },\n      PROGRAM_ID\n    )\n  )\n  return { instructions, signers }\n}\n\nexport const createArchitectUpdateCampaignInstructions = async (\n  publicKey: PublicKey,\n  connection: Connection,\n  data: UpdateCampaignArgs\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const instructions: TransactionInstruction[] = []\n  const signers: Signer[] = []\n\n  const campaignTitle = data.campaignTitle\n  const open = new BN(data.open)\n  const close = new BN(data.close)\n  const expire = new BN(data.expire)\n\n  const [campaignAccount] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN'), Buffer.from(data.campaignTitle)],\n    PROGRAM_ID\n  )\n  const [farmConfig] = PublicKey.findProgramAddressSync([Buffer.from('DYF:CONFIG')], PROGRAM_ID)\n\n  instructions.push(\n    createUpdateCampaignInstruction(\n      {\n        user: publicKey,\n        campaignAccount,\n        farmConfig\n      },\n      {\n        campaignTitle: campaignTitle,\n        open,\n        close,\n        expire\n      },\n      PROGRAM_ID\n    )\n  )\n\n  return { instructions, signers }\n}\n\nexport const getUnusedCampaignTitle = async (publicKey: PublicKey, connection: Connection) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  let campaignTitle = ''\n  let ret = 1\n  while (ret !== 2) {\n    if (ret === 1) {\n      ret = 0\n      const str = randomstring.generate(16)\n\n      const campaignTitles: string[] = await getAllCampaignTitles()\n      if (campaignTitles.includes(str)) {\n        ret = 1\n      } else {\n        const [campaignAccount] = PublicKey.findProgramAddressSync(\n          [Buffer.from('DYF:CAMPAIGN'), Buffer.from(str)],\n          PROGRAM_ID\n        )\n\n        const campaignAccountInfo = await connection.getParsedAccountInfo(campaignAccount)\n        if (!campaignAccountInfo || !campaignAccountInfo.value) {\n          ret = 2\n          campaignTitle = str\n        } else {\n          ret = 1\n        }\n      }\n    }\n  }\n\n  return campaignTitle\n}\n","import { Connection, PublicKey, Signer, SYSVAR_CLOCK_PUBKEY, TransactionInstruction } from '@solana/web3.js'\nimport * as splToken from '@solana/spl-token'\nimport BN from 'bn.js'\nimport {\n  ACCESS_METHOD,\n  getAssociateTokenAccount,\n  METADATA_PROGRAM_ADDRESS,\n  SNS_ADDRESS,\n  STAKE_ACCOUNT_ROLE\n} from '../utils'\nimport {\n  CampaignActivity,\n  createClaimRewardInstruction,\n  createCreateProfileInstruction,\n  createStakeCampaignInstruction,\n  createStakeNftInstruction,\n  createUnstakeCampaignInstruction,\n  Profile,\n  PROGRAM_ID\n} from '../dyfarm'\nimport { PCampaign } from '../typings'\nimport {\n  getBuilderActivityInfo,\n  getBuilderRecentSubmissions,\n  getValidatorActivityInfo,\n  getValidatorRecentValidations\n} from '../services'\n\nexport const createStakeCampaignInstructions = async (\n  publicKey: PublicKey,\n  connection: Connection,\n  role: number,\n  amount: number,\n  campaignTitle: string\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const instructions: TransactionInstruction[] = []\n  const signers: Signer[] = []\n\n  const [userProfile] = PublicKey.findProgramAddressSync([Buffer.from('DYF:PROFILE'), publicKey.toBuffer()], PROGRAM_ID)\n  const [farmConfig] = PublicKey.findProgramAddressSync([Buffer.from('DYF:CONFIG')], PROGRAM_ID)\n\n  const profile = await connection.getParsedAccountInfo(userProfile)\n  if (!profile || !profile.value) {\n    instructions.push(\n      createCreateProfileInstruction(\n        {\n          user: publicKey,\n          userProfile,\n          farmConfig,\n          clock: SYSVAR_CLOCK_PUBKEY\n        },\n        {\n          role: role,\n          access: ACCESS_METHOD.nft.val\n        },\n        PROGRAM_ID\n      )\n    )\n  }\n\n  const [campaignAccount] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN'), Buffer.from(campaignTitle)],\n    PROGRAM_ID\n  )\n  const userToken = getAssociateTokenAccount(new PublicKey(SNS_ADDRESS), publicKey)\n  const [campaignActivity] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN:ACTIVITY'), Buffer.from(campaignTitle), publicKey.toBuffer()],\n    PROGRAM_ID\n  )\n  const [campaignVault] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN:VAULT'), Buffer.from(campaignTitle)],\n    PROGRAM_ID\n  )\n\n  const accountInfo = await connection.getAccountInfo(userToken)\n  if (accountInfo == null) {\n    instructions.push(\n      splToken.createAssociatedTokenAccountInstruction(\n        publicKey,\n        userToken,\n        publicKey,\n        new PublicKey(SNS_ADDRESS),\n        splToken.TOKEN_PROGRAM_ID,\n        splToken.ASSOCIATED_TOKEN_PROGRAM_ID\n      )\n    )\n  }\n\n  instructions.push(\n    createStakeCampaignInstruction(\n      {\n        user: publicKey,\n        userProfile,\n        campaignActivity,\n        userToken,\n        campaignAccount,\n        campaignVault,\n        farmConfig,\n        clock: SYSVAR_CLOCK_PUBKEY\n      },\n      {\n        campaignTitle: campaignTitle,\n        amount: new BN(amount)\n      },\n      PROGRAM_ID\n    )\n  )\n\n  return { instructions, signers }\n}\n\nexport const createUnstakeCampaignInstructions = async (\n  publicKey: PublicKey,\n  connection: Connection,\n  campaignTitle: string\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const instructions: TransactionInstruction[] = []\n  const signers: Signer[] = []\n\n  const [userProfile] = PublicKey.findProgramAddressSync([Buffer.from('DYF:PROFILE'), publicKey.toBuffer()], PROGRAM_ID)\n  const [campaignAccount] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN'), Buffer.from(campaignTitle)],\n    PROGRAM_ID\n  )\n  const [campaignVault] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN:VAULT'), Buffer.from(campaignTitle)],\n    PROGRAM_ID\n  )\n  const [pdaAccount] = PublicKey.findProgramAddressSync([Buffer.from('DYF')], PROGRAM_ID)\n  const [dyfVault] = PublicKey.findProgramAddressSync([pdaAccount.toBuffer(), Buffer.from('DYF:VAULT')], PROGRAM_ID)\n  const [campaignActivity] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN:ACTIVITY'), Buffer.from(campaignTitle), publicKey.toBuffer()],\n    PROGRAM_ID\n  )\n  const [farmConfig] = PublicKey.findProgramAddressSync([Buffer.from('DYF:CONFIG')], PROGRAM_ID)\n  const userToken = getAssociateTokenAccount(new PublicKey(SNS_ADDRESS), publicKey)\n\n  instructions.push(\n    createUnstakeCampaignInstruction(\n      {\n        user: publicKey,\n        userProfile,\n        userToken,\n        campaignAccount,\n        campaignVault,\n        dyfVault,\n        campaignActivity,\n        farmConfig,\n        pdaAccount,\n        clock: SYSVAR_CLOCK_PUBKEY\n      },\n      {\n        campaignTitle: campaignTitle\n      },\n      PROGRAM_ID\n    )\n  )\n\n  return { instructions, signers }\n}\n\nexport const createClaimRewardInstructions = async (\n  publicKey: PublicKey,\n  connection: Connection,\n  campaignTitle: string\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const instructions: TransactionInstruction[] = []\n  const signers: Signer[] = []\n\n  const [userProfile] = PublicKey.findProgramAddressSync([Buffer.from('DYF:PROFILE'), publicKey.toBuffer()], PROGRAM_ID)\n  const userToken = getAssociateTokenAccount(new PublicKey(SNS_ADDRESS), publicKey)\n  const [campaignActivity] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN:ACTIVITY'), Buffer.from(campaignTitle), publicKey.toBuffer()],\n    PROGRAM_ID\n  )\n  const [campaignVault] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN:VAULT'), Buffer.from(campaignTitle)],\n    PROGRAM_ID\n  )\n  const [farmConfig] = PublicKey.findProgramAddressSync([Buffer.from('DYF:CONFIG')], PROGRAM_ID)\n  const [pdaAccount] = PublicKey.findProgramAddressSync([Buffer.from('DYF')], PROGRAM_ID)\n  const [dyfVault] = PublicKey.findProgramAddressSync([pdaAccount.toBuffer(), Buffer.from('DYF:VAULT')], PROGRAM_ID)\n\n  instructions.push(\n    createClaimRewardInstruction(\n      {\n        user: publicKey,\n        userProfile,\n        userToken,\n        campaignActivity,\n        campaignVault,\n        farmConfig,\n        pdaAccount,\n        dyfVault,\n        clock: SYSVAR_CLOCK_PUBKEY\n      },\n      {\n        campaignTitle: campaignTitle\n      },\n      PROGRAM_ID\n    )\n  )\n\n  return { instructions, signers }\n}\n\nexport const createBatchClaimRewardInstructions = async (\n  publicKey: PublicKey,\n  connection: Connection,\n  campaignTitles: string[]\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const [userProfile] = PublicKey.findProgramAddressSync([Buffer.from('DYF:PROFILE'), publicKey.toBuffer()], PROGRAM_ID)\n  const userToken = getAssociateTokenAccount(new PublicKey(SNS_ADDRESS), publicKey)\n  const [farmConfig] = PublicKey.findProgramAddressSync([Buffer.from('DYF:CONFIG')], PROGRAM_ID)\n  const [pdaAccount] = PublicKey.findProgramAddressSync([Buffer.from('DYF')], PROGRAM_ID)\n  const [dyfVault] = PublicKey.findProgramAddressSync([pdaAccount.toBuffer(), Buffer.from('DYF:VAULT')], PROGRAM_ID)\n\n  const instructions: TransactionInstruction[] = campaignTitles.map((campaignTitle) => {\n    const [campaignActivity] = PublicKey.findProgramAddressSync(\n      [Buffer.from('DYF:CAMPAIGN:ACTIVITY'), Buffer.from(campaignTitle), publicKey.toBuffer()],\n      PROGRAM_ID\n    )\n    const [campaignVault] = PublicKey.findProgramAddressSync(\n      [Buffer.from('DYF:CAMPAIGN:VAULT'), Buffer.from(campaignTitle)],\n      PROGRAM_ID\n    )\n\n    return createClaimRewardInstruction(\n      {\n        user: publicKey,\n        userProfile,\n        userToken,\n        campaignActivity,\n        campaignVault,\n        farmConfig,\n        pdaAccount,\n        dyfVault,\n        clock: SYSVAR_CLOCK_PUBKEY\n      },\n      {\n        campaignTitle: campaignTitle\n      },\n      PROGRAM_ID\n    )\n  })\n  const signers: Signer[] = []\n\n  return { instructions, signers }\n}\n\nexport const createStakeCampaignWithNFTInstructions = async (\n  publicKey: PublicKey,\n  connection: Connection,\n  role: string,\n  mint: string\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const instructions: TransactionInstruction[] = []\n  const signers: Signer[] = []\n\n  const [userProfile] = PublicKey.findProgramAddressSync([Buffer.from('DYF:PROFILE'), publicKey.toBuffer()], PROGRAM_ID)\n  const [farmConfigAccount] = PublicKey.findProgramAddressSync([Buffer.from('DYF:CONFIG')], PROGRAM_ID)\n  const userNft = getAssociateTokenAccount(new PublicKey(mint), publicKey)\n  const [nftVault] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN:VAULT'), userNft.toBuffer()],\n    PROGRAM_ID\n  )\n  const [nftMetadata] = PublicKey.findProgramAddressSync(\n    [Buffer.from('metadata'), new PublicKey(METADATA_PROGRAM_ADDRESS).toBuffer(), new PublicKey(mint).toBuffer()],\n    new PublicKey(METADATA_PROGRAM_ADDRESS)\n  )\n  const [pdaAccount] = PublicKey.findProgramAddressSync([Buffer.from('DYF')], PROGRAM_ID)\n\n  const profile = await connection.getParsedAccountInfo(userProfile)\n  if (!profile || !profile.value) {\n    instructions.push(\n      createCreateProfileInstruction(\n        {\n          user: publicKey,\n          userProfile,\n          farmConfig: farmConfigAccount,\n          clock: SYSVAR_CLOCK_PUBKEY\n        },\n        {\n          role: STAKE_ACCOUNT_ROLE[role].val,\n          access: ACCESS_METHOD.nft.val\n        },\n        PROGRAM_ID\n      )\n    )\n  }\n\n  instructions.push(\n    createStakeNftInstruction(\n      {\n        user: publicKey,\n        userProfile,\n        userNft,\n        nftVault,\n        farmConfig: farmConfigAccount,\n        pdaAccount,\n        nftMint: new PublicKey(mint),\n        nftMetadata,\n        clock: SYSVAR_CLOCK_PUBKEY\n      },\n      PROGRAM_ID\n    )\n  )\n\n  return { instructions, signers }\n}\n\nexport const getTotalAvailableRewards = async (\n  publicKey: PublicKey,\n  connection: Connection,\n  appCampaigns: PCampaign[]\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const [userProfile] = PublicKey.findProgramAddressSync([Buffer.from('DYF:PROFILE'), publicKey.toBuffer()], PROGRAM_ID)\n  const profile = await Profile.fromAccountAddress(connection, userProfile, 'processed')\n  const role = Number(profile.role)\n\n  if (role !== STAKE_ACCOUNT_ROLE.builder.val && role !== STAKE_ACCOUNT_ROLE.validator.val) {\n    throw new Error('Architects cannot claim!')\n  }\n\n  const stakedCampaigns = appCampaigns.filter(\n    (campaign) =>\n      (role === STAKE_ACCOUNT_ROLE.builder.val && campaign.builderStakeStatus) ||\n      (role === STAKE_ACCOUNT_ROLE.validator.val && campaign.validatorStakeStatus)\n  )\n\n  const campaignTitles: string[] = []\n  let totalRewards = 0\n  let totalClaimed = 0\n  await Promise.all(\n    stakedCampaigns.map(async (campaign) => {\n      if (!publicKey) return\n\n      try {\n        const [campaignActivityAccount] = PublicKey.findProgramAddressSync(\n          [Buffer.from('DYF:CAMPAIGN:ACTIVITY'), Buffer.from(campaign.campaignTitle), publicKey.toBuffer()],\n          PROGRAM_ID\n        )\n        const campaignActivity = await CampaignActivity.fromAccountAddress(\n          connection,\n          campaignActivityAccount,\n          'processed'\n        )\n\n        const unclaimedReward = new BN(campaignActivity.unclaimedReward).toNumber()\n        const claimedReward = new BN(campaignActivity.claimedReward).toNumber()\n\n        totalRewards += unclaimedReward\n        totalClaimed += claimedReward\n        if (unclaimedReward > claimedReward) campaignTitles.push(campaign.campaignTitle)\n      } catch (err) {\n        /* empty */\n      }\n    })\n  )\n\n  return {\n    rewards: totalRewards,\n    claimed: totalClaimed,\n    campaignTitles\n  }\n}\n\nexport const getBuilderActivity = async (publicKey: PublicKey) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  const activityInfo = await getBuilderActivityInfo(publicKey.toBase58())\n  return activityInfo\n}\n\nexport const getValidatorActivity = async (publicKey: PublicKey) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  const activityInfo = await getValidatorActivityInfo(publicKey.toBase58())\n  return activityInfo\n}\n\nexport const getBuilderSubmissionsToday = async (publicKey: PublicKey) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  const recentSubmissions = await getBuilderRecentSubmissions(publicKey.toBase58(), new Date().getTimezoneOffset())\n  return recentSubmissions\n}\n\nexport const getValidatorValidationsToday = async (publicKey: PublicKey) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  const recentValidations = await getValidatorRecentValidations(publicKey.toBase58(), new Date().getTimezoneOffset())\n  return recentValidations\n}\n","import { Connection, PublicKey, Signer, SYSVAR_CLOCK_PUBKEY, TransactionInstruction } from '@solana/web3.js'\nimport BN from 'bn.js'\nimport {\n  ApiSubmissionInfo,\n  ApiValidationsInfo,\n  PCampaign,\n  SubmitOntologyArgs,\n  RpcSubmissionsInfo,\n  PUtterance,\n  PHistory\n} from '../typings'\nimport { isEqualAddress, OFFCHAIN_TYPE, PHRASE_TYPE, RPC_TXN_STATUS } from '../utils'\nimport { createSubmitPhraseInstruction, Phrase, PROGRAM_ADDRESS, PROGRAM_ID } from '../dyfarm'\nimport {\n  deleteOntology,\n  getRpcSubmissionStatus,\n  getSubmissionsValidationsInfo,\n  rpcBatchSubmitPhrases,\n  submitOntology\n} from '../services'\n\nexport const getUtterancesAndHistoriesForBuilder = async (\n  publicKey: PublicKey,\n  connection: Connection,\n  campaign: PCampaign,\n  latestSubmittedUuids: string[]\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const [campaignAccount] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN'), Buffer.from(campaign.campaignTitle)],\n    PROGRAM_ID\n  )\n\n  const submissionsAndValidationsInfo = await getSubmissionsValidationsInfo(campaign.pubkey)\n  const submissionsInfo = submissionsAndValidationsInfo.submissions\n  const validationsInfo = submissionsAndValidationsInfo.validations\n  const rpcSubmissions = await getRpcSubmissionStatus(publicKey.toBase58(), campaign.pubkey)\n\n  const objSubmissionsInfo: {\n    [canonical: string]: ApiSubmissionInfo\n  } = submissionsInfo.reduce((all, submission) => {\n    return { ...all, [submission.canonical]: submission }\n  }, {})\n  const objValidationsInfo: {\n    [utterance: string]: PHistory[]\n  } = validationsInfo.reduce((all, validation) => {\n    const validations: ApiValidationsInfo[] = all[validation.utterance] ?? []\n    return {\n      ...all,\n      [validation.utterance]: validations.slice().concat(validation)\n    }\n  }, {})\n  const objRpcSubmissions: {\n    [canonical: string]: RpcSubmissionsInfo\n  } = rpcSubmissions.reduce((all, submission) => {\n    return { ...all, [submission.canonical]: submission }\n  }, {})\n\n  const utterancesChecked: PUtterance[] = []\n  const utterancesPre: PUtterance[] = []\n  const utterancesQueued: PUtterance[] = []\n  const utterancesExpired: PUtterance[] = []\n\n  const submissionsChecked: ApiSubmissionInfo[] = []\n  submissionsInfo.forEach((submission) => {\n    if (submission.submitted) submissionsChecked.push(submission)\n  })\n  submissionsChecked.forEach((submission) => {\n    const histories = submission.pubkey ? objValidationsInfo[submission.pubkey] ?? [] : []\n    const history = histories.find((history) => isEqualAddress(history.validator, publicKey))\n    utterancesChecked.push({\n      timestamp: submission.timestamp,\n      kind: submission.kind,\n      data: submission.data,\n      canonical: submission.canonical,\n      builder: submission.builder,\n      submitted: true,\n      pubkey: submission.pubkey,\n      finish: submission.finish,\n      correct: submission.correct,\n      incorrect: submission.incorrect,\n      head: submission.correct + submission.incorrect,\n      history: histories,\n      validated: history ? history.vote : undefined\n    })\n  })\n\n  const submissionsPre: ApiSubmissionInfo[] = []\n  submissionsInfo.forEach((submission) => {\n    if (!submission.submitted && !objRpcSubmissions[submission.canonical]) submissionsPre.push(submission)\n  })\n  submissionsPre.forEach((submission) => {\n    utterancesPre.push({\n      timestamp: submission.timestamp,\n      kind: submission.kind,\n      data: submission.data,\n      canonical: submission.canonical,\n      builder: submission.builder,\n      submitted: false\n    })\n  })\n\n  const submissionsNotSubmittedButRpcFinalizedOrExpired: ApiSubmissionInfo[] = []\n  submissionsInfo.forEach((submission) => {\n    if (\n      !submission.submitted &&\n      objRpcSubmissions[submission.canonical] &&\n      (objRpcSubmissions[submission.canonical].status === RPC_TXN_STATUS.finalized.val ||\n        objRpcSubmissions[submission.canonical].status === RPC_TXN_STATUS.expired.val)\n    )\n      submissionsNotSubmittedButRpcFinalizedOrExpired.push(submission)\n  })\n  await Promise.all(\n    submissionsNotSubmittedButRpcFinalizedOrExpired.map(async (submission) => {\n      const [phraseAccount] = PublicKey.findProgramAddressSync(\n        [Buffer.from('DYF:CAMPAIGN:PHRASE'), campaignAccount.toBuffer(), Buffer.from(submission.canonical)],\n        PROGRAM_ID\n      )\n\n      try {\n        const phrase = await Phrase.fromAccountAddress(connection, phraseAccount, 'processed')\n        if (!isEqualAddress(phrase.builder, publicKey)) {\n          throw new Error('RPC Submission Expired')\n        } else {\n          const histories = objValidationsInfo[phraseAccount.toBase58()] ?? []\n          const history = histories.find((history) => isEqualAddress(history.validator, publicKey))\n          utterancesChecked.push({\n            timestamp: new BN(phrase.timestamp).toNumber(),\n            kind: (Object.values(PHRASE_TYPE).find((row) => row.val === Number(phrase.kind)) ?? PHRASE_TYPE.specific)[\n              'label'\n            ],\n            data: objSubmissionsInfo[submission.canonical].data,\n            canonical: submission.canonical,\n            builder: phrase.builder.toBase58(),\n            submitted: true,\n            pubkey: phraseAccount.toBase58(),\n            finish: phrase.finish,\n            correct: phrase.correct,\n            incorrect: phrase.incorrect,\n            head: phrase.head,\n            history: histories,\n            validated: history ? history.vote : undefined\n          })\n        }\n      } catch (e) {\n        if (latestSubmittedUuids.includes(objRpcSubmissions[submission.canonical].uuid)) {\n          utterancesExpired.push({\n            timestamp: submission.timestamp,\n            kind: submission.kind,\n            data: submission.data,\n            canonical: submission.canonical,\n            builder: submission.builder,\n            submitted: false,\n            expired: true\n          })\n        } else {\n          utterancesPre.push({\n            timestamp: submission.timestamp,\n            kind: submission.kind,\n            data: submission.data,\n            canonical: submission.canonical,\n            builder: submission.builder,\n            submitted: false\n          })\n        }\n      }\n    })\n  )\n\n  const submissionsNotSubmittedAndRpcPending: ApiSubmissionInfo[] = []\n  submissionsInfo.forEach((submission) => {\n    if (\n      !submission.submitted &&\n      objRpcSubmissions[submission.canonical] &&\n      objRpcSubmissions[submission.canonical].status === RPC_TXN_STATUS.pending.val\n    )\n      submissionsNotSubmittedAndRpcPending.push(submission)\n  })\n  submissionsNotSubmittedAndRpcPending.forEach((submission) => {\n    utterancesQueued.push({\n      timestamp: submission.timestamp,\n      kind: submission.kind,\n      data: submission.data,\n      canonical: submission.canonical,\n      builder: submission.builder,\n      submitted: false,\n      uuid: objRpcSubmissions[submission.canonical].uuid\n    })\n  })\n\n  const utterances = utterancesChecked\n    .concat(utterancesQueued)\n    .concat(utterancesPre)\n    .concat(utterancesExpired)\n    .sort((a, b) => a.timestamp - b.timestamp || a.data.localeCompare(b.data))\n    .reverse()\n\n  return utterances\n}\n\nexport const createUtteranceByOntology = async (publicKey: PublicKey, ontology: SubmitOntologyArgs) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n\n  const resp = await submitOntology(ontology)\n  if (!resp.isSuccess) {\n    if (resp.data === 'NETWORK_ERROR') {\n      throw new Error('Network Error.')\n    } else if (resp.data === 'DUPLICATTION') {\n      throw new Error(\"This utterance already exists in the organizer's knowledge base.\")\n    } else if (resp.data === 'CAP_LIMIT') {\n      throw new Error(\n        `${resp.submissionCount} Submissions for ${ontology.utterance_type} already exists. No more are allowed under the submissions cap.`\n      )\n    } else {\n      throw new Error('Something went wrong. Please reload page.')\n    }\n  }\n\n  const canonical = resp.data\n  const utterance: PUtterance = {\n    timestamp: Date.now(),\n    kind: ontology.utterance_type,\n    data: ontology.utterance,\n    canonical,\n    builder: publicKey.toBase58(),\n    submitted: false\n  }\n  return utterance\n}\n\nexport const deleteOntologyByCanonical = async (canonical: string) => {\n  if (!canonical || canonical === '') {\n    throw new Error('Invalid canonical.')\n  }\n\n  const ret = await deleteOntology(canonical)\n\n  if (!ret) {\n    throw new Error('Ontology submission failed.')\n  }\n\n  return ret\n}\n\nexport const createBuilderSubmitUtterancesInstructions = (\n  publicKey: PublicKey,\n  connection: Connection,\n  campaignTitle: string,\n  utterances: PUtterance[]\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  let instructions: TransactionInstruction[] = []\n  const signers: Signer[] = []\n\n  const [campaignAccount] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN'), Buffer.from(campaignTitle)],\n    PROGRAM_ID\n  )\n  const [farmConfig] = PublicKey.findProgramAddressSync([Buffer.from('DYF:CONFIG')], PROGRAM_ID)\n  const [userProfile] = PublicKey.findProgramAddressSync([Buffer.from('DYF:PROFILE'), publicKey.toBuffer()], PROGRAM_ID)\n  const [campaignActivity] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN:ACTIVITY'), Buffer.from(campaignTitle), publicKey.toBuffer()],\n    PROGRAM_ID\n  )\n\n  instructions = utterances.map((utterance) => {\n    const [phraseAccount] = PublicKey.findProgramAddressSync(\n      [Buffer.from('DYF:CAMPAIGN:PHRASE'), campaignAccount.toBuffer(), Buffer.from(utterance.canonical)],\n      PROGRAM_ID\n    )\n    return createSubmitPhraseInstruction(\n      {\n        user: publicKey,\n        phraseAccount,\n        userProfile,\n        campaignActivity,\n        campaignAccount,\n        farmConfig,\n        clock: SYSVAR_CLOCK_PUBKEY\n      },\n      {\n        campaignTitle: campaignTitle,\n        offchainRef: utterance.canonical,\n        offchainType: OFFCHAIN_TYPE.s3.val,\n        kind: PHRASE_TYPE[utterance.kind.toLowerCase()].val\n      },\n      PROGRAM_ID\n    )\n  })\n  return { instructions, signers }\n}\n\nexport const createRpcSubmitUtterancesPromises = (\n  publicKey: PublicKey,\n  connection: Connection,\n  rpcAuthToken: string,\n  campaignTitle: string,\n  batchUtterances: PUtterance[][]\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n  if (!rpcAuthToken || rpcAuthToken === '') throw new Error('RPC Auth Token is undefined')\n\n  const args = batchUtterances.map((_utterances) => {\n    return [\n      rpcAuthToken,\n      PROGRAM_ADDRESS,\n      campaignTitle,\n      publicKey.toBase58(),\n      _utterances.map((utterance) => utterance.canonical),\n      _utterances.map(() => OFFCHAIN_TYPE.s3.val),\n      _utterances.map((utterance) => PHRASE_TYPE[String(utterance.kind).toLowerCase()].val)\n    ]\n  })\n\n  return { promise: rpcBatchSubmitPhrases, args }\n}\n","import { Connection, LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js'\nimport BN from 'bn.js'\nimport { Campaign, CampaignActivity, Profile, PROGRAM_ID, Role } from '../dyfarm'\nimport { checkWhitelist, getAllCampaignsInfo, getCampaginMeta, getRpcListActivity } from '../services'\nimport { ApiCampaignInfo, PCampaign } from '../typings'\nimport { decodeText, STAKE_ACCOUNT_ROLE } from '../utils'\n\nexport const getCampaignFromCampaignTitle = async (\n  publicKey: PublicKey,\n  connection: Connection,\n  campaignTitle: string\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const campaignMeta = await getCampaginMeta(campaignTitle)\n  if (!campaignMeta) return\n\n  const [campaignAccount] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN'), Buffer.from(campaignMeta.dapp_title)],\n    PROGRAM_ID\n  )\n\n  // @ts-ignore\n  let campaign: Campaign = undefined\n  try {\n    campaign = await Campaign.fromAccountAddress(connection, campaignAccount, 'processed')\n  } catch (e) {\n    /* empty */\n  }\n  if (campaign === undefined) return\n\n  const [campaignActivityAccount] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN:ACTIVITY'), Buffer.from(campaignMeta.dapp_title), publicKey.toBuffer()],\n    PROGRAM_ID\n  )\n\n  let stakeInfo = {\n    builderStakeStatus: false,\n    validatorStakeStatus: false\n  }\n  try {\n    const campaignActivity = await CampaignActivity.fromAccountAddress(connection, campaignActivityAccount, 'processed')\n    const [userProfile] = PublicKey.findProgramAddressSync(\n      [Buffer.from('DYF:PROFILE'), publicKey.toBuffer()],\n      PROGRAM_ID\n    )\n    const profile = await Profile.fromAccountAddress(connection, userProfile, 'processed')\n    if (!new BN(campaignActivity.stakeAmount).eqn(0)) {\n      const label = Object.values(STAKE_ACCOUNT_ROLE).find((row) => row.val === Number(profile.role))?.label\n      stakeInfo = {\n        builderStakeStatus: label === STAKE_ACCOUNT_ROLE.builder.label,\n        validatorStakeStatus: label === STAKE_ACCOUNT_ROLE.validator.label\n      }\n    }\n  } catch (e) {\n    /* empty */\n  }\n\n  return {\n    campaignTitle: campaignMeta.dapp_title,\n    tag: campaign.tag,\n    pubkey: campaignAccount.toBase58(),\n    industry: decodeText(campaign.industry),\n    domain: decodeText(campaign.domain),\n    subject: decodeText(campaign.subject),\n    explain: campaignMeta.explain,\n    organizer: decodeText(campaign.organizer),\n    language: decodeText(campaign.lang),\n    specific: campaignMeta.phrase_specific,\n    general: campaignMeta.phrase_general,\n    cause: campaignMeta.phrase_cause,\n    effect: campaignMeta.phrase_effect,\n    open: new BN(campaign.open).toNumber(),\n    stop: new BN(campaign.close).toNumber() - 2 * 24 * 3600,\n    close: new BN(campaign.close).toNumber(),\n    expire: new BN(campaign.expire).toNumber(),\n    minStake: new BN(campaign.minStake).toNumber(),\n    minPhrase: Number(campaign.minPhrase),\n    minValidate: Number(campaign.minValidate),\n    rpuSpecific: new BN(campaign.rpuSpecific).divn(LAMPORTS_PER_SOL / 100).toNumber() / 100,\n    rpuGeneral: new BN(campaign.rpuGeneral).divn(LAMPORTS_PER_SOL / 100).toNumber() / 100,\n    rpuCause: new BN(campaign.rpuCause).divn(LAMPORTS_PER_SOL / 100).toNumber() / 100,\n    rpuEffect: new BN(campaign.rpuEffect).divn(LAMPORTS_PER_SOL / 100).toNumber() / 100,\n    rpuValidator: Number(campaign.rpuValidator),\n    majorityQuorum: Number(campaign.majorityQuorum),\n    architect: campaign.architect.toBase58(),\n    finish: campaign.finish,\n    utterances: [],\n    progress: 0,\n    ...stakeInfo\n  } as PCampaign\n}\n\nexport const getAllCampaigns = async (publicKey: PublicKey, connection: Connection) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const campaignsInfo: ApiCampaignInfo[] = await getAllCampaignsInfo()\n\n  let role: string | null = null\n  try {\n    const [userProfile] = PublicKey.findProgramAddressSync(\n      [Buffer.from('DYF:PROFILE'), publicKey.toBuffer()],\n      PROGRAM_ID\n    )\n    const profile = await Profile.fromAccountAddress(connection, userProfile, 'processed')\n    role = Role[profile.role].toLowerCase()\n  } catch (e) {\n    /* empty */\n  }\n\n  const stakedCampaignAccounts: string[] =\n    role !== null ? await getRpcListActivity(PROGRAM_ID.toBase58(), publicKey.toBase58(), role) : []\n\n  const campaigns: PCampaign[] = campaignsInfo.map((campaignInfo) => {\n    return {\n      ...campaignInfo,\n      stop: campaignInfo.close - 2 * 24 * 3600,\n      minStake: 100, // @TODO\n      utterances: [],\n      builderStakeStatus:\n        role === null\n          ? false\n          : role !== STAKE_ACCOUNT_ROLE.builder.label\n          ? false\n          : stakedCampaignAccounts.includes(campaignInfo.pubkey),\n      validatorStakeStatus:\n        role === null\n          ? false\n          : role !== STAKE_ACCOUNT_ROLE.validator.label\n          ? false\n          : stakedCampaignAccounts.includes(campaignInfo.pubkey)\n    }\n  })\n\n  return campaigns\n}\n\nexport const getAppRole = async (publicKey: PublicKey) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  const role = await checkWhitelist(publicKey.toBase58())\n  return role === null\n    ? null\n    : ((STAKE_ACCOUNT_ROLE[role] ? STAKE_ACCOUNT_ROLE[role].val : STAKE_ACCOUNT_ROLE.builder.val) as number)\n}\n","import { Connection, PublicKey, Signer, SYSVAR_CLOCK_PUBKEY, TransactionInstruction } from '@solana/web3.js'\nimport bs58 from 'bs58'\nimport { ACCESS_METHOD, encodeText, STAKE_ACCOUNT_ROLE } from '../utils'\nimport { createCreateProfileInstruction, createRpcPermitInstruction, FarmConfig, Profile, PROGRAM_ID } from '../dyfarm'\nimport { rpcRequestAuth, rpcVerifyAuth } from '../services'\n\nexport const getIsRpcPermitted = async (publicKey: PublicKey, connection: Connection, role: string) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  try {\n    const [userProfile] = PublicKey.findProgramAddressSync(\n      [Buffer.from('DYF:PROFILE'), publicKey.toBuffer()],\n      PROGRAM_ID\n    )\n    const profile = await Profile.fromAccountAddress(connection, userProfile, 'processed')\n    const label = (Object.values(STAKE_ACCOUNT_ROLE).find((row) => row.val === Number(profile.role)) ?? STAKE_ACCOUNT_ROLE.builder)['label']\n    if (label !== role) return null\n\n    return !profile.offchainPermit ? false : true\n  } catch (e) {\n    return false\n  }\n}\n\nexport const getIsProfileCreated = async (publicKey: PublicKey, connection: Connection) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  try {\n    const [userProfile] = PublicKey.findProgramAddressSync(\n      [Buffer.from('DYF:PROFILE'), publicKey.toBuffer()],\n      PROGRAM_ID\n    )\n    const profile = await Profile.fromAccountAddress(connection, userProfile, 'processed')\n    if (profile.nftStaked) {\n      return true\n    } else {\n      return false\n    }\n  } catch (e) {\n    return false\n  }\n}\n\nexport const createRpcPermitInstructions = async (publicKey: PublicKey, connection: Connection, role: string) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const instructions: TransactionInstruction[] = []\n  const signers: Signer[] = []\n\n  const [userProfile] = PublicKey.findProgramAddressSync([Buffer.from('DYF:PROFILE'), publicKey.toBuffer()], PROGRAM_ID)\n  const [farmConfigAccount] = PublicKey.findProgramAddressSync([Buffer.from('DYF:CONFIG')], PROGRAM_ID)\n  const farmConfig = await FarmConfig.fromAccountAddress(connection, farmConfigAccount, 'processed')\n\n  const profile = await connection.getParsedAccountInfo(userProfile)\n  if (!profile || !profile.value) {\n    instructions.push(\n      createCreateProfileInstruction(\n        {\n          user: publicKey,\n          userProfile,\n          farmConfig: farmConfigAccount,\n          clock: SYSVAR_CLOCK_PUBKEY\n        },\n        {\n          role: STAKE_ACCOUNT_ROLE[role].val,\n          access: ACCESS_METHOD.nft.val\n        },\n        PROGRAM_ID\n      )\n    )\n  }\n\n  instructions.push(\n    createRpcPermitInstruction(\n      {\n        user: publicKey,\n        authority: farmConfig.rpc,\n        profile: userProfile\n      },\n      {\n        status: true,\n        role: STAKE_ACCOUNT_ROLE[role].val\n      },\n      PROGRAM_ID\n    )\n  )\n\n  return { instructions, signers }\n}\n\nexport const getRpcAuthToken = async (\n  publicKey: PublicKey,\n  signMessage: (message: Uint8Array) => Promise<Uint8Array>\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!signMessage) throw new Error('signMessage is undefined')\n\n  const preToken = await rpcRequestAuth(publicKey.toBase58())\n  if (!preToken) throw new Error('Request RPC Auth is failed')\n\n  const encodedPreToken = encodeText(preToken)\n  const signedMessage = await signMessage(encodedPreToken)\n  const signature = bs58.encode(signedMessage)\n\n  const token = await rpcVerifyAuth(publicKey.toBase58(), signature)\n  if (!token) throw new Error('Verify RPC Auth is failed')\n\n  return token\n}\n","import { Connection, PublicKey, Signer, SYSVAR_CLOCK_PUBKEY, TransactionInstruction } from '@solana/web3.js'\nimport BN from 'bn.js'\nimport {\n  ApiSubmissionInfo,\n  ApiValidationsInfo,\n  PCampaign,\n  RpcValidationsInfo,\n  PUtterance,\n  ValidationArgs,\n  PHistory\n} from '../typings'\nimport { isEqualAddress, RPC_TXN_STATUS } from '../utils'\nimport { createValidatePhraseInstruction, PROGRAM_ADDRESS, PROGRAM_ID, Validate } from '../dyfarm'\nimport { getRpcValidationStatus, getSubmissionsValidationsInfo, rpcBatchValidatePhrase } from '../services'\n\nexport const fetchUtterancesAndHistoriesForValidator = async (\n  publicKey: PublicKey,\n  connection: Connection,\n  campaign: PCampaign,\n  latestSubmittedUuids: string[]\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const submissionsAndValidationsInfo = await getSubmissionsValidationsInfo(campaign.pubkey)\n  const submissionsInfo = submissionsAndValidationsInfo.submissions.filter(\n    (submission) => submission.pubkey && submission.submitted\n  )\n  const validationsInfo = submissionsAndValidationsInfo.validations\n  const rpcValidations = await getRpcValidationStatus(publicKey.toBase58(), campaign.pubkey)\n\n  const objValidationsInfo: {\n    [utterance: string]: PHistory[]\n  } = validationsInfo.reduce((all, validation) => {\n    const validations: ApiValidationsInfo[] = all[validation.utterance] ?? []\n    return {\n      ...all,\n      [validation.utterance]: validations.slice().concat(validation)\n    }\n  }, {})\n  const objRpcValidations: {\n    [utterance: string]: RpcValidationsInfo\n  } = rpcValidations.reduce((all, validation) => {\n    return { ...all, [validation.utterance]: validation }\n  }, {})\n\n  const utterancesChecked: PUtterance[] = []\n  const utterancesQueued: PUtterance[] = []\n  const utterancesExpired: PUtterance[] = []\n\n  const submissionsChecked: ApiSubmissionInfo[] = []\n  submissionsInfo.forEach((submission) => {\n    if (!submission.pubkey) return\n    const histories = objValidationsInfo[submission.pubkey] ?? []\n    const history = histories.find((history) => isEqualAddress(history.validator, publicKey))\n    if (!objRpcValidations[submission.pubkey] || history) {\n      submissionsChecked.push(submission)\n    }\n  })\n  submissionsChecked.forEach((submission) => {\n    const histories = submission.pubkey ? objValidationsInfo[submission.pubkey] ?? [] : []\n    const history = histories.find((history) => isEqualAddress(history.validator, publicKey))\n    utterancesChecked.push({\n      timestamp: submission.timestamp,\n      kind: submission.kind,\n      data: submission.data,\n      canonical: submission.canonical,\n      builder: submission.builder,\n      submitted: true,\n      pubkey: submission.pubkey,\n      finish: submission.finish,\n      correct: submission.correct,\n      incorrect: submission.incorrect,\n      head: submission.correct + submission.incorrect,\n      history: histories,\n      validated: history ? history.vote : undefined,\n      confidence: history ? history.confidence : undefined\n    })\n  })\n\n  const submissionsNotValidatedButRpcFinalizedOrExpired: ApiSubmissionInfo[] = []\n  submissionsInfo.forEach((submission) => {\n    if (!submission.pubkey) return\n    const histories = objValidationsInfo[submission.pubkey] ?? []\n    const history = histories.find((history) => isEqualAddress(history.validator, publicKey))\n    if (\n      objRpcValidations[submission.pubkey] &&\n      (objRpcValidations[submission.pubkey].status === RPC_TXN_STATUS.finalized.val ||\n        objRpcValidations[submission.pubkey].status === RPC_TXN_STATUS.expired.val) &&\n      !history\n    ) {\n      submissionsNotValidatedButRpcFinalizedOrExpired.push(submission)\n    }\n  })\n  await Promise.all(\n    submissionsNotValidatedButRpcFinalizedOrExpired.map(async (submission) => {\n      if (!submission.pubkey) return\n      const [historyAccount] = PublicKey.findProgramAddressSync(\n        [\n          Buffer.from('DYF:CAMPAIGN:PHRASE:LOG'),\n          Buffer.from(campaign.campaignTitle),\n          new PublicKey(submission.pubkey).toBuffer(),\n          publicKey.toBuffer()\n        ],\n        PROGRAM_ID\n      )\n\n      const histories = objValidationsInfo[submission.pubkey] ?? []\n      const utterance = {\n        timestamp: submission.timestamp,\n        kind: submission.kind,\n        data: submission.data,\n        canonical: submission.canonical,\n        builder: submission.builder,\n        submitted: true,\n        pubkey: submission.pubkey,\n        finish: submission.finish,\n        correct: submission.correct,\n        incorrect: submission.incorrect,\n        head: submission.correct + submission.incorrect,\n        history: histories\n      }\n\n      try {\n        const history = await Validate.fromAccountAddress(connection, historyAccount, 'processed')\n        utterancesChecked.push({\n          ...utterance,\n          history: histories.concat({\n            timestamp: new BN(history.time).toNumber(),\n            utterance: history.phrase.toBase58(),\n            validator: history.address.toBase58(),\n            vote: history.vote,\n            confidence: history.confident,\n            pubkey: historyAccount.toBase58()\n          }),\n          validated: history ? history.vote : undefined,\n          confidence: history ? history.confident : undefined\n        })\n      } catch (e) {\n        if (latestSubmittedUuids.includes(objRpcValidations[submission.pubkey].uuid)) {\n          utterancesExpired.push({\n            ...utterance,\n            expired: true\n          })\n        } else {\n          utterancesChecked.push(utterance)\n        }\n      }\n    })\n  )\n\n  const submissionsNotValidatedButRpcPending: ApiSubmissionInfo[] = []\n  submissionsInfo.forEach((submission) => {\n    if (!submission.pubkey) return\n    const histories = objValidationsInfo[submission.pubkey] ?? []\n    const history = histories.find((history) => isEqualAddress(history.validator, publicKey))\n    if (\n      objRpcValidations[submission.pubkey] &&\n      objRpcValidations[submission.pubkey].status === RPC_TXN_STATUS.pending.val &&\n      !history\n    ) {\n      submissionsNotValidatedButRpcPending.push(submission)\n    }\n  })\n  submissionsNotValidatedButRpcPending.forEach((submission) => {\n    if (!submission.pubkey) return\n    const histories = submission.pubkey ? objValidationsInfo[submission.pubkey] ?? [] : []\n    utterancesQueued.push({\n      timestamp: submission.timestamp,\n      kind: submission.kind,\n      data: submission.data,\n      canonical: submission.canonical,\n      builder: submission.builder,\n      submitted: true,\n      pubkey: submission.pubkey,\n      finish: submission.finish,\n      correct: submission.correct,\n      incorrect: submission.incorrect,\n      head: submission.correct + submission.incorrect,\n      history: histories,\n      uuid: objRpcValidations[submission.pubkey].uuid\n    })\n  })\n\n  const utterances = utterancesChecked\n    .concat(utterancesQueued)\n    .concat(utterancesExpired)\n    .sort((a, b) => a.timestamp - b.timestamp || a.data.localeCompare(b.data))\n    .reverse()\n\n  return utterances\n}\n\nexport const createValidatorValidateUtterancesInstructions = (\n  publicKey: PublicKey,\n  connection: Connection,\n  campaignTitle: string,\n  validations: ValidationArgs[]\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  let instructions: TransactionInstruction[] = []\n  const signers: Signer[] = []\n\n  const [campaignAccount] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN'), Buffer.from(campaignTitle)],\n    PROGRAM_ID\n  )\n  const [farmConfig] = PublicKey.findProgramAddressSync([Buffer.from('DYF:CONFIG')], PROGRAM_ID)\n  const [userProfile] = PublicKey.findProgramAddressSync([Buffer.from('DYF:PROFILE'), publicKey.toBuffer()], PROGRAM_ID)\n  const [campaignActivity] = PublicKey.findProgramAddressSync(\n    [Buffer.from('DYF:CAMPAIGN:ACTIVITY'), Buffer.from(campaignTitle), publicKey.toBuffer()],\n    PROGRAM_ID\n  )\n\n  instructions = validations.map((validation) => {\n    const phraseAccount = new PublicKey(validation.utterance)\n    const [logAccount] = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from('DYF:CAMPAIGN:PHRASE:LOG'),\n        Buffer.from(campaignTitle),\n        phraseAccount.toBuffer(),\n        publicKey.toBuffer()\n      ],\n      PROGRAM_ID\n    )\n    const [builderActivity] = PublicKey.findProgramAddressSync(\n      [Buffer.from('DYF:CAMPAIGN:ACTIVITY'), Buffer.from(campaignTitle), new PublicKey(validation.builder).toBuffer()],\n      PROGRAM_ID\n    )\n    return createValidatePhraseInstruction(\n      {\n        user: publicKey,\n        phraseAccount,\n        userProfile,\n        campaignActivity,\n        builderActivity,\n        logAccount,\n        campaignAccount,\n        farmConfig,\n        clock: SYSVAR_CLOCK_PUBKEY\n      },\n      {\n        campaignTitle: campaignTitle,\n        offchainRef: validation.canonical,\n        confident: validation.confidence,\n        status: validation.vote\n      },\n      PROGRAM_ID\n    )\n  })\n  return { instructions, signers }\n}\n\nexport const createRpcValidateUtterancesPromises = (\n  publicKey: PublicKey,\n  connection: Connection,\n  rpcAuthToken: string,\n  campaignTitle: string,\n  batchValidations: ValidationArgs[][]\n) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n  if (!rpcAuthToken || rpcAuthToken === '') throw new Error('RPC Auth Token is undefined')\n\n  const args = batchValidations.map((_validations) => {\n    return [\n      rpcAuthToken,\n      PROGRAM_ADDRESS,\n      campaignTitle,\n      publicKey.toBase58(),\n      _validations.map((validation) => validation.builder),\n      _validations.map((validation) => validation.utterance),\n      _validations.map((validation) => validation.canonical),\n      _validations.map((validation) => validation.vote),\n      _validations.map((validation) => validation.confidence)\n    ]\n  })\n\n  return { promise: rpcBatchValidatePhrase, args }\n}\n","import axios from 'axios'\nimport { getParsedNftAccountsByOwner } from '@nfteyez/sol-rayz'\nimport { MetadataKey } from '@nfteyez/sol-rayz/dist/config/metaplex'\nimport { Connection, LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js'\nimport { getAssociateTokenAccount, KANON_NFT_AUTHORITY_ADDRESS, KANON_NFT_CHARITY_ADDRESS, SNS_ADDRESS } from '../utils'\nimport { KanonNft } from '../typings'\n\ninterface ParsedNFT {\n  mint: string\n  updateAuthority: string\n  data: {\n    creators: any[]\n    name: string\n    symbol: string\n    uri: string\n    sellerFeeBasisPoints: number\n  }\n  key: MetadataKey\n  primarySaleHappened: boolean\n  isMutable: boolean\n  editionNonce: number\n  masterEdition?: string\n  edition?: string\n}\n\nexport const getSolBalance = async (publicKey: PublicKey, connection: Connection) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const balance = await connection.getBalance(publicKey)\n\n  return balance / LAMPORTS_PER_SOL\n}\n\nexport const getTokenBalance = async (publicKey: PublicKey, connection: Connection) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  let _tokenBalance = 0\n  const ata = getAssociateTokenAccount(new PublicKey(SNS_ADDRESS), publicKey)\n  const tokenAccount = await connection.getParsedAccountInfo(ata)\n  if (tokenAccount.value)\n    _tokenBalance =\n      // @ts-ignore\n      tokenAccount.value.data.parsed.info.tokenAmount.uiAmount\n\n  return Number(_tokenBalance)\n}\n\nexport const getKanonNfts = async (publicKey: PublicKey, connection: Connection) => {\n  if (!publicKey) throw new Error('PublicKey is undefined')\n  if (!connection) throw new Error('Connection is undefined')\n\n  const nftData = await getParsedNftAccountsByOwner({\n    publicAddress: publicKey.toBase58(),\n    connection\n  })\n  const parsedNfts: ParsedNFT[] = Object.keys(nftData).map((key) => nftData[key])\n\n  const parsedKanonNftData = parsedNfts.filter(\n    (nft) =>\n      nft.data.creators.length === 1 &&\n      nft.data.creators[0].address === KANON_NFT_CHARITY_ADDRESS &&\n      nft.data.creators[0].share === 100 &&\n      nft.updateAuthority === KANON_NFT_AUTHORITY_ADDRESS\n  )\n\n  const arrMetadata: string[] = []\n  await Promise.all(\n    parsedKanonNftData.map(async (nft) => {\n      try {\n        const resp = await axios.get(nft.data.uri)\n        arrMetadata.push(resp.data.image)\n      } catch (e) {\n        console.log(e)\n        arrMetadata.push('')\n      }\n    })\n  )\n\n  return parsedKanonNftData.map((nft, idx) => {\n    return {\n      mint: nft.mint,\n      updateAuthority: nft.updateAuthority,\n      name: nft.data.name,\n      symbol: nft.data.symbol,\n      metadataUri: nft.data.uri,\n      imageUri: arrMetadata[idx]\n    } as KanonNft\n  })\n}\n"],"names":["encodeText","txt","TextEncoder","encode","decodeText","bytes","TextDecoder","decode","Uint8Array","from","filter","item","sleep","ms","Promise","resolve","setTimeout","sendInstructions","_sendInstructions","connection","wallet","instructions","signers","commitment","payer","publicKey","tx","Transaction","_context5","getRecentBlockhash","recentBlockhash","blockhash","feePayer","add","length","partialSign","signTransaction","sendAndConfirmWithRetry","serialize","skipPreflight","txid","console","error","getUnixTime","Date","valueOf","awaitTransactionSignatureConfirmation","timeout","queryStatus","done","status","slot","confirmations","err","subId","_context3","reject","log","onSignature","result","context","e","_context2","_asyncToGenerator","_context","getSignatureStatuses","signatureStatuses","value","confirmationStatus","_signatureSubscriptions","removeSignatureListener","simulateTransaction","_simulateTransaction","transaction","_context6","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","Error","message","_sendAndConfirmWithRetry","txn","sendOptions","_context8","sendRawTransaction","startTime","_context7","confirmation","getTransaction","meta","_tx$meta","logMessages","_tx$meta$logMessages","join","simulateResult","_tx3$meta","_tx3$meta$logMessages","logs","Tag","getAssociateTokenAccount","mint","authority","PublicKey","findProgramAddressSync","toBuffer","splToken","getOrCreateAssociateTokenAccount","ata","_context4","getAccountInfo","isEqualAddress","acc_st","acc_nd","toBase58","STAKE_ACCOUNT_ROLE","architect","val","label","builder","validator","ACCESS_METHOD","nft","sns","free2play","PHRASE_TYPE","general","specific","cause","effect","OFFCHAIN_TYPE","synesis","ipfs","arweave","s3","RPC_TXN_STATUS","pending","finalized","expired","SNS_ADDRESS","AccessMethod","tagBeet","beet","campaignDiscriminator","Campaign","domain","subject","industry","organizer","lang","title","tag","open","close","expire","stakeTvl","minStake","rewardCap","rewardTvl","rewardClaim","minPhrase","minValidate","rpuValidator","rpuGeneral","rpuSpecific","rpuCause","rpuEffect","majorityQuorum","utterances","phraseApproved","payScale","timeLimit","finish","bump","this","fromArgs","fromAccountInfo","accountInfo","offset","deserialize","data","fromAccountAddress","address","commitmentOrConfig","gpaBuilder","programId","web3","beetSolana","fromStruct","campaignBeet","buf","_proto","accountDiscriminator","getMinimumBalanceForRentExemption","byteSize","hasCorrectByteSize","byteLength","pretty","x","_this","toNumber","_","_createClass","key","get","PhraseType","accessMethodBeet","campaignActivityDiscriminator","CampaignActivity","user","campaign","kind","stakeMint","stakeAmount","stakeStatus","unclaimedReward","claimedReward","numGeneralPhrases","numSpecificPhrases","numCausePhrases","numEffectPhrase","campaignActivityBeet","campaignVaultDiscriminator","CampaignVault","vault","users","rewardVl","reserve","campaignVaultBeet","farmConfigDiscriminator","FarmConfig","nftCreator","stakingContract","nftTvl","snsTvl","oracle","snsFeed","admin","rpc","campaigns","campaignsTables","penalty","promo","system","padding","farmConfigBeet","feedDiscriminator","Feed","name","aggregator","price","lastUpdate","feedBeet","instance","toFixedFromValue","guildDiscriminator","Guild","nftTable","scholarTable","owner","ownerShare","master","masterShare","scholarSlot","nftSlot","guildBeet","Offchain","phraseTypeBeet","Role","offchainBeet","phraseDiscriminator","Phrase","rentOwner","timestamp","head","lastIndex","offchainUri","offchainType","correct","incorrect","isValid","phraseBeet","StakingType","roleBeet","profileDiscriminator","Profile","nftStaked","nftMint","scholarAccess","scholarSign","nftOwner","nftOwnerShare","nftGuild","nftGuildMaster","nftGuildShare","role","durability","productivity","performance","activity","accept","rewardF2p","offchainPermit","offchainSigner","profileBeet","StakeAccountType","stakingTypeBeet","StakeAccountRole","stakeAccountTypeBeet","stakeAccountRoleBeet","stakeAccountDiscriminator","StakeAccount","dapp","stakeType","accountType","token","userRole","delegateCampaign","tokenAmount","lockInTime","lastRewardClaim","lockOutTime","pendingReward","reward","cliffReward","unlockReward","rewarded","dyfUser","stakeAccountBeet","validateDiscriminator","Validate","phrase","index","time","vote","confident","validateBeet","validatorsDiscriminator","Validators","list","validatorsBeet","accountProviders","createErrorFromCodeLookup","Map","createErrorFromNameLookup","InvalidPDAError","captureStackTrace","_inheritsLoose","set","InvalidStakeAccountError","_this2","InvalidStakeTypeError","_this3","InvalidStakeStatusError","_this4","InvalidStakeDelegateError","_this5","InvalidTokenMintError","_this6","InvalidTokenOwnerError","_this7","DoubleVoteDetectError","_this8","InsufficientTokenBalanceError","_this9","RewardBalanceIsZeroError","_this10","PhraseValidatedAlreadyError","_this11","CampaignFinishedAlreadyError","_this12","ProfileNotMatchWithAuthorityError","_this13","PermitRpcIsMissedError","_this14","RoleMismatchError","_this15","RpcSignerMismatchError","_this16","ConfidentIsInvalidError","_this17","StakeLockedError","_this18","InvalidMintError","_this19","InvalidNFTError","_this20","InvalidAccessMethodError","_this21","CampaignExpiredError","_this22","CampaignNotFinishedError","_this23","RewardIsLowError","_this24","BError","_this25","CError","_this26","DError","_this27","EError","_this28","adjustRewardStruct","adjustRewardInstructionDiscriminator","airdropStruct","airdropInstructionDiscriminator","createAirdropInstruction","accounts","instructionDiscriminator","keys","pubkey","isWritable","isSigner","userToken","tokenVault","pdaAccount","tokenProgram","clock","anchorRemainingAccounts","push","allocateTableStruct","allocateTableInstructionDiscriminator","checkPriceStruct","checkPriceInstructionDiscriminator","claimRewardStruct","claimRewardInstructionDiscriminator","createClaimRewardInstruction","userProfile","campaignActivity","campaignVault","farmConfig","dyfVault","systemProgram","createCampaignStruct","createCampaignInstructionDiscriminator","createCreateCampaignInstruction","campaignAccount","priceFeed","campaignTableAccount","lookupProgram","rent","createGuildStruct","createGuildInstructionDiscriminator","createProfileStruct","createProfileInstructionDiscriminator","createCreateProfileInstruction","deactiveTableStruct","deactiveTableInstructionDiscriminator","extendTableStruct","extendTableInstructionDiscriminator","free2playStruct","free2playInstructionDiscriminator","guildClaimRewardStruct","guildClaimRewardInstructionDiscriminator","guildGrantScholarStruct","guildGrantScholarInstructionDiscriminator","guildStakeNftStruct","guildStakeNftInstructionDiscriminator","guildUnstakeNftStruct","guildUnstakeNftInstructionDiscriminator","initializeStruct","initializeInstructionDiscriminator","revokeScholarStruct","revokeScholarInstructionDiscriminator","rpcCloseCampaignStruct","rpcCloseCampaignInstructionDiscriminator","rpcClosePhraseStruct","rpcClosePhraseInstructionDiscriminator","rpcCloseValidateStruct","rpcCloseValidateInstructionDiscriminator","rpcPermitStruct","rpcPermitInstructionDiscriminator","createRpcPermitInstruction","profile","rpcSubmitPhraseStruct","rpcSubmitPhraseInstructionDiscriminator","rpcValidatePhraseStruct","rpcValidatePhraseInstructionDiscriminator","scholarSignStruct","scholarSignInstructionDiscriminator","stakeCampaignStruct","stakeCampaignInstructionDiscriminator","createStakeCampaignInstruction","stakeNftStruct","stakeNftInstructionDiscriminator","createStakeNftInstruction","userNft","nftVault","nftMetadata","submitPhraseStruct","submitPhraseInstructionDiscriminator","createSubmitPhraseInstruction","phraseAccount","unstakeCampaignStruct","unstakeCampaignInstructionDiscriminator","createUnstakeCampaignInstruction","unstakeNftStruct","unstakeNftInstructionDiscriminator","updateCampaignStruct","updateCampaignInstructionDiscriminator","createUpdateCampaignInstruction","validatePhraseStruct","validatePhraseInstructionDiscriminator","createValidatePhraseInstruction","builderActivity","logAccount","verifyPreStakedNftStruct","verifyPreStakedNftInstructionDiscriminator","PROGRAM_ADDRESS","PROGRAM_ID","createAirdropSNSInstructions","_PublicKey$findProgra","Buffer","_PublicKey$findProgra2","_tokenBalance","getParsedAccountInfo","dyfVaultTokenAccount","parsed","info","uiAmount","SYSVAR_CLOCK_PUBKEY","authKey","apiHost","submitOntology","ontology","axios","post","mock","headers","Authorization","then","response","Array","isArray","submissionCount","ret","toLowerCase","isSuccess","deleteOntology","canonical","reference_id","checkWhitelist","addCampaignMeta","delCampaignMeta","getAllCampaignsInfo","campaignInfo","stake_status","map","campaignTitle","campaign_type","campaign_acct","explain","language","phrase_specific","phrase_general","phrase_cause","phrase_effect","Math","round","parse","String","dapp_open","concat","dapp_close","dapp_expire","min_phrase","min_validate","BN","rpu_specific","divn","LAMPORTS_PER_SOL","rpu_general","rpu_cause","rpu_effect","rpu_validator","majority_quorum","finish_status","progress","getCampaginMeta","dapp_title","getSubmissionsInfo","submission","Object","values","find","row","Number","submitted","utterance","undefined","getValidationsInfo","_context9","validation","confidence","vote_confidence","getSubmissionsValidationsInfo","_context10","submissions","validations","getAllCampaignTitles","_context11","getBuilderActivityInfo","_context12","getValidatorActivityInfo","_context13","getBuilderRecentSubmissions","utc_offset","_context14","getValidatorRecentValidations","_context15","rpcHost","rpcRequestAuth","jsonrpc","method","params","id","rpcVerifyAuth","signature","rpcSubmitPhrase","dyfarmContract","offchainReference","_response$data$error","code","rpcBatchSubmitPhrases","offchainReferences","offchainTypes","kinds","idx","_row$error","isFailed","uuid","rpcValidatePhrase","_response$data$error2","rpcBatchValidatePhrase","builders","phraseAccounts","canonicals","confidences","_row$error2","getRpcSubmissionStatus","uid","reference","state","getRpcValidationStatus","getRpcListActivity","getUtterancesAndHistoriesForArchitect","submissionsInfo","submissionsAndValidationsInfo","objValidationsInfo","reduce","all","slice","submissionsChecked","histories","history","validated","sort","a","b","localeCompare","reverse","createArchitectCreateCampaignInstructions","minimumStake","_PublicKey$findProgra3","farmConfigAccount","_PublicKey$findProgra4","_PublicKey$findProgra5","SYSVAR_RENT_PUBKEY","pair","minBuilder","minValidator","createArchitectUpdateCampaignInstructions","_PublicKey$findProgra6","_PublicKey$findProgra7","getUnusedCampaignTitle","str","randomstring","generate","includes","_PublicKey$findProgra8","campaignAccountInfo","createStakeCampaignInstructions","amount","access","createUnstakeCampaignInstructions","_PublicKey$findProgra9","_PublicKey$findProgra10","_PublicKey$findProgra11","_PublicKey$findProgra12","createClaimRewardInstructions","_PublicKey$findProgra13","_PublicKey$findProgra14","_PublicKey$findProgra15","_PublicKey$findProgra16","_PublicKey$findProgra17","_PublicKey$findProgra18","createBatchClaimRewardInstructions","campaignTitles","_PublicKey$findProgra19","_PublicKey$findProgra20","_PublicKey$findProgra21","_PublicKey$findProgra22","createStakeCampaignWithNFTInstructions","_PublicKey$findProgra25","_PublicKey$findProgra26","_PublicKey$findProgra27","_PublicKey$findProgra28","_PublicKey$findProgra29","getTotalAvailableRewards","appCampaigns","_PublicKey$findProgra30","stakedCampaigns","builderStakeStatus","validatorStakeStatus","totalRewards","totalClaimed","_PublicKey$findProgra31","campaignActivityAccount","rewards","claimed","getBuilderActivity","getValidatorActivity","getBuilderSubmissionsToday","getTimezoneOffset","getValidatorValidationsToday","getUtterancesAndHistoriesForBuilder","latestSubmittedUuids","validationsInfo","rpcSubmissions","objSubmissionsInfo","objRpcSubmissions","utterancesChecked","utterancesPre","utterancesQueued","utterancesExpired","forEach","submissionsPre","submissionsNotSubmittedButRpcFinalizedOrExpired","submissionsNotSubmittedAndRpcPending","createUtteranceByOntology","resp","utterance_type","now","deleteOntologyByCanonical","getCampaignFromCampaignTitle","campaignMeta","stakeInfo","eqn","_Object$values$find","stop","getAllCampaigns","campaignsInfo","stakedCampaignAccounts","getAppRole","getIsRpcPermitted","getIsProfileCreated","createRpcPermitInstructions","getRpcAuthToken","signMessage","preToken","encodedPreToken","bs58","fetchUtterancesAndHistoriesForValidator","rpcValidations","objRpcValidations","submissionsNotValidatedButRpcFinalizedOrExpired","historyAccount","submissionsNotValidatedButRpcPending","getSolBalance","getBalance","getTokenBalance","tokenAccount","getKanonNfts","getParsedNftAccountsByOwner","publicAddress","nftData","parsedNfts","parsedKanonNftData","creators","share","updateAuthority","arrMetadata","uri","image","symbol","metadataUri","imageUri","lookupAccount","offchainRef","guildAccount","nftTableAccount","scholarTableAccount","guildAta","masterNft","oldScholarTable","newScholarTable","validate","rpcAuthToken","batchUtterances","_utterances","promise","batchValidations","_validations","userNftAccount","stakeAccount","createError","acc","arr_addr","addr","addr_st","isOnCurve"],"mappings":"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"}